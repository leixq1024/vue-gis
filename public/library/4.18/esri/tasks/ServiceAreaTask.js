// All material copyright ESRI, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.18/esri/copyright.txt for details.
//>>built
define("../chunks/_rollupPluginBabelHelpers ../chunks/tslib.es6 ../core/has ../core/Logger ../core/accessorSupport/ensureType ../core/accessorSupport/decorators/property ../core/jsonMap ../core/accessorSupport/decorators/subclass ../core/urlUtils ../core/uuid ../portal/support/resourceExtension ../core/promiseUtils ../request ../geometry/support/normalizeUtils ./Task ../core/queryUtils ./mixins/NAServiceDescription ./support/ServiceAreaSolveResult".split(" "),function(r,p,k,E,F,t,G,u,H,I,J,v,w,x,
y,z,A,B){const C=z.createQueryParamsHelper({accumulateAttributes:{name:"accumulateAttributeNames"},attributeParameterValues:!0,defaultBreaks:!0,facilities:!0,outSpatialReference:{name:"outSR",getter:l=>l.outSpatialReference.wkid},pointBarriers:{name:"barriers"},polylineBarriers:!0,polygonBarriers:!0,restrictionAttributes:{name:"restrictionAttributeNames"},returnPointBarriers:{name:"returnBarriers"},travelMode:!0});k=function(l){function n(a){a=l.call(this,a)||this;a.url=null;return a}r._inheritsLoose(n,
l);var q=n.prototype;q.solve=function(a,e){const g=[],d=[],c={},h={};a.facilities&&a.facilities.features&&this._collectGeometries(a.facilities.features,d,"facilities.features",c);a.pointBarriers&&a.pointBarriers.features&&this._collectGeometries(a.pointBarriers.features,d,"pointBarriers.features",c);a.polylineBarriers&&a.polylineBarriers.features&&this._collectGeometries(a.polylineBarriers.features,d,"polylineBarriers.features",c);a.polygonBarriers&&a.polygonBarriers.features&&this._collectGeometries(a.polygonBarriers.features,
d,"polygonBarriers.features",c);return x.normalizeCentralMeridian(d).then(b=>{for(const f in c){const m=c[f];g.push(f);h[f]=b.slice(m[0],m[1])}return this._isInputGeometryZAware(h,g)?this.getServiceDescription():v.resolve({dontCheck:!0})}).then(b=>{("dontCheck"in b?b.dontCheck:b.hasZ)||this._dropZValuesOffInputGeometry(h,g);for(const f in h)h[f].forEach((m,D)=>{a.get(f)[D].geometry=m});b={query:{...this.parsedUrl.query,f:"json",...C.toQueryParams(a)}};if(this.requestOptions||e)b={...this.requestOptions,
...e,...b};return w(`${this.parsedUrl.path}/solveServiceArea`,b)}).then(b=>B.fromJSON(b.data))};q._collectGeometries=function(a,e,g,d){d[g]=[e.length,e.length+a.length];a.forEach(c=>{e.push(c.geometry)})};return n}(A.NAServiceDescriptionMixin(y));p.__decorate([t.property()],k.prototype,"url",void 0);return k=p.__decorate([u.subclass("esri.tasks.ServiceAreaTask")],k)});