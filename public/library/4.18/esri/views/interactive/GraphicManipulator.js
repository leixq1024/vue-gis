// All material copyright ESRI, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.18/esri/copyright.txt for details.
//>>built
define("exports ../../chunks/_rollupPluginBabelHelpers ../../chunks/tslib.es6 ../../core/has ../../core/maybe ../../core/Logger ../../core/accessorSupport/ensureType ../../core/accessorSupport/decorators/property ../../core/jsonMap ../../core/accessorSupport/decorators/subclass ../../core/urlUtils ../../core/uuid ../../portal/support/resourceExtension ../../core/Accessor ../../core/Evented ../../core/screenUtils ../../chunks/vec3f64 ../../chunks/vec3 ../../geometry/projection ../../symbols/support/ElevationInfo ../../symbols/support/defaults ../../chunks/vec2 ../../support/elevationInfoUtils ../support/drapedUtils".split(" "),
function(b,q,e,I,g,v,J,f,K,w,L,M,N,x,y,m,z,A,p,B,C,D,E,F){const G=v.getLogger("esri.views.interactive.GraphicManipulator");b.GraphicManipulator=function(r){function n(a){a=r.call(this,a)||this;a.layer=null;a.interactive=!0;a.selectable=!1;a.grabbable=!0;a.dragging=!1;a.cursor=null;a.events=new y.EventEmitter;a._circleCollisionCache=null;a._graphicSymbolChangedHandle=null;a._originalSymbol=null;return a}q._inheritsLoose(n,r);var k=n.prototype;k.grabbableForEvent=function(){return!0};k.destroy=function(){this.detachSymbolChanged();
this._resetGraphicSymbol();this._set("view",null)};k.intersectionDistance=function(a){const d=this._get("graphic");if(!1===d.visible)return null;var c=this._get("focusedSymbol");c=g.isSome(c)?c:d.symbol;const h=d.geometry;return g.isNone(h)?null:"2d"===this.view.type?this._intersectDistance2D(this.view,a,h,c):this._intersectDistance3D(this.view,a,d)};k.attach=function(){this.attachSymbolChanged();g.isSome(this.layer)&&this.layer.add(this.graphic)};k.detach=function(){this.detachSymbolChanged();this._resetGraphicSymbol();
g.isSome(this.layer)&&this.layer.remove(this.graphic)};k.attachSymbolChanged=function(){this.detachSymbolChanged();this._graphicSymbolChangedHandle=this.graphic.watch("symbol",a=>{g.isSome(a)&&a!==this.focusedSymbol&&a!==this._originalSymbol&&(this._originalSymbol=a,this._focused&&g.isSome(this.focusedSymbol)&&(this.graphic.symbol=this.focusedSymbol))},!0)};k.detachSymbolChanged=function(){g.isSome(this._graphicSymbolChangedHandle)&&(this._graphicSymbolChangedHandle.remove(),this._graphicSymbolChangedHandle=
null)};k._updateGraphicSymbol=function(){this.graphic.symbol=this._focused&&g.isSome(this.focusedSymbol)?this.focusedSymbol:this._originalSymbol};k._resetGraphicSymbol=function(){this.graphic.symbol=this._originalSymbol};k._intersectDistance2D=function(a,d,c,h){h=h||C.getDefaultSymbol2D(c);if(g.isNone(h))return null;var l=this._circleCollisionCache;if("point"!==c.type||"simple-marker"!==h.type)return F.intersectsDrapedGeometry(d,c,a)?1:null;if(g.isNone(l)||!l.originalPoint.equals(c)){const t=a.spatialReference;
p.canProjectWithoutEngine(c.spatialReference,t)&&(l=p.project(c,t),this._circleCollisionCache=l={originalPoint:c.clone(),mapPoint:l,radiusPx:m.pt2px(h.size)})}return g.isSome(l)?(d=m.screenPointObjectToArray(d,H),a=a.toScreen(l.mapPoint),l=l.radiusPx,c=a.x+m.pt2px(h.xoffset),h=a.y-m.pt2px(h.yoffset),D.squaredDistance(d,[c,h])<l*l?1:null):null};k._intersectDistance3D=function(a,d,c){return(d=a.toMap(d,{include:[c]}))&&p.projectPointToVector(d,u,a.renderSpatialReference)?A.distance(u,a.state.camera.eye):
null};q._createClass(n,[{key:"graphic",set:function(a){"mesh"===g.get(a.geometry,"type")?G.error("Mesh geometries are not supported"):(this._circleCollisionCache=null,this._originalSymbol=a.symbol,this._set("graphic",a),this.attachSymbolChanged())}},{key:"elevationInfo",get:function(){const a="elevationInfo"in this.graphic.layer&&this.graphic.layer.elevationInfo,d=E.getGraphicEffectiveElevationMode(this.graphic);return new B({mode:d,offset:a?a.offset:0})}},{key:"focusedSymbol",set:function(a){a!==
this._get("focusedSymbol")&&(this._set("focusedSymbol",a),this._updateGraphicSymbol(),this._circleCollisionCache=null)}},{key:"grabbing",set:function(a){a!==this._get("grabbing")&&(this._set("grabbing",a),this._updateGraphicSymbol())}},{key:"hovering",set:function(a){a!==this._get("hovering")&&(this._set("hovering",a),this._updateGraphicSymbol())}},{key:"selected",set:function(a){a!==this._get("selected")&&(this._set("selected",a),this._updateGraphicSymbol(),this.events.emit("select-changed",{action:a?
"select":"deselect"}))}},{key:"_focused",get:function(){return this._get("hovering")||this._get("grabbing")}}]);return n}(x);e.__decorate([f.property({constructOnly:!0,nonNullable:!0})],b.GraphicManipulator.prototype,"graphic",null);e.__decorate([f.property({readOnly:!0,dependsOn:["graphic"]})],b.GraphicManipulator.prototype,"elevationInfo",null);e.__decorate([f.property({constructOnly:!0,nonNullable:!0})],b.GraphicManipulator.prototype,"view",void 0);e.__decorate([f.property({value:null})],b.GraphicManipulator.prototype,
"focusedSymbol",null);e.__decorate([f.property({constructOnly:!0})],b.GraphicManipulator.prototype,"layer",void 0);e.__decorate([f.property()],b.GraphicManipulator.prototype,"interactive",void 0);e.__decorate([f.property()],b.GraphicManipulator.prototype,"selectable",void 0);e.__decorate([f.property()],b.GraphicManipulator.prototype,"grabbable",void 0);e.__decorate([f.property({value:!1})],b.GraphicManipulator.prototype,"grabbing",null);e.__decorate([f.property()],b.GraphicManipulator.prototype,"dragging",
void 0);e.__decorate([f.property()],b.GraphicManipulator.prototype,"hovering",null);e.__decorate([f.property({value:!1})],b.GraphicManipulator.prototype,"selected",null);e.__decorate([f.property()],b.GraphicManipulator.prototype,"cursor",void 0);b.GraphicManipulator=e.__decorate([w.subclass("esri.views.interactive.GraphicManipulator")],b.GraphicManipulator);const u=z.create(),H=m.createScreenPointArray();Object.defineProperty(b,"__esModule",{value:!0})});