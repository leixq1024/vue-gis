// All material copyright ESRI, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.18/esri/copyright.txt for details.
//>>built
define("exports ../../../chunks/_rollupPluginBabelHelpers ../../../core/maybe ../../../chunks/vec2f64 ../../../chunks/vec2 ./Settings ./snappingUtils ./SnappingAlgorithm ../../3d/support/geometryUtils/vector2d ./ParallelLineSnappingCandidate".split(" "),function(t,z,A,u,v,l,m,p,q,B){p=function(w){function r({enabled:c=l.defaults.lineSnapper.enabled,proximityThreshold:a=l.defaults.lineProximityThreshold,shortLineThreshold:b=l.defaults.shortLineThreshold}={}){c=w.call(this,{enabled:c,proximityThreshold:a,
shortLineThreshold:b})||this;c._tmpProjection=u.create();return c}z._inheritsLoose(r,w);var n=r.prototype;n.snapNewVertex=function(c,a){var b=a.geometry.data.components[0],d=b.edges.length,e=b.vertices.length;const g=[];if(2>d)return g;var f=a.geometry.data.coordinateHelper.fromPoint(c);f=m.anyMapPointToScreenPoint(f,a.geometry.data.coordinateHelper,a.elevationInfo,a.view);e=b.vertices[e-1];const k=b.vertices[0];d=b=b.edges[d-1];do this.edgeExceedsShortLineThreshold(d,a)&&(this._checkEdgeForParalleLines(d,
e.pos,c,f,a,g),this._checkEdgeForParalleLines(d,k.pos,c,f,a,g)),d=d.left.left;while(d&&d!==b);return g};n.snapExistingVertex=function(c,a){const b=[],d=A.unwrap(a.vertexHandle);var e=d.component;if(3>e.edges.length)return b;var g=a.geometry.data.coordinateHelper.fromPoint(c);g=m.anyMapPointToScreenPoint(g,a.geometry.data.coordinateHelper,a.elevationInfo,a.view);const f=d.left,k=d.right,x=e.vertices[0],y=e.vertices[e.vertices.length-1];let h=e=e.edges[0];do h!==f&&h!==k&&this.edgeExceedsShortLineThreshold(h,
a)&&(f&&this._checkEdgeForParalleLines(h,f.left.pos,c,g,a,b),k&&this._checkEdgeForParalleLines(h,k.right.pos,c,g,a,b),d===x?this._checkEdgeForParalleLines(h,y.pos,c,g,a,b):d===y&&this._checkEdgeForParalleLines(h,x.pos,c,g,a,b)),h=h.right.right;while(h&&h!==e);return b};n._checkEdgeForParalleLines=function(c,a,b,d,e,g){var f=c.left.pos;const k=c.right.pos;q.projectPointToLine(this._tmpProjection,a,f,k);v.squaredDistance(this._tmpProjection,a)<l.defaults.parallelLineThreshold||(q.projectPointToLine(this._tmpProjection,
u.fromValues(b.x,b.y),f,k,a),f=e.geometry.data.coordinateHelper,b=f.fromXYZ(this._tmpProjection,b.hasZ?b.z:0),m.squareDistance(d,m.anyMapPointToScreenPoint(b,f,e.elevationInfo,e.view))<this.squaredProximityTreshold(e.pointer)&&!this.parallelToPreviousCandidate(c,g)&&g.push(new B.ParallelLineSnappingCandidate({coordinateHelper:f,referenceLine:c,lineStart:a,targetPoint:b})))};n.parallelToPreviousCandidate=function(c,a){const b=c.left.pos,d=c.right.pos;for(const e of a)if(q.projectPointToLine(this._tmpProjection,
d,e.constraint.start,e.constraint.end,b),v.squaredDistance(this._tmpProjection,d)<l.defaults.parallelLineThreshold)return e.addReferenceLine(c),!0;return!1};return r}(p.SnappingAlgorithm);t.ParallelLineSnapper=p;Object.defineProperty(t,"__esModule",{value:!0})});