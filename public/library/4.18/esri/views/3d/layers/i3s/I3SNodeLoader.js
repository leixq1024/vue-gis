// All material copyright ESRI, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.18/esri/copyright.txt for details.
//>>built
define("../../../../core/has ../../../../core/lang ../../../../core/maybe ../../../../core/urlUtils ../../../../core/promiseUtils ../../../../core/asyncUtils ./I3SBinaryReader ./I3SUtil ./I3SMaterialUtil".split(" "),function(C,D,v,x,t,q,y,z,A){let w=function(){function h(a,c,e,b,d,f){this.streamDataController=c;this.logger=e;this.defaultGeometrySchema=b;this.requiredAttributes=d;this.options=f;this.logLayer=a;this.layerUrl=a.parsedUrl.path;this.geometryDefinitions=a.geometryDefinitions;if(a.materialDefinitions){const g=
a.textureSetDefinitions;this.materialAndTextures=a.materialDefinitions.map(k=>A.getMaterialAndTextures(g,k))}}var l=h.prototype;l.load=function(a,c,e){return this.streamDataController.request(a,c,{signal:e})};l.loadAttribute=function(a,c,e){return this.load(`${this.layerUrl}/nodes/${a.resources.attributes}/attributes/${c.key}/0`,"binary",e).then(b=>y.readBinaryAttribute(c,b))};l.loadAttributes=function(a,c,e){return t.eachAlways(c.map(b=>this.loadAttribute(a,b.attributeStorageInfo,e))).then(b=>{const d=
{};for(let f=0;f<c.length;++f)if(b[f].value)d[c[f].name]=b[f].value;else{if(t.isAbortError(b[f].error))throw b[f].error;this.logger.error("#loadAttributes",this.logLayer,`Failed to load attributeData for '${c[f].name}' on node '${a.id}'`,b[f].error)}return d})};l.loadNodeData=async function(a,c){var e=null!=this.requiredAttributes&&a.resources.attributes?q.result(this.loadAttributes(a,this.requiredAttributes,c)):null;var b=this.geometryDefinitions;var d={bufferDefinition:null,bufferIndex:0};if(!(null==
b||0>a.resources.geometryDefinition)&&(b=0<=a.resources.geometryDefinition?b[a.resources.geometryDefinition].geometryBuffers:null,null!=b))for(var f=0;f<b.length;f++){var g=b[f];if(null!=g.compressedAttributes){if("draco"===g.compressedAttributes.encoding&&!C("disable-feature:i3s-draco")){d.bufferIndex=f;d.bufferDefinition=g;break}}else d.bufferIndex=f,d.bufferDefinition=b[f]}const {bufferDefinition:k,bufferIndex:u}=d;f=(g=!!a.resources.geometry)?q.result(this.loadGeometry(a.resources.geometry,u,
c)):null;b=a.resources.hasSharedResource?await this.loadShared(a,c):null;var m=(d=this.materialAndTextures&&0<=a.resources.materialDefinition?this.materialAndTextures[a.resources.materialDefinition]:null!=b?A.getMaterialAndTexturesFromShared(b):null)&&d.material;d=d&&d.textures;const E=`${a.id}`,B=!g&&this.options.loadFeatureData;g=B?await this.loadFeatureData(E,c):null;if(B)a:{for(n of g.featureData)if(m=n.geometries,null!=m)for(var p of m){var n={featureIds:[n.id],featureDataPosition:n.position,
geometries:[p]};break a}n=null}else n={featureIds:[],geometries:[{type:"ArrayBufferView",params:{material:m}}],featureDataPosition:[0,0,0]};if(p=v.isNone(n)){p=[];for(var r of g.featureData)null!=r.position&&p.push({featureIds:[r.id],featureDataPosition:r.position,geometries:null})}r=p;p=null!=d&&0<d.length?q.result(this.loadTextures(a,d,c)):null;c=a=null;f&&(a=q.assertResult(await f),(c=this.defaultGeometrySchema)&&b&&b.materialDefinitions&&(f=Object.keys(b.materialDefinitions)[0],!b.materialDefinitions[f].params.vertexRegions&&
c.vertexAttributes.region&&(c=D.clone(c),delete c.vertexAttributes.region)),c=y.createGeometryDescriptor(k,c));b=p?q.assertResult(await p):null;e=(e=e?q.assertResult(await e):{})?{attributeData:e,loadedAttributes:this.requiredAttributes}:null;return v.isSome(n)?{geometryData:n,attributeDataInfo:e,geometryBuffer:a,geometryDescriptor:c,requiredTextures:d,textureData:b}:v.isSome(r)?{pointData:r,attributeDataInfo:e,geometryBuffer:a,geometryDescriptor:c,requiredTextures:d,textureData:b}:t.reject()};h.addAbsoluteHrefTexture=
function(a,c){a=a.textureDefinitions;if(null!=a)for(const e of Object.keys(a))for(const b of a[e].images)Array.isArray(b.href)?b.hrefConcat=b.href.map(d=>x.makeAbsolute(d,c)):b.hrefConcat=x.makeAbsolute(b.href,c)};h.fixTextureEncodings=function(a){a=a.textureDefinitions;if(null!=a)for(const e in a){const b=a[e];if(Array.isArray(b.encoding))for(var c=0;c<b.encoding.length;c++){const d=b.encoding[c];"data:"===d.substring(0,5)&&(b.encoding[c]=d.substring(5))}else c=b.encoding,"data:"===c.substring(0,
5)&&(b.encoding=c.substring(5))}};l.loadShared=function(a,c){const e=`${this.layerUrl}/nodes/${a.resources.geometry}/shared`;return this.load(e,"json",c).then(b=>{h.fixTextureEncodings(b);h.addAbsoluteHrefTexture(b,e);return b})};l.loadTexture=function(a,c,e,b,d,f){return d===z.DDS_ENCODING_STRING?this.load(a,"binary",f).then(g=>({id:c,usage:e,data:g,encoding:d})):this.load(a,"image",f).then(g=>{var k=g;if(b&&4096<=g.width*g.height){k=Math.ceil(g.width/2);const u=Math.ceil(g.height/2),m=document.createElement("canvas");
m.width=k;m.height=u;m.getContext("2d").drawImage(g,0,0,k,u);k=m}return{id:c,usage:e,data:k,encoding:d}})};l.loadTextures=function(a,c,e){const b=this.options.textureFormat===h.TextureFormat.Compressed,d=this.options.textureFormat===h.TextureFormat.Downsampled,f=this.options.textureUsageMask;return t.all(c.map(g=>{if(0===(g.usage&f))return null;const k=z.selectEncoding(g.encodings,b);return null==k?(this.logger.error("#loadTextures",this.logLayer,`No known encoding for texture found on node ${a.id}`),
t.reject()):this.loadTexture(`${this.layerUrl}/nodes/${a.resources.texture||a.id}/textures/${k.name}`,g.id,g.usage,d,k.encoding,e)}))};l.loadFeatureData=function(a,c){return this.load(`${this.layerUrl}/nodes/${a}/features/0`,"json",c)};l.loadGeometry=function(a,c,e){return this.load(`${this.layerUrl}/nodes/${a}/geometries/${c}`,"binary",e)};return h}();(function(h){h=h.TextureFormat||(h.TextureFormat={});h[h.Compressed=0]="Compressed";h[h.Normal=1]="Normal";h[h.Downsampled=2]="Downsampled"})(w||(w=
{}));return w});