// All material copyright ESRI, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.18/esri/copyright.txt for details.
//>>built
define("exports ../../../../chunks/_rollupPluginBabelHelpers ../../../../chunks/vec3f64 ../../../../chunks/vec3 ../../support/buffer/BufferView ../../../../geometry/support/aaBoundingBox ../../support/buffer/InterleavedLayout ../lib/Util ../lib/GLMaterial ./internal/MaterialUtil ../lib/Material ./internal/bufferWriterUtils ../shaders/ShadedColorMaterialTechnique".split(" "),function(m,t,n,l,C,u,D,E,F,v,w,x,d){let L=function(g){function e(a,c){a=g.call(this,c,a,G)||this;a.supportsEdges=!0;a.techniqueConfig=
new d.ShadedColorMaterialTechniqueConfiguration;a._vertexAttributeLocations=d.ShadedColorMaterialVertexAttrLocations;return a}t._inheritsLoose(e,g);var b=e.prototype;b.getTechniqueConfig=function(a,c){this.techniqueConfig.output=a;this.techniqueConfig.cullFace=this.params.cullFace;this.techniqueConfig.slicePlaneEnabled=this.params.slicePlaneEnabled;this.techniqueConfig.transparent=this.params.transparent;this.techniqueConfig.writeDepth=this.params.writeDepth;this.techniqueConfig.screenSizeEnabled=
this.params.screenSizeEnabled;this.techniqueConfig.shadingEnabled=this.params.shadingEnabled;this.techniqueConfig.transparencyPassType=c?c.transparencyPassType:3;return this.techniqueConfig};b.getPassParameters=function(){return this.params};b.intersect=function(a,c,p,k,y,z,A){if(this.params.screenSizeEnabled){const q=a.getAttribute(d.ShadedColorMaterialVertexAttrConstants.OFFSET);v.intersectTriangleGeometry(a,c,k,y,z,{applyToVertex:(f,r,H,h)=>{h=l.set(B,q.data[3*h],q.data[3*h+1],q.data[3*h+2]);f=
l.set(I,f,r,H);l.scale(h,h,this.params.screenSize*k.camera.computeRenderPixelSizeAt(h));l.add(f,f,h);return[f[0],f[1],f[2]]},applyToAabb:f=>{const r=u.center(f,B);return u.scale(f,this.params.screenSize*k.camera.computeRenderPixelSizeAt(r))}},A)}else v.intersectTriangleGeometry(a,c,k,y,z,void 0,A)};b.getGLMaterial=function(a){return 0===a.output||7===a.output||4===a.output?new J(a):void 0};b.createBufferWriter=function(){return new K(this.params.screenSizeEnabled)};return e}(w.Material),J=function(g){function e(a){a=
g.call(this,a)||this;a.updateParameters();return a}t._inheritsLoose(e,g);var b=e.prototype;b.updateParameters=function(a){this.technique=this.techniqueRep.acquireAndReleaseExisting(d.ShadedColorMaterialTechnique,this.material.getTechniqueConfig(this.output,a),this.technique)};b.beginSlot=function(a){if(4===this.output)return 3===a;let c=3;this.technique.configuration.transparent&&(c=this.technique.configuration.writeDepth?5:8);return a===c};b.ensureParameters=function(a){this.updateParameters(a)};
b.bind=function(a,c){a.bindProgram(this.technique.program);this.technique.bindPass(a,this.material.getPassParameters(),c)};return e}(F);const G={color:[1,1,1,1],shadingTint:[0,0,0,.25],shadingDirection:l.normalize(n.create(),[.5,-.5,-.5]),transparent:!1,writeDepth:!0,slicePlaneEnabled:!1,cullFace:0,screenSizeEnabled:!1,screenSize:14,shadingEnabled:!0,...w.materialParametersDefaults};let K=function(){function g(b){this.screenSizeEnabled=b;b=D.newLayout().vec3f(d.ShadedColorMaterialVertexAttrConstants.POSITION).vec3f(d.ShadedColorMaterialVertexAttrConstants.NORMAL);
this.screenSizeEnabled&&b.vec3f(d.ShadedColorMaterialVertexAttrConstants.OFFSET);this.vertexBufferLayout=b}var e=g.prototype;e.allocate=function(b){return this.vertexBufferLayout.createBuffer(b)};e.elementCount=function(b){return b.indices[d.ShadedColorMaterialVertexAttrConstants.POSITION].length};e.write=function(b,a,c,p){x.writeDefaultAttributes(a,this.vertexBufferLayout,b.transformation,b.invTranspTransformation,c,p);if(this.screenSizeEnabled)if(d.ShadedColorMaterialVertexAttrConstants.OFFSET in
a.vertexAttr){const k=a.vertexAttr[d.ShadedColorMaterialVertexAttrConstants.OFFSET];a=a.indices[d.ShadedColorMaterialVertexAttrConstants.OFFSET];E.assert(3===k.size);if(c=c.getField(d.ShadedColorMaterialVertexAttrConstants.OFFSET,C.BufferViewVec3f))x.writePosition(a,k.data,b.invTranspTransformation,c,p);else throw Error("unable to acquire view for "+d.ShadedColorMaterialVertexAttrConstants.OFFSET);}else throw Error(`${d.ShadedColorMaterialVertexAttrConstants.OFFSET} vertex attribute required for screenSizeEnabled ShadedColorMaterial`);
};return g}();const B=n.create(),I=n.create();m.ShadedColorMaterialVertexAttrConstants=d.ShadedColorMaterialVertexAttrConstants;m.ShadedColorMaterial=L;Object.defineProperty(m,"__esModule",{value:!0})});