// All material copyright ESRI, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.18/esri/copyright.txt for details.
//>>built
define("exports ../../../../core/maybe ../../../../core/PooledArray ../../../../core/screenUtils ../../../../chunks/vec3f64 ../../../../chunks/vec3 ../../support/stack ../../../../chunks/ray ../../webgl-engine/lib/intersectorUtils ../../webgl-engine/lib/Intersector".split(" "),function(E,n,I,v,J,p,m,z,F,w){function G(k,f,a){for(const b of k)f&&!f(b)||a.push(b);return a}function H(k){A||(A=new w.Intersector(k));A.viewingMode=k;return A}let K=function(){function k(a,b,c){this.viewingMode=a;this.layerProvider=
b;this.view=c;this.externalIntersectionHandlers=new I;this.tolerance=w.Intersector.DEFAULT_TOLERANCE;this.tmpRay=z.create();this.validateHUDIntersector=new w.Intersector(this.viewingMode);this.validateHUDIntersector.options.hud=!1}var f=k.prototype;f.intersectScreen=function(a,b){return this.intersectRay(this.getPickRay(a,this.tmpRay),H(this.viewingMode),b)};f.intersectScreenFreePointFallback=function(a,b){return this.intersectRayFreePointFallback(this.getPickRay(a,this.tmpRay),b)};f.intersectRayFreePointFallback=
function(a,b){return this.intersectRay(a,H(this.viewingMode),b)||this.intersectRayFreePointLocal(a,b)};f.intersectRay=function(a,b,c,d){b.options.selectionMode=!1;b.options.store=0;this.computeIntersection(a,b,d);return b.results.min?b.results.min.getIntersectionPoint(c):!1};f.getCenterRayWithSubpixelOffset=function(a,b,c=.5,d=.5){a.getRenderCenter(u,c,d);u[0]+=.0466;u[1]-=.0123;return z.fromRenderAtEye(a,u,b)};f.intersectIntersectorScreen=function(a,b,c){this.computeIntersection(this.getPickRay(a,
this.tmpRay),b,c)};f.intersectToolIntersectorScreen=function(a,b,c){a=this.getPickRay(a,this.tmpRay);this.intersectToolIntersectorRay(a,b,c)};f.intersectToolIntersectorRay=function(a,b,c){b.options.selectionMode=!0;this.computeIntersection(a,b,c);const d=b.results.min;this.view.basemapTerrain&&this.view.basemapTerrain.isOpaque()||d.hasIntersectionPoint&&"TerrainRenderer"!==d.intersector||(b.options.selectionMode=!1,this.computeIntersection(a,b,c))};f.setTolerance=function(a=w.Intersector.DEFAULT_TOLERANCE){this.tolerance=
a};f.addIntersectionHandler=function(a){this.externalIntersectionHandlers.push(a);this.externalIntersectionHandlers.sort((b,c)=>"Terrain"===b.type?1:"Terrain"===c.type?-1:0)};f.removeIntersectionHandler=function(a){this.externalIntersectionHandlers.removeUnordered(a);this.externalIntersectionHandlers.sort((b,c)=>"Terrain"===b.type?1:"Terrain"===c.type?-1:0)};f.getPickRay=function(a,b=z.create()){return z.fromScreen(this.view.state.camera,a,b)};f.intersectRayFreePointLocal=function(a,b){if(2!==this.viewingMode||
n.isNone(a))return!1;var c=this.view.dataExtent,d=Math.max(c.xmax-c.xmin,c.ymax-c.ymin,8*Math.max(c.xmax-c.xmin,c.ymax-c.ymin));if(0===d)return p.add(b,a.origin,p.normalize(m.sv3d.get(),a.direction)),!0;var e=this.view.state.camera;const l=Math.max(0,c.xmin-e.eye[0],e.eye[0]-c.xmax);c=Math.max(0,c.ymin-e.eye[1],e.eye[1]-c.ymax);e=d/Math.max(1,Math.pow(Math.max(0,Math.log(d/(Math.abs(e.relativeElevation)+Number.MIN_VALUE))),2));e=Math.max(e,Math.min(Math.sqrt(l*l+c*c),d));d=p.scale(m.sv3d.get(),a.direction,
e/p.length(a.direction));p.add(b,a.origin,d);return!0};f.intersectElevationFromScreen=function(a,b,c=0){return this.intersectElevation(this.getPickRay(a,this.tmpRay),b,c)};f.intersectElevation=function(a,b,c=0){if(n.isNone(a))return null;var d=n.isSome(b)?b.mode:"absolute-height",e=n.isSome(b)?n.unwrapOr(b.offset,0):0,l="on-the-ground"!==d?e+c:0;b=l/this.view.renderCoordsHelper.unitInMeters;if("absolute-height"===d)return this.view.renderCoordsHelper.intersectManifold(a,l,B)?(c=this.view.computeMapPointFromVec3d(B),
c.z-=e,c):null;e=this.view.state.camera;const r=v.castRenderScreenPointArray3(m.sv3d.get());e.projectToRenderScreen(a.origin,r);l=this.prepareFilters(null,x);const y=this.view.slicePlane,t=n.isSome(y)?F.sliceFilterPredicate(y):null,h=new w.Intersector(this.viewingMode);h.options.store=0;h.options.verticalOffset=b;b=a.origin;a=p.add(m.sv3d.get(),b,a.direction);h.reset(b,a);h.point=r;h.camera=e;h.filterPredicate=null;switch(d){case "relative-to-scene":h.intersect(l.layers,r,e,this.tolerance,null,g=>
g.metadata&&g.metadata.isElevationSource);this.externalIntersectionHandlers.forAll(g=>{"I3S"!==g.type&&"Terrain"!==g.type||g.intersect(h,g.slicePlane?t:null,h.rayBeginPoint,h.rayEndPoint,r)});break;case "on-the-ground":case "relative-to-ground":this.externalIntersectionHandlers.forAll(g=>{g.isGround&&g.intersect(h,g.slicePlane?t:null,h.rayBeginPoint,h.rayEndPoint,r)})}return h.results.min.getIntersectionPoint(B)?(d=this.view.computeMapPointFromVec3d(B),d.z=c,d):null};f.computeIntersection=function(a,
b,c){if(!n.isNone(a)){var d=this.view.state.camera,e=v.castRenderScreenPointArray3(m.sv3d.get());d.projectToRenderScreen(a.origin,e);var l=this.prepareFilters(c,x);b.options.selectOpaqueTerrainOnly=!c||!("include"in c||"exclude"in c);var r=a.origin,y=p.add(m.sv3d.get(),a.origin,a.direction);b.reset(r,y);b.intersect(l.layers,e,d,this.tolerance);a=this.view.slicePlane;var t=n.isSome(a)?F.sliceFilterPredicate(a):null;b.intersect(l.sliceableLayers,e,d,this.tolerance,t);var h=c&&(c.requiresGroundFeedback||
c.enableDraped);this.externalIntersectionHandlers.forAll(g=>{b.options.isFiltered=!l.filterLayerUid(g.intersectionHandlerId);(g.isGround&&h||!b.options.isFiltered)&&g.intersect(b,g.slicePlane?t:null,r,y,e)});a=m.sv3d.get();if(c&&c.enableDraped&&b.results.ground.getIntersectionPoint(a)){c=this.view.basemapTerrain.overlayManager.renderer;const g=this.view.renderCoordsHelper.spatialReference,q=m.sv3d.get();this.view.renderCoordsHelper.fromRenderCoords(a,q,this.view.spatialReference);q[2]=this.view.elevationProvider.getElevation(a[0],
a[1],a[2],g,"ground")||0;c.intersect(b,q,l.filterRenderGeometry)}b.sortResults();a=b.results.hud;if(a.hasIntersectionPoint){const g=v.castRenderScreenPointArray3(m.sv3d.get()),q=m.sv3d.get(),C=m.sv3d.get();this.unprojectHUDResultRay(a.center,g,q,C);c=p.distance(a.center,q)/p.distance(q,C)*.99;this.validateHUDIntersector.reset(q,C);this.validateHUDIntersector.intersect(l.layers,g,d,this.tolerance);this.validateHUDIntersector.intersect(l.sliceableLayers,g,d,this.tolerance,t);this.externalIntersectionHandlers.forAll(D=>
{l.filterLayerUid(D.intersectionHandlerId)&&D.intersect(this.validateHUDIntersector,D.slicePlane?t:null,q,C,g)});d=this.validateHUDIntersector.results.min;if(null==d.dist||c<=d.dist)b.results.min.copyFrom(a),b.results.all.splice(0,0,a)}}};f.prepareFilters=function(a,b){const c=[],d=[];this.layerProvider.forEachLayer(e=>{e.isPickable&&(e.isSliceable?d:c).push(e)});b.include=a&&a.include;b.exclude=a&&a.exclude;b.layers.length=0;b.sliceableLayers.length=0;G(c,b.filterLayer,b.layers);G(d,b.filterLayer,
b.sliceableLayers);return b};f.unprojectHUDResultRay=function(a,b,c,d){const e=this.view.state.camera;e.projectToRenderScreen(a,b);a=v.castRenderScreenPointArray3(m.sv3d.get());a[0]=b[0];a[1]=b[1];a[2]=0;e.unprojectFromRenderScreen(a,c);a[2]=1;e.unprojectFromRenderScreen(a,d)};return k}(),A;const x={include:null,exclude:null,layers:[],sliceableLayers:[],filterLayer(k){return x.filterLayerUid(k.apiLayerUid)},filterLayerUid(k){const {include:f,exclude:a}=x;return n.isNone(k)?null==f&&null==a:(null==
f||f.has(k))&&(null==a||!a.has(k))},filterRenderGeometry(k){return x.filterLayerUid(k.data.layerUid)}},B=J.create(),u=v.createRenderScreenPointArray();E.SceneIntersectionHelper=K;Object.defineProperty(E,"__esModule",{value:!0})});