// All material copyright ESRI, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.18/esri/copyright.txt for details.
//>>built
define(["../../core/Error","../../core/promiseUtils","./PixelBlock","../../core/workers/workers"],function(e,h,g,l){return function(){function k(){this._workerThread=null;this._destroyed=!1}var d=k.prototype;d.initialize=async function(){const a=await l.open("RasterWorker");this._destroyed?a.close():this._workerThread=a};d.destroy=function(){this._destroyed=!0;this._workerThread&&(this._workerThread.close(),this._workerThread=null)};d.decode=async function(a,b){if(!this._workerThread)throw new e("raster-jobhandler:no-connection",
"no available worker connection");return(a=await this._workerThread.invoke("decode",a,b))?new g(a):null};d.symbolize=async function(a,b){if(!this._workerThread)throw new e("raster-jobhandler:no-connection","no available worker connection");a={extent:a.extent&&a.extent.toJSON(),pixelBlock:a.pixelBlock.toJSON(),simpleStretchParams:a.simpleStretchParams,bandIds:a.bandIds};return(b=await this._workerThread.invoke("symbolize",a,b))?new g(b):null};d.updateSymbolizer=async function(a,b){var c;if(!this._workerThread)throw new e("raster-jobhandler:no-connection",
"no available worker connection");const f=null==a?void 0:null==(c=a.rendererJSON)?void 0:c.histograms;await h.all(this._workerThread.broadcast("updateSymbolizer",{symbolizerJSON:a.toJSON(),histograms:f},b))};d.stretch=async function(a,b){if(!this._workerThread)throw new e("raster-jobhandler:no-connection","no available worker connection");if(null==a||!a.pixelBlock)return null;a={srcPixelBlock:a.pixelBlock.toJSON(),stretchParams:a.stretchParams};return(b=await this._workerThread.invoke("stretch",a,
b))?new g(b):null};d.split=async function(a,b){if(!this._workerThread)throw new e("raster-jobhandler:no-connection","no available worker connection");if(null==a||!a.pixelBlock)return null;a={srcPixelBlock:a.pixelBlock.toJSON(),tileSize:a.tileSize,maximumPyramidLevel:a.maximumPyramidLevel};const c=await this._workerThread.invoke("split",a,b);c&&c.forEach((f,m)=>{c.set(m,f?g.fromJSON(f):null)});return h.resolve(c)};d.estimateStatisticsHistograms=async function(a,b){if(!this._workerThread)throw new e("raster-jobhandler:no-connection",
"no available worker connection");if(null==a||!a.pixelBlock)return null;a={srcPixelBlock:a.pixelBlock.toJSON()};b=await this._workerThread.invoke("estimateStatisticsHistograms",a,b);return h.resolve(b)};d.mosaicAndTransform=async function(a,b){var c;if(!this._workerThread)throw new e("raster-jobhandler:no-connection","no available worker connection");if(null==a||null==(c=a.srcPixelBlocks)||!c.length)return null;a={...a,srcPixelBlocks:a.srcPixelBlocks.map(f=>f?f.toJSON():null)};return(b=await this._workerThread.invoke("mosaicAndTransform",
a,b))?new g(b):null};return k}()});