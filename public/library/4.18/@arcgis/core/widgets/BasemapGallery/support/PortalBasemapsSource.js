/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.18/esri/copyright.txt for details.
*/
import{_ as t}from"../../../chunks/tslib.es6.js";import"../../../chunks/ArrayPool.js";import"../../../chunks/object.js";import"../../../chunks/deprecate.js";import"../../../core/lang.js";import"../../../config.js";import{L as s}from"../../../chunks/Logger.js";import"../../../chunks/string.js";import"../../../chunks/metadata.js";import{property as r}from"../../../core/accessorSupport/decorators/property.js";import"../../../core/Accessor.js";import"../../../chunks/PropertyOrigin.js";import"../../../core/scheduling.js";import{resolve as o,isAbortError as e}from"../../../core/promiseUtils.js";import"../../../chunks/Message.js";import a from"../../../core/Error.js";import"../../../chunks/ensureType.js";import{subclass as i}from"../../../core/accessorSupport/decorators/subclass.js";import"../../../chunks/Evented.js";import p from"../../../core/Collection.js";import"../../../chunks/collectionUtils.js";import"../../../chunks/JSONSupport.js";import{a as l}from"../../../chunks/Promise.js";import{L as n}from"../../../chunks/Loadable.js";import"../../../chunks/asyncUtils.js";import"../../../chunks/loadAll.js";import"../../../core/urlUtils.js";import"../../../core/accessorSupport/decorators/cast.js";import"../../../chunks/jsonMap.js";import"../../../chunks/reader.js";import"../../../chunks/writer.js";import"../../../chunks/resourceExtension.js";import"../../../geometry/SpatialReference.js";import"../../../chunks/locale.js";import"../../../chunks/number.js";import"../../../intl.js";import"../../../kernel.js";import"../../../request.js";import"../../../chunks/assets.js";import"../../../geometry/Geometry.js";import"../../../geometry/Point.js";import"../../../chunks/Ellipsoid.js";import"../../../geometry/support/webMercatorUtils.js";import"../../../geometry/Extent.js";import"../../../portal/PortalQueryParams.js";import"../../../portal/PortalQueryResult.js";import"../../../portal/PortalFolder.js";import"../../../portal/PortalGroup.js";import"../../../portal/PortalUser.js";import m from"../../../portal/Portal.js";import"../../../portal/PortalItemResource.js";import"../../../portal/PortalRating.js";import"../../../portal/PortalItem.js";import c from"../../../Basemap.js";import"../../../chunks/writeUtils.js";import u from"../../../core/Handles.js";import{init as h}from"../../../core/watchUtils.js";import j from"./LocalBasemapsSource.js";const d=p.ofType(c),y="esri.widgets.BasemapGallery.support.PortalBasemapsSource",f=s.getLogger(y);let k=class extends(n.LoadableMixin(l(j))){constructor(t){super(t),this._handles=new u,this.basemaps=new d,this.filterFunction=null,this.portal=m.getDefault(),this.query=null,this.updateBasemapsCallback=null}initialize(){this._handles.add([h(this,["filterFunction","loadStatus","portal.basemapGalleryGroupQuery","portal.user","query","updateBasemapsCallback"],(()=>this.refresh()))])}destroy(){this._handles.destroy(),this._handles=null,this.filterFunction=null,this.portal=null}get state(){return"not-loaded"===this.loadStatus?"not-loaded":"loading"===this.loadStatus||this._lastPortalBasemapFetchController?"loading":"ready"}load(t){return this.addResolvingPromise(this.portal.load(t)),this.notifyChange("state"),o(this)}async refresh(){if("ready"!==this.state)return;this._lastPortalBasemapFetchController&&(this._lastPortalBasemapFetchController.abort(),this._lastPortalBasemapFetchController=null);const t=this.portal,s=new AbortController;this._lastPortalBasemapFetchController=s,this.notifyChange("state");try{const r=await t.fetchBasemaps(this._toQueryString(this.query),s);this._updateBasemaps(r)}catch(t){if(e(t))throw t;f.warn(new a("basemap-source:fetch-basemaps-error","Could not fetch basemaps from portal.",{error:t})),this._updateBasemaps()}this._lastPortalBasemapFetchController=null,this.notifyChange("state")}_toQueryString(t){return t&&"string"!=typeof t?Object.keys(t).map((s=>`${s}:${t[s]}`)).join(" AND "):t}_updateBasemaps(t=[]){let s=this.filterFunction?t.filter(this.filterFunction):t;s=this.updateBasemapsCallback?this.updateBasemapsCallback(s):s,this.basemaps.removeAll(),this.basemaps.addMany(s)}};t([r({readOnly:!0,type:d})],k.prototype,"basemaps",void 0),t([r()],k.prototype,"filterFunction",void 0),t([r({type:m})],k.prototype,"portal",void 0),t([r()],k.prototype,"query",void 0),t([r({dependsOn:["loadStatus"],readOnly:!0})],k.prototype,"state",null),t([r()],k.prototype,"updateBasemapsCallback",void 0),k=t([i(y)],k);var g=k;export default g;
