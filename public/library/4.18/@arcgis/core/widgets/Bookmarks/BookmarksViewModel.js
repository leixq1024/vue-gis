/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.18/esri/copyright.txt for details.
*/
import{_ as t}from"../../chunks/tslib.es6.js";import"../../chunks/ArrayPool.js";import"../../chunks/object.js";import"../../chunks/deprecate.js";import"../../core/lang.js";import"../../config.js";import{L as e}from"../../chunks/Logger.js";import"../../chunks/string.js";import"../../chunks/metadata.js";import{property as o}from"../../core/accessorSupport/decorators/property.js";import"../../core/Accessor.js";import"../../chunks/PropertyOrigin.js";import"../../core/scheduling.js";import{reject as r}from"../../core/promiseUtils.js";import"../../chunks/Message.js";import i from"../../core/Error.js";import"../../chunks/ensureType.js";import{subclass as s}from"../../core/accessorSupport/decorators/subclass.js";import{E as a}from"../../chunks/Evented.js";import n from"../../core/Collection.js";import"../../chunks/JSONSupport.js";import"../../core/urlUtils.js";import"../../core/accessorSupport/decorators/cast.js";import"../../chunks/jsonMap.js";import"../../chunks/reader.js";import"../../chunks/writer.js";import"../../chunks/resourceExtension.js";import"../../geometry/SpatialReference.js";import"../../geometry/Geometry.js";import"../../geometry/Point.js";import"../../chunks/Ellipsoid.js";import"../../geometry/support/webMercatorUtils.js";import"../../geometry/Extent.js";import"../../chunks/mathUtils2.js";import"../../chunks/vec3f64.js";import"../../chunks/common.js";import"../../chunks/vec3.js";import"../../chunks/mathUtils.js";import"../../Camera.js";import"../../chunks/zmUtils.js";import"../../geometry/Multipoint.js";import"../../geometry/Polygon.js";import"../../chunks/extentUtils.js";import"../../geometry/Polyline.js";import"../../chunks/typeUtils.js";import"../../geometry/support/jsonUtils.js";import"../../geometry.js";import"../../chunks/Identifiable.js";import c from"../../Viewpoint.js";import{T as p}from"../../chunks/Thumbnail2.js";import m from"../../webmap/Bookmark.js";import{G as u}from"../../chunks/GoTo.js";const l="esri.widgets.Bookmarks.BookmarksViewModel",k=e.getLogger(l),h=n.ofType(m),d={width:128,height:128,format:"png"},w={takeScreenshot:!0,captureViewpoint:!0,captureRotation:!0,captureScale:!0};let v=class extends(u(a.EventedAccessor)){constructor(t){super(t),this.activeBookmark=null}destroy(){this.view=null,this._set("activeBookmark",null)}set bookmarks(t){void 0!==t?this._override("bookmarks",t):this._clearOverride("bookmarks")}get bookmarks(){return this.get("view.map.bookmarks")||new h}set defaultCreateOptions(t){this._set("defaultCreateOptions",{...w,...t})}get defaultCreateOptions(){return w}set defaultEditOptions(t){this._set("defaultEditOptions",{...w,...t})}get defaultEditOptions(){return w}get state(){const t=this.get("view");return t&&!t.ready?"loading":"ready"}get view(){return this._get("view")}set view(t){t&&"2d"!==t.type&&k.error(new i("view:invalid-view","SceneView is not supported",{view:t})),this._set("view",t)}async createBookmark(t){const{view:e,defaultCreateOptions:o}=this;if(!e){const t=new i("create-bookmark:invalid-view","Cannot create a bookmark without a view.");return k.error(t),r(t)}const{takeScreenshot:s,screenshotSettings:a,captureExtent:n,captureViewpoint:c,captureRotation:p,captureScale:u}={...o,...t},l=s?await this._createThumbnail(a):void 0;return new m({...l&&{thumbnail:l},...(c||n)&&{viewpoint:this._createViewpoint({view:e,captureScale:u,captureRotation:p})}})}async editBookmark(t,e){const{view:o,defaultEditOptions:s}=this;if(!o){const t=new i("edit-bookmark:invalid-view","Cannot edit a bookmark without a view.");return k.error(t),r(t)}const{takeScreenshot:a,screenshotSettings:n,captureExtent:c,captureViewpoint:p,captureRotation:m,captureScale:u}={...s,...e},l=a?await this._createThumbnail(n):void 0;return l&&(t.thumbnail=l),(p||c)&&(t.viewpoint=this._createViewpoint({view:o,captureScale:u,captureRotation:m})),this.emit("bookmark-edit",{bookmark:t}),t}goTo(t){const{view:e}=this;if(!e){const t=new i("go-to:invalid-view","Cannot go to a bookmark without a view");return k.error(t),r(t)}const o=null==t?void 0:t.viewpoint;if(!o){const e=new i("go-to:invalid-bookmark","Cannot go to a bookmark that does not contain a 'viewpoint'.",{bookmark:t});return k.error(e),r(e)}this._set("activeBookmark",t);const s={target:o},a=this.callGoTo(s);return this.emit("select-bookmark",{bookmark:t}),this.emit("bookmark-select",{bookmark:t}),a.catch((()=>{})).then((()=>this._set("activeBookmark",null))),a}async _createThumbnail(t){const e=await this.view.takeScreenshot({...d,...t});return new p({url:e.dataUrl})}_createViewpoint({view:t,captureRotation:e,captureScale:o}){var r,i;const s=null==(r=t.viewpoint)?void 0:r.clone();return new c({targetGeometry:null==(i=t.extent)?void 0:i.clone(),rotation:e&&(null==s?void 0:s.rotation)||0,scale:o&&(null==s?void 0:s.scale)||0})}};t([o({readOnly:!0})],v.prototype,"activeBookmark",void 0),t([o({type:h,dependsOn:["view","view.map","view.map.bookmarks"]})],v.prototype,"bookmarks",null),t([o()],v.prototype,"defaultCreateOptions",null),t([o()],v.prototype,"defaultEditOptions",null),t([o({dependsOn:["view.ready"],readOnly:!0})],v.prototype,"state",null),t([o({value:null})],v.prototype,"view",null),v=t([s(l)],v);var j=v;export default j;
