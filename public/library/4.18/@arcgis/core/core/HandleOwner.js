/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.18/esri/copyright.txt for details.
*/
import{_ as e}from"../chunks/tslib.es6.js";import"../chunks/ArrayPool.js";import"../chunks/object.js";import"../chunks/deprecate.js";import"./lang.js";import"../config.js";import"../chunks/Logger.js";import"../chunks/string.js";import"../chunks/metadata.js";import{property as s,v as t}from"./accessorSupport/decorators/property.js";import n,{w as r}from"./Accessor.js";import"../chunks/PropertyOrigin.js";import{schedule as d}from"./scheduling.js";import"./promiseUtils.js";import"../chunks/Message.js";import"./Error.js";import"../chunks/ensureType.js";import{subclass as i}from"./accessorSupport/decorators/subclass.js";import"../chunks/Evented.js";import"./Collection.js";import a from"./Handles.js";import{init as o,on as h}from"./watchUtils.js";let l=class extends n{constructor(){super(...arguments),this.updating=!1,this.handleId=0,this.handles=new a,this.scheduleHandleId=0,this.pendingPromises=new Set}destroy(){this.removeAll(),this.handles.destroy()}add(e,s,t,n=0){const r=0!=(1&n),d=++this.handleId;r||this.installSyncUpdatingWatch(e,s,d);const i=0!=(2&n)?o(e,s,t,r):e.watch(s,t,r);return this.handles.add(i,d),{remove:()=>{this.handles.remove(d)}}}addOnCollectionPropertyChange(e,s,t,n=0){const r=0!=(2&n),d=++this.handleId;return this.handles.add([h(e,s,"after-changes",this.createSyncUpdatingCallback()),h(e,s,"change",t,r?e=>{t({added:e.items,removed:[],moved:[],target:e})}:void 0)],d),{remove:()=>{this.handles.remove(d)}}}addOnCollectionChange(e,s,t=0){const n=0!=(2&t),r=++this.handleId;return this.handles.add([e.on("after-changes",this.createSyncUpdatingCallback()),e.on("change",s)],r),n&&s({added:e.items,removed:[],moved:[],target:e}),{remove:()=>{this.handles.remove(r)}}}addPromise(e){if(!e)return e;const s=++this.handleId;this.handles.add({remove:()=>{this.pendingPromises.delete(e)&&(0!==this.pendingPromises.size||this.handles.has(c)||this._set("updating",!1))}},s),this.pendingPromises.add(e),this._set("updating",!0);const t=()=>this.handles.remove(s);return e.then(t,t),e}removeAll(){this.pendingPromises.clear(),this.handles.removeAll(),this._set("updating",!1)}installSyncUpdatingWatch(e,s,n){const d=this.createSyncUpdatingCallback(),i=r((()=>t(e,s)),d);return this.handles.add(i,n),i}createSyncUpdatingCallback(){return()=>{this.handles.remove(c),++this.scheduleHandleId;const e=this.scheduleHandleId;this._get("updating")||this._set("updating",!0),this.handles.add(d((()=>{e===this.scheduleHandleId&&(this._set("updating",this.pendingPromises.size>0),this.handles.remove(c))})),c)}}};e([s({readOnly:!0})],l.prototype,"updating",void 0),l=e([i("esri.views.support.WatchUpdatingTracking")],l);const c=-42,p=t=>{let n=class extends t{destroy(){this.destroyed||(this.handles.destroy(),this.updatingHandles.destroy())}get handles(){return this._get("handles")||new a}get updatingHandles(){return this._get("updatingHandles")||new l}};return e([s({readOnly:!0})],n.prototype,"handles",null),e([s({readOnly:!0})],n.prototype,"updatingHandles",null),n=e([i("esri.core.HandleOwner")],n),n};let m=class extends(p(n)){};m=e([i("esri.core.HandleOwner")],m);export{m as HandleOwner,p as HandleOwnerMixin,l as W};
