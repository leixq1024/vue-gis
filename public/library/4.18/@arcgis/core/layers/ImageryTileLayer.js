/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.18/esri/copyright.txt for details.
*/
import{_ as e}from"../chunks/tslib.es6.js";import"../chunks/ArrayPool.js";import"../chunks/object.js";import"../chunks/deprecate.js";import"../core/lang.js";import"../config.js";import{i as t,u as s}from"../chunks/Logger.js";import"../chunks/string.js";import"../chunks/metadata.js";import{property as r}from"../core/accessorSupport/decorators/property.js";import"../core/Accessor.js";import"../chunks/PropertyOrigin.js";import"../core/scheduling.js";import{all as i,resolve as o,eachAlways as a,createAbortError as n}from"../core/promiseUtils.js";import"../chunks/Message.js";import l from"../core/Error.js";import"../chunks/compilerUtils.js";import{I as p}from"../chunks/ensureType.js";import{subclass as u}from"../core/accessorSupport/decorators/subclass.js";import"../chunks/Evented.js";import"../core/Collection.js";import"../chunks/collectionUtils.js";import{a as m}from"../chunks/JSONSupport.js";import"../chunks/Promise.js";import"../chunks/Loadable.js";import"../chunks/asyncUtils.js";import{urlToObject as c}from"../core/urlUtils.js";import"../core/accessorSupport/decorators/aliasOf.js";import"../core/accessorSupport/decorators/cast.js";import{s as h}from"../chunks/jsonMap.js";import{e as f}from"../chunks/enumeration.js";import{r as d}from"../chunks/reader.js";import"../chunks/writer.js";import"../chunks/resourceExtension.js";import"../chunks/persistableUrlUtils.js";import y from"../geometry/SpatialReference.js";import"../chunks/locale.js";import"../chunks/number.js";import"../intl.js";import"../kernel.js";import"../request.js";import"../chunks/assets.js";import"../geometry/Geometry.js";import g from"../geometry/Point.js";import"../chunks/Ellipsoid.js";import"../geometry/support/webMercatorUtils.js";import x from"../geometry/Extent.js";import"../portal/PortalQueryParams.js";import"../portal/PortalQueryResult.js";import"../portal/PortalFolder.js";import"../portal/PortalGroup.js";import"../portal/PortalUser.js";import"../portal/Portal.js";import"../portal/PortalItemResource.js";import"../portal/PortalRating.js";import"../portal/PortalItem.js";import"../chunks/mathUtils2.js";import"../chunks/vec3f64.js";import"../chunks/common.js";import"../chunks/vec3.js";import"../chunks/colorUtils.js";import"../Color.js";import"../chunks/zmUtils.js";import"../geometry/Multipoint.js";import"../geometry/Polygon.js";import"../chunks/extentUtils.js";import"../geometry/Polyline.js";import"../chunks/typeUtils.js";import"../geometry/support/jsonUtils.js";import"../geometry.js";import"./support/CodedValueDomain.js";import"./support/Domain.js";import"./support/InheritedDomain.js";import"./support/RangeDomain.js";import"../chunks/domains.js";import"../chunks/arcadeOnDemand.js";import"./support/fieldUtils.js";import"../popup/content/Content.js";import"../popup/content/AttachmentsContent.js";import"../popup/content/CustomContent.js";import"../chunks/date.js";import"../popup/support/FieldInfoFormat.js";import"../popup/FieldInfo.js";import"../popup/content/FieldsContent.js";import"../chunks/MediaInfo.js";import"../popup/content/support/ChartMediaInfoValueSeries.js";import"../popup/content/support/ChartMediaInfoValue.js";import"../chunks/chartMediaInfoUtils.js";import"../popup/content/BarChartMediaInfo.js";import"../popup/content/ColumnChartMediaInfo.js";import"../popup/content/support/ImageMediaInfoValue.js";import"../popup/content/ImageMediaInfo.js";import"../popup/content/LineChartMediaInfo.js";import"../popup/content/PieChartMediaInfo.js";import"../popup/content/MediaContent.js";import"../popup/content/TextContent.js";import"../popup/content.js";import"../popup/ExpressionInfo.js";import"../popup/LayerOptions.js";import"../popup/support/RelatedRecordsInfoFieldOrder.js";import"../popup/RelatedRecordsInfo.js";import"../chunks/Identifiable.js";import"../support/actions/ActionBase.js";import"../support/actions/ActionButton.js";import"../support/actions/ActionToggle.js";import j from"../PopupTemplate.js";import"../symbols/Symbol.js";import"../symbols/CIMSymbol.js";import"../symbols/Symbol3DLayer.js";import"../chunks/screenUtils.js";import"../chunks/opacityUtils.js";import"../chunks/materialUtils.js";import"../symbols/edges/Edges3D.js";import"../symbols/edges/SketchEdges3D.js";import"../symbols/edges/SolidEdges3D.js";import"../chunks/utils.js";import"../chunks/Symbol3DMaterial.js";import"../symbols/ExtrudeSymbol3DLayer.js";import"../symbols/LineSymbol.js";import"../symbols/LineSymbolMarker.js";import"../symbols/SimpleLineSymbol.js";import"../symbols/FillSymbol.js";import"../symbols/patterns/StylePattern3D.js";import"../symbols/FillSymbol3DLayer.js";import"../chunks/colors.js";import"../chunks/Symbol3DOutline.js";import"../symbols/Font.js";import"../symbols/IconSymbol3DLayer.js";import"../symbols/LineSymbol3DLayer.js";import"../symbols/ObjectSymbol3DLayer.js";import"../symbols/PathSymbol3DLayer.js";import"../symbols/TextSymbol3DLayer.js";import"../symbols/WaterSymbol3DLayer.js";import"../symbols/Symbol3D.js";import"../chunks/Thumbnail.js";import"../symbols/callouts/Callout3D.js";import"../symbols/callouts/LineCallout3D.js";import"../chunks/Symbol3DVerticalOffset.js";import"../symbols/LabelSymbol3D.js";import"../symbols/LineSymbol3D.js";import"../symbols/MarkerSymbol.js";import"../symbols/MeshSymbol3D.js";import"../chunks/urlUtils.js";import"../symbols/PictureFillSymbol.js";import"../symbols/PictureMarkerSymbol.js";import"../symbols/PointSymbol3D.js";import"../symbols/PolygonSymbol3D.js";import"../symbols/SimpleFillSymbol.js";import"../symbols/SimpleMarkerSymbol.js";import"../symbols/TextSymbol.js";import"../symbols/WebStyleSymbol.js";import"../symbols/support/jsonUtils.js";import"../chunks/uid.js";import"../Graphic.js";import"../core/Handles.js";import I from"./Layer.js";import"../chunks/LegendOptions.js";import"../renderers/support/AuthoringInfo.js";import"../renderers/support/AuthoringInfoVisualVariable.js";import"../tasks/support/ColorRamp.js";import"../tasks/support/AlgorithmicColorRamp.js";import"../tasks/support/MultipartColorRamp.js";import"../chunks/colorRamps.js";import"../renderers/Renderer.js";import"../renderers/visualVariables/VisualVariable.js";import"../renderers/visualVariables/support/ColorStop.js";import"../renderers/visualVariables/ColorVariable.js";import"../renderers/visualVariables/support/OpacityStop.js";import"../renderers/visualVariables/OpacityVariable.js";import"../renderers/visualVariables/RotationVariable.js";import"../renderers/visualVariables/support/SizeStop.js";import"../renderers/visualVariables/SizeVariable.js";import"../chunks/sizeVariableUtils.js";import"../chunks/unitUtils.js";import"../chunks/lengthUtils.js";import"../chunks/visualVariableUtils.js";import"../chunks/VisualVariablesMixin.js";import"../renderers/support/ClassBreakInfo.js";import"../chunks/commonProperties.js";import"../renderers/ClassBreaksRenderer.js";import"../renderers/support/ColormapInfo.js";import"../chunks/colorUtils2.js";import"../chunks/colorRampUtils.js";import"../renderers/RasterColormapRenderer.js";import"../renderers/RasterShadedReliefRenderer.js";import"../renderers/RasterStretchRenderer.js";import"../chunks/diffUtils.js";import"../renderers/support/UniqueValueInfo.js";import"../chunks/devEnvironmentUtils.js";import"../chunks/styleUtils.js";import"../renderers/UniqueValueRenderer.js";import"../geometry/support/normalizeUtils.js";import b from"./support/PixelBlock.js";import"../renderers/VectorFieldRenderer.js";import"../chunks/MemCache.js";import"../chunks/ItemCache.js";import"../chunks/utils3.js";import"../symbols/support/cimSymbolUtils.js";import"../chunks/utils2.js";import{read as w,rasterRendererTypes as v,websceneRasterRendererTypes as S}from"../rasterRenderers.js";import"../chunks/LRUCache.js";import"../chunks/timeUtils.js";import"../TimeExtent.js";import"../chunks/ReadOnlyMultiOriginJSONSupport.js";import{M as k}from"../chunks/MultiOriginJSONSupport.js";import"../core/watchUtils.js";import"../chunks/arcgisLayerUrl.js";import"../chunks/fieldType.js";import"../chunks/mat4.js";import"../chunks/pe.js";import"../chunks/aaBoundingRect.js";import"../chunks/geodesicConstants.js";import"../geometry/support/GeographicTransformationStep.js";import"../geometry/support/GeographicTransformation.js";import"../geometry/projection.js";import{O as T}from"../chunks/OperationalLayer.js";import"../chunks/ElevationInfo.js";import"../chunks/unitConversionUtils.js";import{b as R}from"../chunks/commonProperties2.js";import"../chunks/_commonjsHelpers.js";import"../core/workers/Connection.js";import"../chunks/Scheduler.js";import"../core/workers/workers.js";import"./support/LOD.js";import C from"./support/TileInfo.js";import M from"./support/Field.js";import _ from"../tasks/support/FeatureSet.js";import{B as P}from"../chunks/BlendLayer.js";import{P as F}from"../chunks/PortalLayer.js";import{R as O}from"../chunks/RefreshableLayer.js";import{S as D}from"../chunks/ScaleRangeLayer.js";import{createPopupTemplate as L}from"../support/popupUtils.js";import{r as B}from"../chunks/serviceTileInfoProperty.js";import{T as A}from"../chunks/TilemapCache.js";import"./support/DimensionalDefinition.js";import U from"./support/RasterInfo.js";import"../chunks/rasterRendererHelper.js";import{b as E,g as z,i as N,p as H,a as V,T as q,c as J,e as G}from"../chunks/RasterSymbolizer.js";import"../chunks/LercCodec.js";import"../chunks/ClassBreaksDefinition.js";import{f as W,d as $,g as Y,h as X}from"../chunks/pixelUtils.js";import{B as K,R as Q,i as Z,g as ee,a as te,b as se,c as re,d as ie,I as oe}from"../chunks/xmlUtilities.js";import"../chunks/RawBlockCache.js";import"../chunks/rasterProjectionHelper.js";const ae=new Map;ae.set("int16","esriFieldTypeSmallInteger"),ae.set("int32","esriFieldTypeInteger"),ae.set("int64","esriFieldTypeInteger"),ae.set("float32","esriFieldTypeSingle"),ae.set("float64","esriFieldTypeDouble"),ae.set("text","esriFieldTypeString");let ne=class extends K{constructor(){super(...arguments),this.storageInfo=null,this.datasetFormat="CRF"}async open(e){await this.init();const{data:t}=await this.request(this.url+"/conf.json",{signal:null==e?void 0:e.signal});if(!this._validateHeader(t))throw new l("cloudraster:open","Invalid or unsupported conf.json.");this.datasetName=this.url.slice(this.url.lastIndexOf("/")+1);const{storageInfo:s,rasterInfo:r}=this._parseHeader(t);if("thematic"===r.dataType){const e=await this._fetchAuxiliaryInformation();r.attributeTable=e}this._set("storageInfo",s),this._set("rasterInfo",r),this.ioConfig.retryCount=this.ioConfig.retryCount||0}async fetchRawTile(e,t,s,r={}){const i=this.rasterInfo.storageInfo.maximumPyramidLevel-e;if(i<0)return null;const o=this._buildCacheFilePath(i,t,s,r.multidimensionalDefinition),a=this._getIndexRecordFromBundle(t,s),n=await this.request(o,{range:{from:0,to:this.storageInfo.headerSize-1},responseType:"array-buffer",signal:r.signal});if(!n)return null;const l=new Uint8Array(n.data),p=this._getTileEndAndContentType(l,a);if(0===p.recordSize)return null;const u=await this.request(o,{range:{from:p.position,to:p.position+p.recordSize},responseType:"array-buffer",signal:r.signal});return u?this.decodePixelBlock(u.data,{width:this.rasterInfo.storageInfo.tileInfo.size[0],height:this.rasterInfo.storageInfo.tileInfo.size[1],planes:null,pixelType:null}):null}_validateHeader(e){return e&&"RasterInfo"===e.type&&!["origin","extent","geodataXform","LODInfos","blockWidth","blockHeight","bandCount","pixelType","pixelSizeX","pixelSizeY","format","packetSize"].some((t=>!e[t]))}_parseHeader(e){var t;const s=["u1","u2","u4","u8","s8","u16","s16","u32","s32","f32","f64"][e.pixelType],{bandCount:r,histograms:i,colormap:o,blockWidth:a,blockHeight:n,firstPyramidLevel:l,maximumPyramidLevel:p}=e,u=e.statistics&&e.statistics.map((e=>({min:e.min,max:e.max,avg:e.mean,stddev:e.standardDeviation,median:e.median,mode:e.mode}))),m=new y(e.extent.spatialReference||e.geodataXform.spatialReference),c=new x({xmin:e.extent.xmin,ymin:e.extent.ymin,xmax:e.extent.xmax,ymax:e.extent.ymax,spatialReference:m}),h=new g({x:e.pixelSizeX,y:e.pixelSizeY,spatialReference:m}),f=null!=(t=e.properties)?t:{},d=e.format.toLowerCase().replace("cache/",""),j=new g(e.origin.x,e.origin.y,m);let I,b,w,v;if(o&&o.colors)for(I=[],b=0;b<o.colors.length;b++)w=o.colors[b],v=o.values?o.values[b]:b,I.push([v,255&w,w<<16>>>24,w<<8>>>24,w>>>24]);const S=e.LODInfos,k=[];for(b=0;b<S.levels.length;b++)k.push({level:S.levels[b],resolution:S.resolutions[b],scale:96/.0254*S.resolutions[b]});const T=new C({dpi:96,lods:k,format:d,origin:j,size:[a,n],spatialReference:m}),R={recordSize:8,packetSize:e.packetSize,headerSize:e.packetSize*e.packetSize*8+64},M=Math.round((c.xmax-c.xmin)/h.x),_=Math.round((c.ymax-c.ymin)/h.y),P=[{maxCol:Math.ceil(M/a)-1,maxRow:Math.ceil(_/n)-1,minCol:0,minRow:0}];let F=2;if(p>0)for(b=0;b<p;b++)P.push({maxCol:Math.ceil(M/F/a)-1,maxRow:Math.ceil(_/F/n)-1,minCol:0,minRow:0}),F*=2;const O=e.mdInfo;return{storageInfo:R,rasterInfo:new U({width:M,height:_,pixelType:s,bandCount:r,extent:c,spatialReference:m,pixelSize:h,keyProperties:f,statistics:u,histograms:i,multidimensionalInfo:O,colormap:I,storageInfo:new Q({blockWidth:a,blockHeight:n,pyramidBlockWidth:a,pyramidBlockHeight:n,origin:j,tileInfo:T,firstPyramidLevel:l,maximumPyramidLevel:p,blockBoundary:P})})}}async _fetchAuxiliaryInformation(e){const t=this.request(this.url+"/conf.vat.json",{signal:e}).then((e=>e.data)).catch((()=>null)),s=this.request(this.url+"/conf.vat.dbf",{responseType:"array-buffer",signal:e}).then((e=>e.data)).catch((()=>null)),r=await i([t,s]);let o;if(r[0]){let e=r[0].fields;const t=r[0].values;if(e&&t){e=e.map((e=>({type:"OID"===e.name?"esriFieldTypeOID":ae.get(e.type),name:e.name,alias:e.alias||e.name})));const s=t.map((e=>({attributes:e})));e&&t&&(o={fields:e,features:s})}}if(!o&&r[1]){o=class{static get supportedVersions(){return[5]}static parse(e){const t=new DataView(e),s=3&t.getUint8(0);if(3!==s)return{header:{version:s},recordSet:null};const r=t.getUint32(4,!0),i=t.getUint16(8,!0),o=t.getUint16(10,!0),a={version:s,recordCount:r,headerByteCount:i,recordByteCount:o};let n=32;const l=[],p=[];let u;if(3===s){for(;13!==t.getUint8(n);)u=String.fromCharCode(t.getUint8(n+11)).trim(),l.push({name:E(new Uint8Array(e,n,11)),type:u,typeName:["String","Date","Double","Boolean","String","Integer"][["C","D","F","L","M","N"].indexOf(u)],length:t.getUint8(n+16)}),n+=32;if(n+=1,l.length>0)for(;p.length<r&&e.byteLength-n>o;){const s=[];32===t.getUint8(n)?(n+=1,l.forEach((t=>{if("C"===t.type)s.push(E(new Uint8Array(e,n,t.length)).trim());else if("N"===t.type)s.push(parseInt(String.fromCharCode.apply(null,new Uint8Array(e,n,t.length)).trim(),10));else if("F"===t.type)s.push(parseFloat(String.fromCharCode.apply(null,new Uint8Array(e,n,t.length)).trim()));else if("D"===t.type){const r=String.fromCharCode.apply(null,new Uint8Array(e,n,t.length)).trim();s.push(new Date(parseInt(r.substring(0,4),10),parseInt(r.substring(4,6),10)-1,parseInt(r.substring(6,8),10)))}n+=t.length})),p.push(s)):n+=o}}const m=function(e){const t=e.fields,s=e.records,r=t.some((e=>"oid"===e.name.toLowerCase()))?"OBJECTID":"OID",i=[{name:r,type:"esriFieldTypeOID",alias:"OID"}].concat(t.map((e=>({name:e.name,type:"esriFieldType"+e.typeName,alias:e.name})))),o=i.map((e=>e.name)),a=[];let n=0,l=0;return s.forEach((e=>{const t={};for(t[r]=n++,l=1;l<o.length;l++)t[o[l]]=e[l-1];a.push({attributes:t})})),{displayFieldName:"",fields:i,features:a}}({fields:l,records:p});return{header:a,fields:l,records:p,recordSet:m}}}.parse(r[1]).recordSet}return _.fromJSON(o)}_buildCacheFilePath(e,s,r,i){const o=this.storageInfo.packetSize,a=Math.floor(s/o)*o,n=Math.floor(r/o)*o,l="R"+this._toHexString4(a)+"C"+this._toHexString4(n);let p="L";p+=e>=10?e.toString():"0"+e.toString();const{multidimensionalInfo:u}=this.rasterInfo,m=null==i?void 0:i[0];if(!t(u)||!m)return`${this.url}/_alllayers/${p}/${l}.bundle`;let c=u.variables.filter((e=>e.name===m.variableName))[0].dimensions[0].values.indexOf(m.values[0]).toString(16);const h=4-c.length;for(let e=0;e<h;e++)c="0"+c;return c="S"+c,`${this.url}/_alllayers/${m.variableName}/${c}/${p}/${l}.bundle`}_getIndexRecordFromBundle(e,t){const s=this.storageInfo.packetSize,r=s*(e%s)+t%s;if(r<0)throw"Invalid level / row / col";return 20+r*this.storageInfo.recordSize+44}_getTileEndAndContentType(e,t){const s=e.subarray(t,t+8);let r,i=0;for(r=0;r<5;r++)i|=(255&s[r])<<8*r;const o=0xffffffffff&i;for(i=0,r=5;r<8;r++)i|=(255&s[r])<<8*(r-5);return{position:o,recordSize:0xffffffffff&i}}_toHexString4(e){let t=e.toString(16);if(4!==t.length){let e=4-t.length;for(;e-- >0;)t="0"+t}return t}};e([r({readOnly:!0})],ne.prototype,"storageInfo",void 0),e([r({type:String,json:{write:!0}})],ne.prototype,"datasetFormat",void 0),ne=e([u("esri.layers.support.rasterDatasets.CloudRaster")],ne);var le=ne;let pe=class extends K{constructor(){super(...arguments),this.datasetFormat="MEMORY"}async open(e){var t;await this.init();const{pixelBlock:s,statistics:r,histograms:i,name:o,keyProperties:a,nativeExtent:n,transform:l}=this.data,{width:p,height:u,pixelType:m}=s,c=this.data.extent||new x({xmin:-.5,ymin:.5,xmax:p-.5,ymax:u-.5,spatialReference:new y({wkid:3857})}),h=null!=(t=this.data.isPseudoSpatialReference)?t:!this.data.extent,f={x:c.width/p,y:c.height/u},d=new U({width:p,height:u,pixelType:m,extent:c,nativeExtent:n,transform:l,pixelSize:f,spatialReference:c.spatialReference,bandCount:3,keyProperties:a||{},statistics:r,isPseudoSpatialReference:h,histograms:i});this.createRemoteDatasetStorageInfo(d,512,512),this._set("rasterInfo",d),this.updateTileInfo(),await this._buildInMemoryRaster(s,{width:512,height:512},e),this.datasetName=o,this.url="/InMemory/"+o}fetchRawTile(e,t,s,r={}){const i=this._pixelBlockTiles.get(`${e}/${t}/${s}`);return o(i)}async _buildInMemoryRaster(e,s,r){const i=this.rasterInfo.storageInfo.maximumPyramidLevel,n=this.rasterJobHandler?this.rasterJobHandler.split({pixelBlock:e,tileSize:s,maximumPyramidLevel:i},r):o(W(e,s,i)),p=t(this.rasterInfo.statistics),u=t(this.rasterInfo.histograms),m=p&&u?o({statistics:null,histograms:null}):this.rasterJobHandler?this.rasterJobHandler.estimateStatisticsHistograms({pixelBlock:e},r):o($(e)),c=await a([n,m]);if(!c[0].value&&c[1].value)throw new l("inmemory-raster:open","failed to build in memory raster");var h,f;(this._pixelBlockTiles=c[0].value,p)||(this.rasterInfo.statistics=null==(h=c[1].value)?void 0:h.statistics);u&&(this.rasterInfo.histograms=null==(f=c[1].value)?void 0:f.histograms)}};e([r({type:String,json:{write:!0}})],pe.prototype,"datasetFormat",void 0),e([r()],pe.prototype,"data",void 0),pe=e([u("esri.layers.support.rasterDatasets.InMemoryRaster")],pe);var ue=pe;function me(e,t,s){const{x:r,y:i}=t;if(s<2){return{x:e[0]+r*e[2]+i*e[4],y:e[1]+r*e[3]+i*e[5]}}if(2===s){const t=r*r,s=i*i,o=r*i;return{x:e[0]+r*e[2]+i*e[4]+t*e[6]+o*e[8]+s*e[10],y:e[1]+r*e[3]+i*e[5]+t*e[7]+o*e[9]+s*e[11]}}const o=r*r,a=i*i,n=r*i,l=o*r,p=o*i,u=r*a,m=i*a;return{x:e[0]+r*e[2]+i*e[4]+o*e[6]+n*e[8]+a*e[10]+l*e[12]+p*e[14]+u*e[16]+m*e[18],y:e[1]+r*e[3]+i*e[5]+o*e[7]+n*e[9]+a*e[11]+l*e[13]+p*e[15]+u*e[17]+m*e[19]}}function ce(e,t,s){const{xmin:r,ymin:i,xmax:o,ymax:a,spatialReference:n}=t;let l=[];if(s<2)l.push({x:r,y:a}),l.push({x:o,y:a}),l.push({x:r,y:i}),l.push({x:o,y:i});else{let e=10;for(let t=0;t<e;t++)l.push({x:r,y:i+(a-i)*t/(e-1)}),l.push({x:o,y:i+(a-i)*t/(e-1)});e=8;for(let t=1;t<=e;t++)l.push({x:r+(o-r)*t/e,y:i}),l.push({x:r+(o-r)*t/e,y:a})}l=l.map((t=>me(e,t,s)));const p=l.map((e=>e.x)),u=l.map((e=>e.y));return new x({xmin:Math.min.apply(null,p),xmax:Math.max.apply(null,p),ymin:Math.min.apply(null,u),ymax:Math.max.apply(null,u),spatialReference:n})}let he=class extends m{constructor(){super(...arguments),this.polynomialOrder=1}get inverseCoefficients(){let e=this._get("inverseCoefficients");const t=this._get("forwardCoefficients");return!e&&t&&this.polynomialOrder<2&&(e=function(e){const[t,s,r,i,o,a]=e,n=r*a-o*i,l=o*i-r*a;return[(o*s-t*a)/n,(r*s-t*i)/l,a/n,i/l,-o/n,-r/l]}(t)),e}set inverseCoefficients(e){this._set("inverseCoefficients",e)}forwardTransform(e){if("point"===e.type){const t=me(this.forwardCoefficients,e,this.polynomialOrder);return new g({x:t.x,y:t.y,spatialReference:e.spatialReference})}return ce(this.forwardCoefficients,e,this.polynomialOrder)}inverseTransform(e){if("point"===e.type){const t=me(this.inverseCoefficients,e,this.polynomialOrder);return new g({x:t.x,y:t.y,spatialReference:e.spatialReference})}return ce(this.inverseCoefficients,e,this.polynomialOrder)}};e([r({json:{write:!0}})],he.prototype,"polynomialOrder",void 0),e([r({json:{write:!0}})],he.prototype,"forwardCoefficients",void 0),e([r({dependsOn:["forwardCoefficients"],json:{write:!0}})],he.prototype,"inverseCoefficients",null),he=e([u("esri.layers.support.rasterTransforms.PolynomialTransform")],he);var fe=he;function de(e,t){if(!e||!t)return null;const s=[];for(let r=0;r<e.length;r++)s.push(e[r]),s.push(t[r]);return s}function ye(e){if(!e)return null;let t=Number(e);if(!isNaN(t)&&0!==t)return new y({wkid:t});const s=e.replace(/\]/g,"[").replace(/\"/g,"").split("[").map((e=>e.trim())).filter((e=>""!==e)),r=s[s.length-1].split(",");return"EPSG"!==r[0]||(t=Number(r[1]),isNaN(t)||0===t)?new y({wkt:e}):new y({wkid:t})}function ge(e){var t;if("pamdataset"!==(null==e||null==(t=e.documentElement.tagName)?void 0:t.toLowerCase()))return{};const s={spatialReference:null,transform:null,metadata:{},rasterBands:[],statistics:null,histograms:null};e.documentElement.childNodes.forEach((e=>{if(1===e.nodeType)if(Z(e,"SRS")){if(!s.spatialReference){const t=ee(e);s.spatialReference=ye(t)}}else if(Z(e,"Metadata"))if("xml:ESRI"===e.getAttribute("domain")){const{spatialReference:t,transform:r}=function(e){var t;const s=se(e,"GeodataXform"),r=ye(re(s,"SpatialReference/WKID")||ee(s,"SpatialReference/WKT"));if("typens:PolynomialXform"!==s.getAttribute("xsi:type"))return{spatialReference:r,transform:null};const i=null!=(t=re(s,"PolynomialOrder"))?t:1,o=ie(s,"CoeffX/Double"),a=ie(s,"CoeffY/Double"),n=ie(s,"InverseCoeffX/Double"),l=ie(s,"InverseCoeffY/Double"),p=de(o,a),u=de(n,l);return{spatialReference:r,transform:new fe({polynomialOrder:i,forwardCoefficients:p,inverseCoefficients:u})}}(e);s.transform=r,s.spatialReference||(s.spatialReference=t)}else{te(e,"MDI").forEach((e=>s.metadata[e.getAttribute("key")]=ee(e)))}else if(Z(e,"PAMRasterBand")){const t=function(e){var t;const s=re(e,"NoDataValue"),r=se(e,"Histograms/HistItem"),i=re(r,"HistMin"),o=re(r,"HistMax"),a=re(r,"BucketCount"),n=null==(t=ee(r,"HistCounts"))?void 0:t.split("|").map((e=>Number(e)));let l,p,u,m;te(e,"Metadata/MDI").forEach((e=>{var t;const s=Number(null!=(t=e.textContent)?t:e.nodeValue);switch(e.getAttribute("key").toUpperCase()){case"STATISTICS_MINIMUM":l=s;break;case"STATISTICS_MAXIMUM":p=s;break;case"STATISTICS_MEAN":u=s;break;case"STATISTICS_STDDEV":m=s}}));const c=re(e,"Metadata/SourceBandIndex");return{noDataValue:s,histogram:null!=n&&n.length&&null!=l&&null!=p?{min:i,max:o,size:a||n.length,counts:n}:null,sourceBandIndex:c,statistics:null!=l&&null!=p?{min:l,max:p,avg:u,stddev:m}:null}}(e);null!=t.sourceBandIndex&&null==s.rasterBands[t.sourceBandIndex]?s.rasterBands[t.sourceBandIndex]=t:s.rasterBands.push(t)}}));const r=s.rasterBands;if(r){const e=!!r[0].statistics;s.statistics=e?r.map((e=>e.statistics)):null;const t=!!r[0].histogram;s.histograms=t?r.map((e=>e.histogram)):null}return s}let xe=class extends K{async open(e){await this.init();const t=await this._fetchData(e);let{spatialReference:s,statistics:r,histograms:i,transform:o}=await this._fetchAuxiliaryData(e);const a=!s;a&&(s=new y({wkid:3857})),null!=i&&i.length&&null==r&&(r=Y(i));const{width:n,height:l}=t;let p=new x({xmin:-.5,ymin:.5-l,xmax:n-.5,ymax:.5,spatialReference:s});const u=o?o.forwardTransform(p):p;let m=!0;if(o){const e=o.forwardCoefficients;m=e&&0===e[1]&&0===e[2],m&&(o=null,p=u)}const c=new ue({data:{extent:u,nativeExtent:p,transform:o,pixelBlock:t,statistics:r,histograms:i,keyProperties:{DateType:"Processed"},isPseudoSpatialReference:a}});await c.open(),this._set("rasterInfo",c.rasterInfo),this._inMemoryRaster=c}fetchRawTile(e,t,s,r={}){return this._inMemoryRaster.fetchRawTile(e,t,s,r)}async _fetchData(e){const{data:t}=await this.request(this.url,{responseType:"array-buffer",signal:null==e?void 0:e.signal}),s=z(t).toUpperCase();if("JPG"!==s&&"PNG"!==s&&"GIF"!==s&&"BMP"!==s)throw new l("image-aux-raster:open","the data is not a supported format");this._set("datasetFormat",s);return await this.decodePixelBlock(t,{format:"jpg",width:1,height:1,useCanvas:!0})}async _fetchAuxiliaryData(e){var t,r;const i=s(null==e?void 0:e.signal),o=null!=(t=this.ioConfig.skipExtensions)?t:[],l=o.indexOf("aux.xml")>-1?null:this.request(this.url+".aux.xml",{responseType:"xml",signal:i}),p=this.datasetFormat,u="JPG"===p?"jgw":"PNG"===p?"pgw":"BMP"===p?"bpw":null,m=o.indexOf(u)>-1?null:this.request(this.url.slice(0,this.url.lastIndexOf("."))+"."+u,{responseType:"text",signal:i}),c=await a([l,m]);if(null!=i&&i.aborted)throw n();const h=ge(null==(r=c[0].value)?void 0:r.data);if(!h.transform){const e=c[1].value?c[1].value.data.split("\n").slice(0,6).map((e=>Number(e))):null;h.transform=6===(null==e?void 0:e.length)?new fe({forwardCoefficients:[e[4],e[5],e[0],-e[1],e[2],-e[3]]}):null}return h}};e([r({type:String,json:{write:!0}})],xe.prototype,"datasetFormat",void 0),xe=e([u("esri.layers.support.rasterDatasets.ImageAuxRaster")],xe);var je=xe;let Ie=class extends K{constructor(){super(...arguments),this._levelOffset=0,this._slices=null,this._tilemapCache=null,this.datasetFormat="RasterTileServer"}async open(e){await this.init();const s=e&&e.signal,r=this.sourceJSON?{data:this.sourceJSON}:await this.request(this.url,{query:{f:"json"},signal:s});r.ssl&&(this.url=this.url.replace(/^http:/i,"https:"));const i=r.data;this.sourceJSON=i;const o=["jpg","jpeg","png","png8","png24","png32","mixed"];if(this.tileType=i.cacheType,null==this.tileType&&(o.indexOf(i.tileInfo.format.toLowerCase())>-1?this.tileType="Map":"lerc"===i.tileInfo.format.toLowerCase()?this.tileType="Elevation":this.tileType="Raster"),!i)throw new l("imageserverraster:open","cannot initialize tiled image service, missing service info");if(!i.tileInfo)throw new l("imageserverraster:open","use ImageryLayer to open non-tiled image services");this.datasetName=i.name.slice(i.name.indexOf("/")+1);const a=await this._fetchRasterInfo({signal:s});if(!t(a))throw new l("image-server-raster:open","cannot initialize image service");{const e="Map"===this.tileType?B(i.tileInfo,i):C.fromJSON(i.tileInfo),{extent:t,pixelSize:s}=a,r=.5/a.width*s.x;let o,n;const l=e.lodAt(Math.max.apply(null,e.lods.map((e=>e.level))));"Map"!==this.tileType&&0!==i.maxScale&&("Raster"===this.tileType?(o=e.lods.filter((e=>e.resolution===s.x))[0],o||(o=e.lods[e.lods.length-1])):(o=e.lods.filter((e=>Math.abs(e.scale-i.maxScale)<r))[0],o||(o=e.lods.filter((e=>e.scale>i.maxScale)).sort(((e,t)=>e.scale>t.scale?1:-1))[0])),s.x=s.y=o.resolution,a.width=Math.ceil((t.xmax-t.xmin)/s.x-.1),a.height=Math.ceil((t.ymax-t.ymin)/s.y-.1)),o||(o=l);const p=e.lodAt(Math.min.apply(null,e.lods.map((e=>e.level))));"Map"===this.tileType?this._levelOffset=e.lods[0].level:0!==i.minScale&&"Elevation"===this.tileType&&(n=e.lods.filter((e=>Math.abs(e.scale-i.minScale)<r))[0],this._levelOffset=n.level-p.level),n||(n=p);const u=Math.max(s.x,s.y);(Math.abs(s.x-s.y)>r||!e.lods.some((e=>Math.abs(e.resolution-u)<r)))&&(s.x=s.y=o.resolution,a.width=Math.ceil((t.xmax-t.xmin)/s.x-.1),a.height=Math.ceil((t.ymax-t.ymin)/s.y-.1));const m=o.level-n.level,[c,h]=e.size,f=e.origin;let{x:d,y:y}=s;const g=[{minCol:Math.floor((t.xmin-f.x+.1*d)/c/d),maxCol:Math.floor((t.xmax-f.x-.1*d)/c/d),minRow:Math.floor((f.y-t.ymax+.1*y)/h/y),maxRow:Math.floor((f.y-t.ymin-.1*y)/h/y)}];if(m>0)for(let e=0;e<m;e++)d*=2,y*=2,g.push({minCol:Math.floor((t.xmin-f.x+.1*d)/c/d),maxCol:Math.floor((t.xmax-f.x-.1*d)/c/d),minRow:Math.floor((f.y-t.ymax+.1*y)/h/d),maxRow:Math.floor((f.y-t.ymin-.1*y)/h/d)});a.storageInfo=new Q({blockWidth:e.size[0],blockHeight:e.size[1],pyramidBlockWidth:e.size[0],pyramidBlockHeight:e.size[1],compression:e.format,origin:e.origin,firstPyramidLevel:1,maximumPyramidLevel:m,tileInfo:e,blockBoundary:g}),this._set("rasterInfo",a)}if(i.capabilities.toLowerCase().indexOf("tilemap")>-1){const e={tileInfo:a.storageInfo.tileInfo,parsedUrl:c(this.url),url:this.url,tileServers:[],type:"tile"};this._tilemapCache=new A({layer:e})}}async fetchRawTile(e,t,s,r={}){const{storageInfo:i,extent:o,pixelSize:a}=this.rasterInfo,n=i.maximumPyramidLevel-e+this._levelOffset,l=`${this.url}/tile/${n}/${t}/${s}`,p=this._slices?{sliceId:r.sliceId||0}:null,{data:u}=await this.request(l,{query:p,responseType:"array-buffer",signal:r.signal});if(!u)return null;const m=await this.decodePixelBlock(u,{width:i.tileInfo.size[0],height:i.tileInfo.size[1],planes:null,pixelType:null,isPoint:"Elevation"===this.tileType}),c=i.blockBoundary[e];if("jpg"!==i.compression||s>c.minCol&&s<c.maxCol&&t>c.minRow&&t<c.maxRow)return m;const{origin:h,blockWidth:f,blockHeight:d}=i,y=Math.pow(2,e),g=Math.round((o.xmin-h.x)/(a.x*y))%f,x=Math.round((o.xmax-h.x)/(a.x*y))%f,j=Math.round((h.y-o.ymax)/(a.x*y))%d,I=Math.round((h.y-o.ymin)/(a.x*y))%d,b=s===c.minCol?g:0,w=t===c.minRow?j:0,v=s===c.maxCol?x:f,S=t===c.maxRow?I:d;return X(m,{x:b,y:w},{width:v-b,height:S-w}),m}getSliceIndex(e){if(null==e||!e.length||!this._slices)return null;const t=e;for(let e=0;e<this._slices.length;e++){const s=this._slices[e].multidimensionalDefinition;if(s.length===t.length&&!s.some((e=>{const s=t.filter((t=>e.variableName===t.variableName&&t.dimensionName===e.dimensionName))[0];if(!s)return!0;return(Array.isArray(e.values[0])?e.values[0][0]:e.values[0])!==(Array.isArray(s.values[0])?s.values[0][0]:s.values[0])})))return e}return null}async fetchVariableStatisticsHistograms(e,t){const s=this.request(this.url+"/statistics",{query:{variable:e,f:"json"},signal:t}).then((e=>{var t;return null==(t=e.data)?void 0:t.statistics})),r=this.request(this.url+"/histograms",{query:{variable:e,f:"json"},signal:t}).then((e=>{var t;return null==(t=e.data)?void 0:t.histograms})),o=await i([s,r]);return o[0]&&o[0].forEach((e=>{e.avg=e.mean,e.stddev=e.standardDeviation})),{statistics:o[0]||null,histograms:o[1]||null}}async computeBestPyramidLevelForLocation(e,t={}){if(!this._tilemapCache)return 0;let s=this.identifyPixelLocation(e,0,t.datumTransformation);if(null===s)return null;let r=0;const{maximumPyramidLevel:i}=this.rasterInfo.storageInfo;let o=i-r+this._levelOffset;const a=s.srcLocation;for(;o>=0;){try{if("available"===await this._tilemapCache.fetchAvailability(o,s.row,s.col,t))break}catch{}if(o--,r++,s=this.identifyPixelLocation(a,r,t.datumTransformation),null===s)return null}return-1===o||null==s?null:r}async _fetchRasterInfo(e){const t=this.sourceJSON,s=Math.ceil((t.extent.xmax-t.extent.xmin)/t.pixelSizeX-.1),r=Math.ceil((t.extent.ymax-t.extent.ymin)/t.pixelSizeY-.1),o=y.fromJSON(t.spatialReference||t.extent.spatialReference);if("Map"===this.tileType)return new U({width:s,height:r,bandCount:3,extent:x.fromJSON(t.extent),spatialReference:o,pixelSize:new g({x:t.pixelSizeX,y:t.pixelSizeY,spatialReference:o}),pixelType:"u8",statistics:null,keyProperties:{DataType:"processed"}});const{slice:a,signal:n}=e,l=!!t.hasRasterAttributeTable&&this.request(this.url+"/rasterAttributeTable",{query:{slice:a,f:"json"},signal:n}).then((e=>_.fromJSON(e.data))).catch((()=>null)),p=!!t.hasColormap&&this.request(this.url+"/colormap",{query:{slice:a,f:"json"},signal:n}).then((e=>{var t;return null==(t=e.data)?void 0:t.colormap})),u=!!t.hasHistograms&&this.request(this.url+"/histograms",{query:{slice:a,f:"json"},signal:n}).then((e=>{var t;return null==(t=e.data)?void 0:t.histograms})),m=this.request(this.url+"/keyProperties",{query:{f:"json"},signal:n}).then((e=>e.data)).catch((()=>{})),c=!!t.hasMultidimensions&&this._fetchMultidimensionalInfo(),h=!!t.hasMultidimensions&&this.request(this.url+"/slices",{query:{f:"json"},signal:n}).then((e=>e.data&&e.data.slices)).catch((()=>{}));return i([l,p,u,m,c,h]).then((e=>{let i=null;if(t.minValues&&t.minValues.length===t.bandCount){i=[];for(let e=0;e<t.minValues.length;e++)i.push({min:t.minValues[e],max:t.maxValues[e],avg:t.meanValues[e],stddev:t.stdvValues[e]})}return this._slices=e[5]||null,new U({width:s,height:r,bandCount:t.bandCount,extent:x.fromJSON(t.extent),spatialReference:o,pixelSize:new g({x:t.pixelSizeX,y:t.pixelSizeY,spatialReference:o}),pixelType:t.pixelType.toLowerCase(),statistics:i,attributeTable:e[0]||null,colormap:e[1]||null,histograms:e[2]||null,keyProperties:e[3]||{},multidimensionalInfo:e[4]||null})}))}async _fetchMultidimensionalInfo(e){var t;const s=await this.request(this.url+"/multidimensionalInfo",{query:{f:"json"},signal:e}).then((e=>{var t;return null==(t=e.data)?void 0:t.multidimensionalInfo}));return null!=(t=s.variables)&&t.length&&s.variables.forEach((e=>{var t;null!=(t=e.statistics)&&t.length&&e.statistics.forEach((e=>{e.avg=e.mean,e.stddev=e.standardDeviation}))})),s}};e([r({type:String,json:{write:!0}})],Ie.prototype,"datasetFormat",void 0),e([r()],Ie.prototype,"tileType",void 0),Ie=e([u("esri.layers.support.rasterDatasets.ImageServerRaster")],Ie);var be=Ie;const we=new Map;we.set("Int8","s8"),we.set("UInt8","u8"),we.set("Int16","s16"),we.set("UInt16","u16"),we.set("Int32","s32"),we.set("UInt32","u32"),we.set("Float32","f32"),we.set("Float64","f32"),we.set("Double64","f32");const ve=new Map;ve.set("lerc",".lrc"),ve.set("none",".til"),ve.set("deflate",".pzp"),ve.set("jpeg",".jzp");let Se=class extends K{constructor(){super(...arguments),this._files=null,this._storageIndex=null,this.datasetFormat="MRF"}async open(e){var r;await this.init(),this.datasetName=this.url.slice(this.url.lastIndexOf("/")+1);const i=e?s(e.signal):null,o=await this.request(this.url,{responseType:"xml",signal:i}),{rasterInfo:a,files:n}=this._parseHeader(o.data);if(-1===(null==(r=this.ioConfig.skipExtensions)?void 0:r.indexOf("aux.xml"))){const s=await this._fetchAuxiliaryData(e);var l;if(null!=s)a.statistics=null!=(l=s.statistics)?l:a.statistics,a.histograms=s.histograms,s.histograms&&!t(a.statistics)&&(a.statistics=Y(s.histograms))}this._set("rasterInfo",a),this._files=n;const p=await this.request(n.index,{responseType:"array-buffer",signal:i});this._storageIndex=this._parseIndex(p.data);let u,m,c=0,h=-1;const{blockWidth:f,blockHeight:d,compression:y}=this.rasterInfo.storageInfo,g=this.rasterInfo.storageInfo.pyramidScalingFactor,{width:x,height:j,bandCount:I}=this.rasterInfo,b=[],w="none"===y?1:I;for(;c<this._storageIndex.length;)h++,u=Math.ceil(x/f/Math.pow(g,h)),m=Math.ceil(j/d/Math.pow(g,h)),c+=u*m*w*4,b.push({maxRow:m,maxCol:u,minCol:0,minRow:0});this.rasterInfo.storageInfo.blockBoundary=b,h>0&&(this.rasterInfo.storageInfo.firstPyramidLevel=1,this.rasterInfo.storageInfo.maximumPyramidLevel=h),this.updateTileInfo()}async fetchRawTile(e,t,s,r={}){const{blockWidth:o,blockHeight:a,blockBoundary:n,compression:l}=this.rasterInfo.storageInfo,p=n[e];if(!p||p.maxRow<t||p.maxCol<s||p.minRow>t||p.minCol>s)return null;const{bandCount:u,pixelType:m}=this.rasterInfo,{ranges:c,actualTileWidth:h,actualTileHeight:f}=this._getTileLocation(e,t,s);if(!c||0===c.length)return null;if(0===c[0].from&&0===c[0].to){const e=new Uint8Array(o*a);return new b({width:o,height:a,pixels:null,mask:e,validPixelCount:0})}const{bandIds:d}=this.ioConfig,y="none"===l?1:u,g=[];let x=0;for(x=0;x<y;x++)(!d||d.indexOf[x]>-1)&&g.push(this.request(this._files.data,{range:{from:c[x].from,to:c[x].to},responseType:"array-buffer",signal:r.signal}));const j=await i(g),I=j.map((e=>e.data.byteLength)).reduce(((e,t)=>e+t)),w=new Uint8Array(I);let v=0;for(x=0;x<y;x++)w.set(new Uint8Array(j[x].data),v),v+=j[x].data.byteLength;const S="lerc"===this.rasterInfo.storageInfo.compression?"lerc":"bip",k=await this.decodePixelBlock(w.buffer,{width:o,height:a,format:S,pixelType:m});let T=0,R=0;if(h!==o||f!==a){let e=k.mask;if(e)for(x=0;x<a;x++)if(R=x*o,x<f)for(T=h;T<o;T++)e[R+T]=0;else for(T=0;T<o;T++)e[R+T]=0;else for(e=new Uint8Array(o*a),k.mask=e,x=0;x<f;x++)for(R=x*o,T=0;T<h;T++)e[R+T]=1}return k}_parseIndex(e){if(e.byteLength%16>0)throw"invalid array buffer must be multiples of 16";let t,s,r,i,o,a;if(N){for(s=new Uint8Array(e),i=new ArrayBuffer(e.byteLength),r=new Uint8Array(i),o=0;o<e.byteLength/4;o++)for(a=0;a<4;a++)r[4*o+a]=s[4*o+3-a];t=new Uint32Array(i)}else t=new Uint32Array(e);return t}_getTileLocation(e,t,s){const{blockWidth:r,blockHeight:i,pyramidScalingFactor:o,compression:a}=this.rasterInfo.storageInfo,{width:n,height:l,bandCount:p}=this.rasterInfo,u="none"===a?1:p;let m,c,h,f=0,d=0;for(h=0;h<e;h++)d=Math.pow(o,h),m=Math.ceil(n/r/d),c=Math.ceil(l/i/d),f+=m*c;d=Math.pow(o,e),m=Math.ceil(n/r/d),c=Math.ceil(l/i/d),f+=t*m+s,f*=4*u;const y=this._storageIndex.subarray(f,f+4*u);let g=0,x=0;const j=[];for(let e=0;e<u;e++)g=y[4*e+0]*Math.pow(2,32)+y[4*e+1],x=g+y[4*e+2]*Math.pow(2,32)+y[4*e+3],j.push({from:g,to:x});return{ranges:j,actualTileWidth:s<m-1?r:Math.ceil(n/d)-r*(m-1),actualTileHeight:t<c-1?i:Math.ceil(l/d)-i*(c-1)}}_parseHeader(e){const t=se(e,"MRF_META/Raster");if(!t)throw new l("mrf:open","not a valid MRF format");const s=se(t,"Size"),r=parseInt(s.getAttribute("x"),10),i=parseInt(s.getAttribute("y"),10),o=parseInt(s.getAttribute("c"),10),a=(ee(t,"Compression")||"none").toLowerCase();if(!a||-1===["none","lerc"].indexOf(a))throw new l("mrf:open","currently does not support compression "+a);const n=ee(t,"DataType")||"UInt8",p=we.get(n);if(null==p)throw new l("mrf:open","currently does not support pixel type "+n);const u=se(t,"PageSize"),m=parseInt(u.getAttribute("x"),10),c=parseInt(u.getAttribute("y"),10),h=se(t,"DataValues");let f,d;h&&(d=h.getAttribute("NoData"),null!=d&&(f=d.trim().split(" ").map((e=>parseFloat(e)))));if(se(e,"MRF_META/CachedSource"))throw new l("mrf:open","currently does not support MRF referencing other data files");const j=se(e,"MRF_META/GeoTags"),I=se(j,"BoundingBox");if(null==I)throw new l("mrf:open","missing node MRF_META/GeoTags/BoundingBox");const b=parseFloat(I.getAttribute("minx")),w=parseFloat(I.getAttribute("miny")),v=parseFloat(I.getAttribute("maxx")),S=parseFloat(I.getAttribute("maxy")),k=ee(j,"Projection"),T=ee(e,"datafile"),R=ee(e,"IndexFile");let C;"LOCAL_CS[]"!==k&&(C=new y({wkt:k}));const M=new x(b,w,v,S);M.spatialReference=C;const _=se(e,"MRF_META/Rsets"),P=parseInt(_&&_.getAttribute("scale")||"2",10),F=new Q({origin:new g({x:M.xmin,y:M.ymax,spatialReference:C}),blockWidth:m,blockHeight:c,pyramidBlockWidth:m,pyramidBlockHeight:c,compression:a,pyramidScalingFactor:P}),O=new g({x:(v-b)/r,y:(S-w)/i,spatialReference:C});return{rasterInfo:new U({width:r,height:i,extent:M,spatialReference:C,bandCount:o,pixelType:p,pixelSize:O,noDataValue:f,storageInfo:F}),files:{mrf:this.url,index:R||this.url.replace(".mrf",".idx"),data:T||this.url.replace(".mrf",ve.get(a))}}}async _fetchAuxiliaryData(e){try{const{data:t}=await this.request(this.url+".aux.xml",{responseType:"xml",signal:null==e?void 0:e.signal});return ge(t)}catch{return null}}};e([r()],Se.prototype,"_files",void 0),e([r()],Se.prototype,"_storageIndex",void 0),e([r({type:String,json:{write:!0}})],Se.prototype,"datasetFormat",void 0),Se=e([u("esri.layers.support.rasterIO.MRFRaster")],Se);var ke=Se;const Te=function(e,t){const s=e.get(t);return s&&s.values},Re=function(e,t){const s=e.get(t);return s&&s.values[0]};let Ce=class extends K{constructor(){super(...arguments),this._files=null,this._headerInfo=null,this._bufferSize=1048576,this.datasetFormat="TIFF"}async open(e){var r;await this.init();const i=e?s(e.signal):null,{data:o}=await this.request(this.url,{range:{from:0,to:this._bufferSize},responseType:"array-buffer",signal:i});if(!o)throw new l("tiffraster:open","failed to open url "+this.url);this.datasetName=this.url.slice(this.url.lastIndexOf("/")+1);const{littleEndian:a,firstIFD:n,isBigTiff:p}=H(o),u=[];await this.readIFDs(u,o,a,n,0,p?8:4,i);const m=V(u),{width:c,height:h,tileWidth:f,tileHeight:d,planes:y,pixelType:j,compression:I,firstPyramidLevel:b,maximumPyramidLevel:w,pyramidBlockWidth:v,pyramidBlockHeight:S,tileBoundary:k,metadata:T}=m,R=x.fromJSON(m.extent),C=R.spatialReference,M=new g(R?{x:R.xmin,y:R.ymax,spatialReference:C}:{x:0,y:0}),_=new Q({blockWidth:f,blockHeight:d,pyramidBlockWidth:v,pyramidBlockHeight:S,compression:I,origin:M,firstPyramidLevel:b,maximumPyramidLevel:w,blockBoundary:k}),P=new g({x:(R.xmax-R.xmin)/c,y:(R.ymax-R.ymin)/h,spatialReference:C}),F=T?{BandProperties:T.bandProperties,DataType:T.dataType}:{},O=new U({width:c,height:h,bandCount:y,pixelType:j,compression:I,pixelSize:P,storageInfo:_,spatialReference:C,keyProperties:F,extent:R,statistics:T?T.statistics:null});if(-1===(null==(r=this.ioConfig.skipExtensions)?void 0:r.indexOf("aux.xml"))){const s=await this._fetchAuxiliaryData(e);var D;if(null!=s)O.statistics=null!=(D=s.statistics)?D:O.statistics,O.histograms=s.histograms,s.histograms&&!t(O.statistics)&&(O.statistics=Y(s.histograms))}if(this._set("rasterInfo",O),this._headerInfo={littleEndian:a,isBigTiff:p,ifds:u,...m},!this._headerInfo.isSupported)throw new l("tiffraster:open","this tiff is not supported: "+this._headerInfo.message);this.updateTileInfo()}async fetchRawTile(e,t,s,r={}){if(!this._headerInfo&&this._headerInfo.isSupported)return null;const{blockBoundary:i}=this.rasterInfo.storageInfo,o=e>0?this.rasterInfo.storageInfo.pyramidBlockWidth:this.rasterInfo.storageInfo.blockWidth,a=e>0?this.rasterInfo.storageInfo.pyramidBlockHeight:this.rasterInfo.storageInfo.blockHeight,n=i[e];if(!n||n.maxRow<t||n.maxCol<s||n.minRow>t||n.minCol>s)return null;const l=this.getTileLocation(e,t,s);if(!l)return null;const{range:p,actualTileWidth:u,actualTileHeight:m,ifd:c}=l,{data:h}=await this.request(this.url,{range:p,responseType:"array-buffer",signal:r.signal}),f=await this.decodePixelBlock(h,{format:"tiff",customOptions:{headerInfo:this._headerInfo,ifd:c,offset:0,size:0},width:o,height:a,planes:null,pixelType:null});let d,y,g;if(u!==o||m!==a){let e=f.mask;if(e)for(d=0;d<a;d++)if(g=d*o,d<m)for(y=u;y<o;y++)e[g+y]=0;else for(y=0;y<o;y++)e[g+y]=0;else for(e=new Uint8Array(o*a),f.mask=e,d=0;d<m;d++)for(g=d*o,y=0;y<u;y++)e[g+y]=1}return f}async readIFDs(e,t,s,r,i,o=4,a){if(!r)return null;if(r>=t.byteLength||r<0){t=(await this.request(this.url,{range:{from:r+i,to:r+i+this._bufferSize},responseType:"array-buffer",signal:a})).data,i=r+i,r=0}const n=await this.readIFD(t,s,r,i,q.TIFF_TAGS,o,a);if(e.push(n.ifd),!n.nextIFD)return null;await this.readIFDs(e,t,s,n.nextIFD-i,i,o,a)}async readIFD(e,t,s,r,i=q.TIFF_TAGS,o=4,a){if(!e)return null;const n=J(e,t,s,r,i,o);if(n.success){const s=[];if(n.ifd.forEach((e=>{e.values||s.push(e)})),s.length>0){const i=s.map((e=>e.offlineOffsetSize)),o=Math.min.apply(null,i.map((e=>e[0])));if(Math.min.apply(null,i.map((e=>e[0]+e[1])))-o<=this._bufferSize){const{data:i}=await this.request(this.url,{range:{from:o,to:o+this._bufferSize},responseType:"array-buffer",signal:a});e=i,r=o,s.forEach((s=>G(e,t,s,r)))}}if(n.ifd.has("GEOKEYDIRECTORY")){const s=n.ifd.get("GEOKEYDIRECTORY"),i=s.values;if(i&&i.length>4){const o=i[0]+"."+i[1]+"."+i[2],n=await this.readIFD(e,t,s.valueOffset+6-r,r,q.GEO_KEYS,2,a);s.data=n.ifd,s.data&&s.data.set("GEOTIFFVersion",{id:0,type:2,valueCount:1,valueOffset:null,values:[o]})}}return n}if(n.requiredBufferSize&&n.requiredBufferSize!==e.byteLength){const s=await this.request(this.url,{range:{from:r,to:r+n.requiredBufferSize+4},responseType:"array-buffer",signal:a});return(e=s.data).byteLength<n.requiredBufferSize?null:this.readIFD(e,t,0,r,q.TIFF_TAGS,4,a)}}getTileLocation(e,t,s){const{firstPyramidLevel:r,blockBoundary:i}=this.rasterInfo.storageInfo,o=0===e?0:e-(r-1),a=this._headerInfo.ifds[o];if(!a)return null;const n=Te(a,"TILEOFFSETS");if(void 0===n)return null;const l=Te(a,"TILEBYTECOUNTS"),{minRow:p,minCol:u,maxRow:m,maxCol:c}=i[o];if(t>m||s>c||t<p||s<u)return null;const h=Re(a,"IMAGEWIDTH"),f=Re(a,"IMAGELENGTH"),d=Re(a,"TILEWIDTH"),y=Re(a,"TILELENGTH"),g=t*(c+1)+s,x=n[g],j=l[g];if(null==x||null==j)return null;return{range:{from:x,to:x+j-1},ifd:a,actualTileWidth:s===c?h%d:d,actualTileHeight:t===m?f%y:y}}async _fetchAuxiliaryData(e){try{const{data:t}=await this.request(this.url+".aux.xml",{responseType:"xml",signal:null==e?void 0:e.signal});return ge(t)}catch{return null}}};e([r()],Ce.prototype,"_files",void 0),e([r()],Ce.prototype,"_headerInfo",void 0),e([r()],Ce.prototype,"_bufferSize",void 0),e([r({type:String,json:{write:!0}})],Ce.prototype,"datasetFormat",void 0),Ce=e([u("esri.layers.support.rasterDatasets.TIFFRaster")],Ce);var Me=Ce;const _e=new Map;_e.set("CRF",{desc:"Cloud Raster Format",constructor:le}),_e.set("MRF",{desc:"Meta Raster Format",constructor:ke}),_e.set("TIFF",{desc:"GeoTIFF",constructor:Me}),_e.set("RasterTileServer",{desc:"Raster Tile Server",constructor:be}),_e.set("JPG",{desc:"JPG Raster Format",constructor:je}),_e.set("PNG",{desc:"PNG Raster Format",constructor:je}),_e.set("GIF",{desc:"GIF Raster Format",constructor:je}),_e.set("BMP",{desc:"BMP Raster Format",constructor:je});const Pe=h()({RSP_NearestNeighbor:"nearest",RSP_BilinearInterpolation:"bilinear",RSP_CubicConvolution:"cubic",RSP_Majority:"majority"});function Fe(){return{enabled:!this.loaded||"RasterTileServer"===this.raster.datasetFormat&&"Raster"===this.raster.tileType}}let Oe=class extends(P(D(O(T(F(oe(k(I)))))))){constructor(...e){super(...e),this.bandIds=null,this.interpolation=null,this.legendEnabled=!0,this.isReference=null,this.listMode="show",this.sourceJSON=null,this.version=null,this.title=null,this.type="imagery-tile",this.operationalLayerType="ArcGISTiledImageServiceLayer",this.popupEnabled=!0,this.popupTemplate=null}normalizeCtorArgs(e,t){return"string"==typeof e?{url:e,...t}:e}load(e){const s=t(e)?e.signal:null;return this.addResolvingPromise(this.loadFromPortal({supportedTypes:["Image Service"]},e).then((()=>this._openRaster(s)),(()=>this._openRaster(s)))),o(this)}get defaultPopupTemplate(){return this.createPopupTemplate()}get fields(){var e,t;let s=[new M({name:"Raster.ServicePixelValue",alias:"Pixel Value",domain:null,editable:!1,length:50,type:"string"})];const r=null==(e=this.rasterInfo)||null==(t=e.attributeTable)?void 0:t.fields;if(r){const e=r.filter((e=>"oid"!==e.type&&"value"!==e.name.toLowerCase())).map((e=>{const t=e.clone();return t.name="Raster."+e.name,t}));s=s.concat(e)}return s}set renderer(e){this._set("renderer",e),this.updateRenderer()}readRenderer(e,t,s){const r=t&&t.layerDefinition&&t.layerDefinition.drawingInfo&&t.layerDefinition.drawingInfo.renderer,i=w(r,s)||void 0;if(null!=i)return i}createPopupTemplate(e){return L(this,e)}write(e,t){const{raster:s}=this;if(this.loaded?"RasterTileServer"===s.datasetFormat&&("Raster"===s.tileType||"Map"===s.tileType):this.url&&/\/ImageServer(\/|\/?$)/i.test(this.url))return super.write(e,t);if(t&&t.messages){const e=`${t.origin}/${t.layerContainerType||"operational-layers"}`;t.messages.push(new l("layer:unsupported",`Layers (${this.title}, ${this.id}) of type '${this.declaredClass}' are not supported in the context of '${e}'`,{layer:this}))}return null}async _openRaster(e){this.raster?(this.raster.rasterInfo||await this.raster.open(),this.url=this.raster.url):this.raster=await class{static get supportedFormats(){const e=new Set;return _e.forEach(((t,s)=>e.add(s))),e}static async open(e){const{url:t,ioConfig:s,sourceJSON:r}=e;let i=e.datasetFormat;null==i&&t.lastIndexOf(".")&&(i=t.slice(t.lastIndexOf(".")+1).toUpperCase()),"OVR"===i||"TIF"===i?i="TIFF":"JPG"!==i&&"JPEG"!==i&&"JFIF"!==i||(i="JPG"),t.toLowerCase().indexOf("/imageserver")>-1&&-1===t.toLowerCase().indexOf("/wcsserver")&&(i="RasterTileServer");const o={url:t,sourceJSON:r,datasetFormat:i,ioConfig:s||{bandIds:null,sampling:null}};let a,n;if(this.supportedFormats.has(i))return a=_e.get(i).constructor,n=new a(o),await n.open({signal:e.signal}),n;if(i)throw new l("rasterfactory:open","not a supported format "+i);const p=Array.from(_e.keys());let u=0;const m=function(){return i=p[u++],i?(a=_e.get(i).constructor,n=new a(o),n.open({signal:e.signal}).then((()=>n)).catch((()=>m()))):null};return m()}static register(e,t,s){_e.has(e.toUpperCase())||_e.set(e.toUpperCase(),{desc:t,constructor:s})}}.open({url:this.url,sourceJSON:this.sourceJSON,ioConfig:this.ioConfig,signal:e});const{rasterInfo:t}=this.raster;if(!t)throw new l("imagery-tile-layer:load","cannot load resources on "+this.url);this.sourceJSON=this.sourceJSON||this.raster.sourceJSON,null!=this.sourceJSON&&(this._set("version",this.sourceJSON.currentVersion),this._set("copyright",this.sourceJSON.copyrightText)),null==this.title&&(this.title=this.raster.datasetName),"Map"===this.raster.tileType&&(this.popupEnabled=!1),this._configDefaultSettings()}};e([r()],Oe.prototype,"ioConfig",void 0),e([r({type:[p],json:{write:{overridePolicy:Fe}}})],Oe.prototype,"bandIds",void 0),e([r({json:{write:{overridePolicy:Fe}}}),f(Pe)],Oe.prototype,"interpolation",void 0),e([r({json:{write:!0}})],Oe.prototype,"multidimensionalDefinition",void 0),e([r(R)],Oe.prototype,"legendEnabled",void 0),e([r({type:Boolean,json:{read:!1,write:{enabled:!0,overridePolicy:()=>({enabled:!1})}}})],Oe.prototype,"isReference",void 0),e([r({type:["show","hide"]})],Oe.prototype,"listMode",void 0),e([r()],Oe.prototype,"sourceJSON",void 0),e([r({readOnly:!0})],Oe.prototype,"version",void 0),e([r()],Oe.prototype,"title",void 0),e([r({readOnly:!0,json:{read:!1}})],Oe.prototype,"type",void 0),e([r({type:["ArcGISTiledImageServiceLayer"]})],Oe.prototype,"operationalLayerType",void 0),e([r({type:Boolean,value:!0,json:{read:{source:"disablePopup",reader:(e,t)=>!t.disablePopup},write:{target:"disablePopup",overridePolicy:Fe,writer(e,t,s){t[s]=!e}}}})],Oe.prototype,"popupEnabled",void 0),e([r({type:j,json:{read:{source:"popupInfo"},write:{target:"popupInfo",overridePolicy:Fe}}})],Oe.prototype,"popupTemplate",void 0),e([r({readOnly:!0,dependsOn:["title"]})],Oe.prototype,"defaultPopupTemplate",null),e([r({readOnly:!0,type:[M],dependsOn:["rasterInfo"]})],Oe.prototype,"fields",null),e([r({types:v,json:{name:"layerDefinition.drawingInfo.renderer",write:{overridePolicy:Fe},origins:{"web-scene":{types:S,name:"layerDefinition.drawingInfo.renderer",write:{overridePolicy:e=>({enabled:e&&"vector-field"!==e.type})}}}}})],Oe.prototype,"renderer",null),e([d("renderer")],Oe.prototype,"readRenderer",null),Oe=e([u("esri.layers.ImageryTileLayer")],Oe);var De=Oe;export default De;
