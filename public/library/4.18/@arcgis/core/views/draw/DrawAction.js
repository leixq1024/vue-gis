/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.18/esri/copyright.txt for details.
*/
import{_ as e}from"../../chunks/tslib.es6.js";import"../../chunks/ArrayPool.js";import"../../chunks/object.js";import"../../chunks/deprecate.js";import"../../core/lang.js";import"../../config.js";import{i as t,c as o}from"../../chunks/Logger.js";import"../../chunks/string.js";import"../../chunks/metadata.js";import{property as s}from"../../core/accessorSupport/decorators/property.js";import"../../core/Accessor.js";import"../../chunks/PropertyOrigin.js";import"../../core/scheduling.js";import"../../core/promiseUtils.js";import"../../chunks/Message.js";import"../../core/Error.js";import"../../chunks/ensureType.js";import{subclass as r}from"../../core/accessorSupport/decorators/subclass.js";import{E as i}from"../../chunks/Evented.js";import"../../core/urlUtils.js";import"../../chunks/resourceExtension.js";import{b as n}from"../../chunks/screenUtils.js";let h=class extends i.EventedAccessor{constructor(){super(...arguments),this._hasZ=null,this.interactiveUndoDisabled=!1,this.history=[],this.redoHistory=[],this.snapToScene=!1,this.view=null,this.elevationInfo=null,this.defaultZ=0}get hasZ(){return t(this._hasZ)?this._hasZ:"3d"===this.view.type}set hasZ(e){this._hasZ=e,this.notifyChange("hasZ")}canUndo(){return this.history.length>0}canRedo(){return this.redoHistory.length>0}undo(){if(!this.canUndo())return;const e=this.history.pop();e.undo(),this.redoHistory.push(e)}redo(){if(!this.canRedo())return;const e=this.redoHistory.pop();e.redo(),this.history.push(e)}getCoordsFromScreenPoint(e){const o=this.screenToMap(e);return t(o)?o.hasZ?[o.x,o.y,o.z]:[o.x,o.y]:null}getCoordsAndPointFromScreenPoint(e){const o=this.screenToMap(e);return t(o)?o.hasZ?{vertex:[o.x,o.y,o.z],mapPoint:o}:{vertex:[o.x,o.y],mapPoint:o}:null}isDuplicateVertex(e,t){if(e.length){const[o,s]=e[e.length-1];return o===t[0]&&s===t[1]}return!1}getGeometryZValue(){return this.defaultZ}screenToMap(e){let s=null;if("3d"===this.view.type)if(this.hasZ){const t=o(this.elevationInfo,c);s=this.view.sceneIntersectionHelper.intersectElevationFromScreen(n(e.x,e.y),t,this.getGeometryZValue())}else{const r=o(this.elevationInfo,p);s=this.view.sceneIntersectionHelper.intersectElevationFromScreen(n(e.x,e.y),r,0),t(s)&&(s.z=void 0)}else s=this.view.toMap(e),t(s)&&(s.z=this.hasZ?this.getGeometryZValue():void 0);return s}};e([s({type:Boolean,nonNullable:!0})],h.prototype,"interactiveUndoDisabled",void 0),e([s({readOnly:!0})],h.prototype,"history",void 0),e([s({readOnly:!0})],h.prototype,"redoHistory",void 0),e([s()],h.prototype,"snapToScene",void 0),e([s()],h.prototype,"view",void 0),e([s()],h.prototype,"elevationInfo",void 0),e([s({nonNullable:!0})],h.prototype,"defaultZ",void 0),e([s({dependsOn:["view"]})],h.prototype,"hasZ",null),h=e([r("esri.views.draw.DrawAction")],h);const c={mode:"absolute-height",offset:0},p={mode:"on-the-ground",offset:0};var a=h;export default a;
