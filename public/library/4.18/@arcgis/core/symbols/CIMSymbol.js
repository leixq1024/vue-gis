/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.18/esri/copyright.txt for details.
*/
import{_ as r}from"../chunks/tslib.es6.js";import"../chunks/ArrayPool.js";import"../chunks/object.js";import"../chunks/deprecate.js";import{clone as o}from"../core/lang.js";import"../config.js";import"../chunks/Logger.js";import{n as t}from"../chunks/string.js";import"../chunks/metadata.js";import{property as s}from"../core/accessorSupport/decorators/property.js";import"../core/Accessor.js";import"../chunks/PropertyOrigin.js";import"../core/scheduling.js";import{all as e}from"../core/promiseUtils.js";import"../chunks/Message.js";import"../core/Error.js";import"../chunks/ensureType.js";import{subclass as i}from"../core/accessorSupport/decorators/subclass.js";import"../chunks/JSONSupport.js";import"../core/urlUtils.js";import"../core/accessorSupport/decorators/cast.js";import"../chunks/jsonMap.js";import{e as p}from"../chunks/enumeration.js";import{r as m}from"../chunks/reader.js";import{w as a}from"../chunks/writer.js";import"../chunks/resourceExtension.js";import"../geometry/SpatialReference.js";import"../geometry/Geometry.js";import"../geometry/Point.js";import"../chunks/Ellipsoid.js";import"../geometry/support/webMercatorUtils.js";import"../geometry/Extent.js";import"../chunks/mathUtils2.js";import"../chunks/colorUtils.js";import"../Color.js";import"../chunks/zmUtils.js";import"../geometry/Multipoint.js";import"../geometry/Polygon.js";import"../chunks/extentUtils.js";import"../geometry/Polyline.js";import"../chunks/typeUtils.js";import"../geometry/support/jsonUtils.js";import"../geometry.js";import"../layers/support/CodedValueDomain.js";import"../layers/support/Domain.js";import"../layers/support/InheritedDomain.js";import"../layers/support/RangeDomain.js";import"../chunks/domains.js";import"../chunks/arcadeOnDemand.js";import{collectArcadeFieldNames as n}from"../layers/support/fieldUtils.js";import c from"./Symbol.js";var j;let u=j=class extends c{constructor(r){super(r),this.data=null,this.type="cim"}readData(r,o){return o}writeData(r,o){if(r)for(const t in r)o[t]=r[t]}async collectRequiredFields(r,o){if("CIMSymbolReference"===this.data.type){const t=this.data.primitiveOverrides;if(t){const s=t.map((t=>{const s=t.valueExpressionInfo;return n(r,o,s.expression)}));await e(s)}}}clone(){return new j({data:o(this.data)})}hash(){return t(JSON.stringify(this.data)).toString()}};r([s({json:{write:!1}})],u.prototype,"color",void 0),r([s({json:{write:!0}})],u.prototype,"data",void 0),r([m("data",["symbol"])],u.prototype,"readData",null),r([a("data")],u.prototype,"writeData",null),r([p({CIMSymbolReference:"cim"},{readOnly:!0})],u.prototype,"type",void 0),u=j=r([i("esri.symbols.CIMSymbol")],u);var l=u;export default l;
