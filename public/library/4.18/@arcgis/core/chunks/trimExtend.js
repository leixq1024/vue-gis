/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.18/esri/copyright.txt for details.
*/
import{e}from"./ensureType.js";import{J as t}from"./jsonMap.js";import i from"../request.js";import{getGeometryType as o,getJsonType as r}from"../geometry/support/jsonUtils.js";import n from"../tasks/support/ProjectParameters.js";import{p as s,a}from"./utils4.js";function m(e){return{geometryType:r(e[0]),geometries:e.map((e=>e.toJSON()))}}function l(e,t,i){const r=o(t);return e.map((e=>{const t=r.fromJSON(e);return t.spatialReference=i,t}))}const c=new t({MGRS:"mgrs",USNG:"usng",UTM:"utm",GeoRef:"geo-ref",GARS:"gars",DMS:"dms",DDM:"ddm",DD:"dd"}),f=new t({109006:"centimeters",9102:"decimal-degrees",109005:"decimeters",9002:"feet",109009:"inches",9036:"kilometers",9001:"meters",9035:"miles",109007:"millimeters",109012:"nautical-miles",9096:"yards"});function y(e){const{geometries:t,deviationUnit:i,maxDeviation:o}=e.toJSON(),n={maxDeviation:o};return t&&t.length&&(n.geometries=JSON.stringify({geometryType:r(t[0]),geometries:t}),n.sr=JSON.stringify(t[0].spatialReference)),f.write(i,n,"deviationUnit"),n}const g=new t({preserveShape:"preserve-shape"});function p(e){const{polylines:t,lengthUnit:i,geodesic:o,calculationType:r}=e.toJSON(),n={};n.polylines=JSON.stringify(t);const s=e.polylines[0].spatialReference;return n.sr=s.wkid?s.wkid:JSON.stringify(s.toJSON()),i&&(n.lengthUnit=i),o&&(n.geodesic=o),r&&(n.calculationType=g.toJSON(r)),n}const u=new t({esriGeometryOffsetBevelled:"bevelled",esriGeometryOffsetMitered:"mitered",esriGeometryOffsetRounded:"rounded"}),d=new t({9001:"meters",9002:"feet",9036:"kilometers",9093:"miles",109012:"nautical-miles",109001:"yards"});function S(e){const{geometries:t,bevelRatio:i,offsetDistance:o,offsetHow:n,offsetUnit:s}=e.toJSON(),a={bevelRatio:i,offsetDistance:o};return t&&t.length&&(a.geometries=JSON.stringify({geometryType:r(t[0]),geometries:t}),a.sr=JSON.stringify(t[0].spatialReference)),n&&(a.offsetHow=u.toJSON(n)),s&&(a.offsetUnit=d.toJSON(s)),a}const O=e(n);async function J(e,t,o){t=O(t);const n=s(e),m={...n.query,f:"json",...t.toJSON()},c=t.outSpatialReference,f=r(t.geometries[0]),y=a(m,o);return i(n.path+"/project",y).then((({data:{geometries:e}})=>l(e,f,c)))}const N=new t({esriGeometryRelationCross:"cross",esriGeometryRelationDisjoint:"disjoint",esriGeometryRelationIn:"in",esriGeometryRelationInteriorIntersection:"interior-intersection",esriGeometryRelationIntersection:"intersection",esriGeometryRelationLineCoincidence:"line-coincidence",esriGeometryRelationLineTouch:"line-touch",esriGeometryRelationOverlap:"overlap",esriGeometryRelationPointTouch:"point-touch",esriGeometryRelationTouch:"touch",esriGeometryRelationWithin:"within",esriGeometryRelationRelation:"relation"});function R(e){const{geometries1:t,geometries2:i,relation:o,relationParameter:n}=e.toJSON(),s={};if(t&&t.length){s.geometries1=JSON.stringify({geometryType:r(t[0]),geometries:t});const e=t[0].spatialReference;s.sr=e.wkid?e.wkid:JSON.stringify(e)}return i&&i.length>0&&(s.geometries2=JSON.stringify({geometryType:r(i[0]),geometries:i})),o&&(s.relation=N.toJSON(o)),n&&(s.relationParam=n),s}const h=new t({0:"default-curve-extension",1:"relocate-ends",2:"keep-end-attributes",4:"no-end-attributes",8:"no-extend-at-from",16:"no-extend-at-to"});function G(e){const{extendHow:t,polylines:i,trimExtendTo:o}=e.toJSON(),r={};return r.extendHow=h.toJSON(t),i&&i.length&&(r.polylines=JSON.stringify(i),r.sr=JSON.stringify(i[0].spatialReference)),o&&(r.trimExtendTo=JSON.stringify(o)),r}export{c,l as d,m as e,y as g,p as l,S as o,J as p,R as r,G as t};
