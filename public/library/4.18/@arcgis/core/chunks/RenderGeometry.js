/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.18/esri/copyright.txt for details.
*/
import{c as t,i}from"./Logger.js";import{c as s}from"./vec3f64.js";import{i as r}from"./vec3.js";import{h as a}from"./mathUtils.js";import{c as n}from"./mat4.js";import{I as e,c as h}from"./quatf64.js";import{ad as o}from"./PiUtils.glsl.js";import{V as m}from"./Util.js";import{g as d,f,h as l}from"./Object3D.js";class c{constructor(t,i,r,a,n,e,h){this.uniqueName=null,this.shaderTransformationDirty=!0,this.data=t.toRenderData(),this.boundingInfo=i,this.material=r,this.origin=null,this.center=s(),this.bsRadius=0,this.transformation=null,this.calculateShaderTransformation=n,a&&this.updateTransformation(a,e),this.castShadow=h,this.instanceParameters={highlights:null,occludees:null,visible:!0}}updateTransformation(t,i){this.transformation=t,this.shaderTransformationDirty=!0,this.bsRadius=this.getBoundingSphere(t,i,this.center)}shaderTransformationChanged(){this.shaderTransformationDirty=!0}getBoundingSphere(t,i,s){return i=i||a(t),r(s,this.boundingInfo.getCenter(),t),this.boundingInfo.getBSRadius()*i}get hasShaderTransformation(){return!!this.calculateShaderTransformation}getShaderTransformation(){return this.calculateShaderTransformation?(this.shaderTransformationDirty&&(this.shaderTransformation||(this.shaderTransformation=h()),n(this.shaderTransformation,this.calculateShaderTransformation(t(this.transformation,e))),this.shaderTransformationDirty=!1),this.shaderTransformation):t(this.transformation,e)}computeAttachmentOrigin(t){if(this.material.computeAttachmentOrigin)return!!this.material.computeAttachmentOrigin(this,t)&&(i(this.transformation)&&r(t,t,this.transformation),!0);const s=this.getIndices(m.POSITION),a=this.getAttribute(m.POSITION);return!!o(a,s,t)&&(i(this.transformation)&&r(t,t,this.transformation),!0)}getIndices(t){return"indices"in this.data?this.data.indices[t]:null}getAttribute(t){return"vertexAttr"in this.data?this.data.vertexAttr[t]:null}addHighlight(){const t=d(0),i=this.instanceParameters;return i.highlights=f(i.highlights,t),t}removeHighlight(t){const i=this.instanceParameters;i.highlights=l(i.highlights,t)}}export{c as R};
