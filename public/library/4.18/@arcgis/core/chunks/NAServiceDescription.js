/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.18/esri/copyright.txt for details.
*/
import{_ as e}from"./tslib.es6.js";import{g as r}from"./object.js";import{i as t}from"./Logger.js";import"../core/accessorSupport/decorators/property.js";import s from"../core/Error.js";import"./ensureType.js";import{subclass as o}from"../core/accessorSupport/decorators/subclass.js";import{urlToObject as i}from"../core/urlUtils.js";import"./resourceExtension.js";import a from"../request.js";import n from"../tasks/Task.js";class l{constructor(e={}){this._options=e}toQueryParams(e){if(!e)return null;const r=e.toJSON(),t={};return Object.keys(r).forEach((e=>{const s=this._options[e];if(s){const o="boolean"!=typeof s&&s.name?s.name:e,i="boolean"!=typeof s&&s.getter?s.getter(r):r[e];null!=i&&(t[o]=(e=>{if(!Array.isArray(e))return!1;const[r]=e;return"number"==typeof r||"string"==typeof r})(i)?i.join(","):"object"==typeof i?JSON.stringify(i):i)}else t[e]=r[e]}),this),t}}function u(e){return new l(e)}const c=n=>{let l=class extends n{async getServiceDescription(){return this._serviceDescriptionPromise||(this._serviceDescriptionPromise=this._fetchServiceDescription()),this._serviceDescriptionPromise}async _fetchServiceDescription(){if(!this.url||!this.parsedUrl)throw new s("network-service:missing-url","Url to Network service is missing");const e=this.url,{data:t}=await a(e,{query:{f:"json"}});t.supportedTravelModes||(t.supportedTravelModes=[]);for(let e=0;e<t.supportedTravelModes.length;e++)t.supportedTravelModes[e].id||(t.supportedTravelModes[e].id=t.supportedTravelModes[e].itemId);const o=t.currentVersion>=10.4?async function(e){try{const{data:{supportedTravelModes:r,defaultTravelMode:t}}=await a(e+("/"===e[e.length-1]?"":"/")+"retrieveTravelModes",{query:{f:"json"}});return{supportedTravelModes:r,defaultTravelMode:t}}catch(e){throw new s("network-service:retrieveTravelModes","Could not get to the NAServer's retrieveTravelModes.",{error:e})}}(e):async function(e){const{data:t}=await a(e.substring(0,e.indexOf("/rest/")+6)+"info",{query:{f:"json"}});if(!t||!t.owningSystemUrl)return{supportedTravelModes:[],defaultTravelMode:null};e=t.owningSystemUrl;const{data:s}=await a(e+("/"===e[e.length-1]?"":"/")+"sharing/rest/portals/self",{query:{f:"json"}}),o=r("helperServices.routingUtilities.url",s);if(!o)return{supportedTravelModes:[],defaultTravelMode:null};const n=i(e),l=/\/solveClosestFacility$/.test(n.path)?"Route":/\/solveClosestFacility$/.test(n.path)?"ClosestFacility":"ServiceAreas",u=await a(o+("/"===o[o.length-1]?"":"/")+"GetTravelModes/execute",{query:{f:"json",serviceName:l}}),c=[];let p=null;if(u&&u.data&&u.data.results&&u.data.results.length){const e=u.data.results;for(const r of e)if("supportedTravelModes"===r.paramName){if(r.value&&r.value.features)for(const{attributes:e}of r.value.features)if(e){const r=JSON.parse(e.TravelMode);c.push(r)}}else"defaultTravelMode"===r.paramName&&(p=r.value)}return{supportedTravelModes:c,defaultTravelMode:p}}(e),{defaultTravelMode:n,supportedTravelModes:l}=await o;return t.defaultTravelMode=n,t.supportedTravelModes=l,t}_isInputGeometryZAware(e,r){for(let s=0;s<r.length;s++){const o=e[r[s]];if(o&&o.length)for(const e of o)if(t(e)&&e.hasZ)return!0}return!1}_dropZValuesOffInputGeometry(e,r){for(let t=0;t<r.length;t++){const s=e[r[t]];if(s&&s.length)for(const e of s)e.z=void 0}console.log("The remote Network Analysis service is powered by a network dataset which is not Z-aware.\nZ-coordinates of the input geometry are ignored.")}};return l=e([o("esri.tasks.mixins.NAServiceDescription")],l),l};let p=class extends(c(n)){};p=e([o("esri.tasks.mixins.NAServiceDescription")],p);export{c as N,u as c};
