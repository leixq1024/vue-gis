/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.31/esri/copyright.txt for details.
*/
import{_ as e}from"../chunks/tslib.es6.js";import t from"../PopupTemplate.js";import{ClonableMixin as s}from"../core/Clonable.js";import r from"../core/Error.js";import{L as i}from"../chunks/Logger.js";import{M as o}from"../chunks/MultiOriginJSONSupport.js";import{eachAlways as a,createAbortError as n,debounce as l,throwIfAbortError as p}from"../core/promiseUtils.js";import{watch as m}from"../core/reactiveUtils.js";import{property as u}from"../core/accessorSupport/decorators/property.js";import{a as c}from"../chunks/ensureType.js";import{i as h,h as f}from"../core/lang.js";import{subclass as d}from"../core/accessorSupport/decorators/subclass.js";import y from"./Layer.js";import{A as g}from"../chunks/ArcGISService.js";import{BlendLayer as b}from"./mixins/BlendLayer.js";import{CustomParametersMixin as j}from"./mixins/CustomParametersMixin.js";import{B as x,ImageryTileMixin as w,F as I}from"./mixins/ImageryTileMixin.js";import{OperationalLayer as S}from"./mixins/OperationalLayer.js";import{PortalLayer as k}from"./mixins/PortalLayer.js";import{RasterPresetRendererMixin as R}from"./mixins/RasterPresetRendererMixin.js";import{RefreshableLayer as v}from"./mixins/RefreshableLayer.js";import{ScaleRangeLayer as T}from"./mixins/ScaleRangeLayer.js";import{TemporalLayer as C}from"./mixins/TemporalLayer.js";import{a as M}from"../chunks/commonProperties2.js";import F from"./support/Field.js";import O from"./support/RasterFunction.js";import _ from"../Color.js";import"../geometry.js";import P from"../geometry/Extent.js";import{a as D}from"../chunks/locale.js";import L from"./support/PixelBlock.js";import{a as E}from"../chunks/pixelRangeUtils.js";import N from"../geometry/SpatialReference.js";import U from"./support/DimensionalDefinition.js";import A,{R as B}from"./support/RasterInfo.js";import{g as J}from"../chunks/multidimensionalUtils.js";import{i as V,s as z,l as G}from"../chunks/vectorFieldUtils.js";import{h as H,g as W,j as q}from"../chunks/stretchUtils.js";import $ from"../rest/support/FeatureSet.js";import{ao as Y}from"../chunks/unitUtils.js";import{i as X,g as K,b as Q,a as Z,f as ee,h as te}from"../chunks/xmlUtilities.js";import{P as se,G as re}from"../chunks/GCSShiftTransform.js";import{g as ie,i as oe,b as ae,p as ne,a as le,c as pe,T as me,e as ue,f as ce,h as he,j as fe}from"../chunks/RasterSymbolizer.js";import{b as de}from"../chunks/maybe.js";import{urlToObject as ye}from"../core/urlUtils.js";import ge from"./support/TileInfo.js";import{T as be}from"../chunks/TilemapCache.js";import{p as je,f as xe}from"../chunks/fetchRasterInfo.js";import we from"../geometry/Point.js";import{g as Ie,a as Se}from"../chunks/rasterFunctionHelper.js";import{createPopupTemplate as ke}from"../support/popupUtils.js";import{S as Re}from"../chunks/interfaces2.js";import"../core/Collection.js";import"../core/Accessor.js";import"../core/Handles.js";import"../chunks/metadata.js";import"../chunks/utils.js";import"../chunks/handleUtils.js";import"../chunks/ObservableBase.js";import"../chunks/tracking.js";import"../core/scheduling.js";import"../config.js";import"../core/Evented.js";import"../chunks/shared.js";import"../chunks/SimpleObservable.js";import"../core/JSONSupport.js";import"../core/accessorSupport/decorators/cast.js";import"../chunks/reader.js";import"../chunks/writer.js";import"./support/fieldUtils.js";import"../core/sql.js";import"../intl.js";import"../chunks/date.js";import"../chunks/jsonMap.js";import"../chunks/datetime.js";import"../chunks/number.js";import"../chunks/substitute.js";import"../chunks/messages.js";import"../request.js";import"../kernel.js";import"../chunks/assets.js";import"../chunks/mathUtils.js";import"../geometry/Geometry.js";import"../geometry/support/webMercatorUtils.js";import"../geometry/Multipoint.js";import"../chunks/zmUtils.js";import"../geometry/Polygon.js";import"../chunks/coordsUtils.js";import"../chunks/Axis.js";import"../chunks/extentUtils.js";import"../chunks/boundsUtils.js";import"../chunks/aaBoundingRect.js";import"../geometry/Polyline.js";import"../chunks/typeUtils.js";import"../geometry/support/jsonUtils.js";import"../popup/content.js";import"../popup/content/AttachmentsContent.js";import"../popup/content/Content.js";import"../popup/content/CustomContent.js";import"../popup/content/ExpressionContent.js";import"../popup/ElementExpressionInfo.js";import"../popup/content/FieldsContent.js";import"../popup/FieldInfo.js";import"../chunks/enumeration.js";import"../popup/support/FieldInfoFormat.js";import"../popup/content/MediaContent.js";import"../popup/content/BarChartMediaInfo.js";import"../popup/content/mixins/ChartMediaInfo.js";import"../popup/content/mixins/MediaInfo.js";import"../popup/content/support/ChartMediaInfoValue.js";import"../popup/content/support/ChartMediaInfoValueSeries.js";import"../chunks/colorUtils.js";import"../chunks/chartMediaInfoUtils.js";import"../popup/content/ColumnChartMediaInfo.js";import"../popup/content/ImageMediaInfo.js";import"../popup/content/support/ImageMediaInfoValue.js";import"../popup/content/LineChartMediaInfo.js";import"../popup/content/PieChartMediaInfo.js";import"../popup/content/RelationshipContent.js";import"../popup/support/RelatedRecordsInfoFieldOrder.js";import"../popup/content/TextContent.js";import"../popup/content/UtilityNetworkAssociationsContent.js";import"../popup/support/UtilityNetworkAssociationType.js";import"../popup/ExpressionInfo.js";import"../popup/LayerOptions.js";import"../popup/RelatedRecordsInfo.js";import"../support/actions/ActionBase.js";import"../core/Identifiable.js";import"../support/actions/ActionButton.js";import"../support/actions/ActionToggle.js";import"../chunks/asyncUtils.js";import"../core/Loadable.js";import"../core/Promise.js";import"../time/TimeExtent.js";import"../chunks/timeUtils.js";import"../chunks/arcgisLayerUrl.js";import"../chunks/persistableUrlUtils.js";import"../chunks/jsonUtils.js";import"../chunks/parser.js";import"../chunks/utils2.js";import"../chunks/screenUtils.js";import"../chunks/mat4.js";import"../chunks/common.js";import"../rasterRenderers.js";import"../renderers/ClassBreaksRenderer.js";import"../symbols.js";import"../symbols/CIMSymbol.js";import"../symbols/Symbol.js";import"../symbols/ExtrudeSymbol3DLayer.js";import"../symbols/Symbol3DLayer.js";import"../chunks/utils4.js";import"../symbols/edges/Edges3D.js";import"../chunks/materialUtils.js";import"../chunks/opacityUtils.js";import"../symbols/edges/SketchEdges3D.js";import"../symbols/edges/SolidEdges3D.js";import"../chunks/Symbol3DMaterial.js";import"../chunks/vec3f64.js";import"../symbols/FillSymbol.js";import"../symbols/SimpleLineSymbol.js";import"../symbols/LineSymbol.js";import"../symbols/LineSymbolMarker.js";import"../chunks/lineMarkers.js";import"../symbols/FillSymbol3DLayer.js";import"../symbols/patterns/LineStylePattern3D.js";import"../symbols/patterns/StylePattern3D.js";import"../chunks/utils5.js";import"../chunks/colors.js";import"../chunks/symbolLayerUtils3D.js";import"../chunks/aaBoundingBox.js";import"../symbols/Font.js";import"../symbols/IconSymbol3DLayer.js";import"../symbols/LabelSymbol3D.js";import"../symbols/Symbol3D.js";import"../chunks/collectionUtils.js";import"../portal/Portal.js";import"../portal/PortalGroup.js";import"../portal/PortalQueryParams.js";import"../portal/PortalQueryResult.js";import"../portal/PortalUser.js";import"../portal/PortalFolder.js";import"../symbols/LineSymbol3DLayer.js";import"../symbols/LineStyleMarker3D.js";import"../symbols/ObjectSymbol3DLayer.js";import"../symbols/PathSymbol3DLayer.js";import"../symbols/TextSymbol3DLayer.js";import"../symbols/WaterSymbol3DLayer.js";import"../symbols/support/StyleOrigin.js";import"../chunks/Thumbnail.js";import"../chunks/calloutUtils.js";import"../symbols/callouts/Callout3D.js";import"../symbols/callouts/LineCallout3D.js";import"../symbols/support/Symbol3DVerticalOffset.js";import"../symbols/LineSymbol3D.js";import"../symbols/MarkerSymbol.js";import"../symbols/MeshSymbol3D.js";import"../symbols/PictureFillSymbol.js";import"../chunks/urlUtils.js";import"../symbols/PictureMarkerSymbol.js";import"../symbols/PointSymbol3D.js";import"../symbols/PolygonSymbol3D.js";import"../symbols/SimpleFillSymbol.js";import"../symbols/SimpleMarkerSymbol.js";import"../symbols/TextSymbol.js";import"../symbols/WebStyleSymbol.js";import"../renderers/Renderer.js";import"../renderers/support/AuthoringInfo.js";import"../renderers/support/AuthoringInfoVisualVariable.js";import"../chunks/colorRamps.js";import"../rest/support/AlgorithmicColorRamp.js";import"../rest/support/ColorRamp.js";import"../rest/support/MultipartColorRamp.js";import"../renderers/mixins/VisualVariablesMixin.js";import"../renderers/visualVariables/ColorVariable.js";import"../renderers/visualVariables/VisualVariable.js";import"../renderers/visualVariables/support/ColorStop.js";import"../renderers/visualVariables/OpacityVariable.js";import"../renderers/visualVariables/support/OpacityStop.js";import"../renderers/visualVariables/RotationVariable.js";import"../renderers/visualVariables/SizeVariable.js";import"../renderers/visualVariables/support/SizeStop.js";import"../chunks/sizeVariableUtils.js";import"../chunks/visualVariableUtils.js";import"../Graphic.js";import"../chunks/compilerUtils.js";import"../chunks/lengthUtils.js";import"../renderers/support/ClassBreakInfo.js";import"../chunks/commonProperties.js";import"../symbols/support/jsonUtils.js";import"../chunks/layerUtils.js";import"../chunks/defaults.js";import"../chunks/defaultsJSON.js";import"../chunks/RendererLegendOptions.js";import"../renderers/FlowRenderer.js";import"../renderers/RasterColormapRenderer.js";import"../renderers/support/ColormapInfo.js";import"../chunks/colorRampUtils.js";import"../chunks/colorUtils2.js";import"../chunks/vec4.js";import"../chunks/vec4f64.js";import"../renderers/RasterShadedReliefRenderer.js";import"../renderers/RasterStretchRenderer.js";import"../chunks/stretchRendererUtils.js";import"../renderers/UniqueValueRenderer.js";import"../chunks/diffUtils.js";import"../renderers/support/UniqueValue.js";import"../renderers/support/UniqueValueClass.js";import"../renderers/support/UniqueValueGroup.js";import"../renderers/support/UniqueValueInfo.js";import"../chunks/styleUtils.js";import"../renderers/VectorFieldRenderer.js";import"../geometry/support/normalizeUtils.js";import"../chunks/normalizeUtilsCommon.js";import"../chunks/simplify.js";import"../chunks/utils9.js";import"../chunks/utils10.js";import"../chunks/utils12.js";import"../symbols/support/cimSymbolUtils.js";import"../chunks/utils7.js";import"../chunks/enums2.js";import"../chunks/LRUCache.js";import"../chunks/MemCache.js";import"./support/MultidimensionalSubset.js";import"../chunks/RasterJobHandler.js";import"../core/workers/workers.js";import"../core/workers/Connection.js";import"../chunks/Queue.js";import"../core/workers/RemoteClient.js";import"./support/LOD.js";import"../chunks/RawBlockCache.js";import"../chunks/rasterProjectionHelper.js";import"../geometry/projection.js";import"../chunks/projectBuffer.js";import"../chunks/geodesicConstants.js";import"../geometry/support/GeographicTransformation.js";import"../geometry/support/GeographicTransformationStep.js";import"../chunks/zscale.js";import"../chunks/QueueProcessor.js";import"../chunks/ReactiveMap.js";import"../core/signal.js";import"../chunks/rasterRendererHelper.js";import"../chunks/generateRendererUtils.js";import"../rest/support/ImageHistogramParameters.js";import"./support/MosaicRule.js";import"../chunks/dataUtils.js";import"../chunks/layerContainerType.js";import"../chunks/ElevationInfo.js";import"../chunks/unitConversionUtils.js";import"../tables/AttributeTableTemplate.js";import"../tables/elements/AttributeTableGroupElement.js";import"../tables/elements/AttributeTableElement.js";import"../tables/support/elements.js";import"../tables/elements/AttributeTableAttachmentElement.js";import"../tables/elements/AttributeTableFieldElement.js";import"../tables/elements/AttributeTableRelationshipElement.js";import"../chunks/TileKey.js";import"./support/RasterBandInfo.js";import"./support/RasterSensorInfo.js";import"../chunks/_commonjsHelpers.js";import"./support/rasterFunctionConstants.js";import"../chunks/domains.js";import"./support/CodedValueDomain.js";import"./support/Domain.js";import"./support/InheritedDomain.js";import"./support/RangeDomain.js";import"../chunks/fieldType.js";import"../chunks/focalStatUtils.js";import"../portal/PortalItem.js";import"../portal/PortalItemResource.js";import"../portal/PortalRating.js";import"../chunks/portalItemUtils.js";import"../renderers/support/RasterPresetRenderer.js";import"./support/TimeInfo.js";import"../time/TimeInterval.js";import"../chunks/ByteSizeUnit.js";function ve(e){return["x","e","east","long","longitude"].includes(e.toLowerCase())}function Te(e){return["y","n","west","lat","latitude"].includes(e.toLowerCase())}function Ce(e){const t=D();return t?e[t]??Object.values(e)[0]:Object.values(e)[0]}function Me(){return Math.round(255*Math.random())}function Fe(e){let t=Number.MAX_VALUE,s=-Number.MAX_VALUE;for(let r=0;r<e.length;r++){const i=e[r];null!=i&&(i<t&&(t=i),i>s&&(s=i))}return E(t,s)}function Oe(e,t,s){const r=e.map(((e,s)=>({name:e,count:t[s]}))).sort(((e,t)=>e.name>t.name?-1:1)),i=(o=1,e=>o*=e.count);var o;const a=[...r.slice(1),{name:"",count:1}].reverse().map(i).reverse();let n=0;for(let i=e.length-1;i>=0;i--)n+=a[r.findIndex((({name:t})=>t===e[i]))]*(s%t[i]),s=Math.floor(s/t[i]);return n}let _e=class extends x{constructor(){super(...arguments),this.datasetFormat="MEMORY",this.source=null}get url(){return""}fetchRawTile(e,t,s,r={}){if(!this._pixelBlockTiles){const{rasterInfo:i}=this,[o,a]=i.storageInfo.tileInfo.size,{sliceId:n}=r,{pixelBlocks:l}=this.source,p={pixelBlock:null==n?l[0]:l[n],useBilinear:"thematic"!==i.dataType,tileSize:{width:o,height:a},level:e,row:t,col:s},m=this.rasterJobHandler?this.rasterJobHandler.clipTile(p,r):V(p);return Promise.resolve(m)}const i=this._pixelBlockTiles.get(`${e}/${t}/${s}`);return Promise.resolve(i)}async _open(e){const t=this.source,{pixelBlocks:s,attributeTable:r,statistics:i,histograms:o,name:a,nativeExtent:n,transform:l}=t,p=s[0],{width:m,height:u,pixelType:c}=p,h=t.extent??new P({xmin:-.5,ymin:.5,xmax:m-.5,ymax:u-.5,spatialReference:new N({wkid:3857})}),f=t.isPseudoSpatialReference??!t.extent,d={x:h.width/m,y:h.height/u},y={...t.keyProperties};r&&(y.DataType="Thematic");const g=new A({width:m,height:u,pixelType:c,extent:h,nativeExtent:n,attributeTable:r,transform:l,pixelSize:d,spatialReference:h.spatialReference,bandCount:p.pixels.length,keyProperties:y,multidimensionalInfo:t.multidimensionalInfo,statistics:i,isPseudoSpatialReference:f,histograms:o});this.ioConfig.skipMapInfo&&this.updateImageSpaceRasterInfo(g),this.createRemoteDatasetStorageInfo(g,512,512),this._set("rasterInfo",g),this.updateTileInfo(),g.multidimensionalInfo?await this._buildMDimStats(t.pixelBlocks,g.multidimensionalInfo):await this._buildInMemoryRaster(p,{width:512,height:512},e),g.multidimensionalInfo||(this.source=null),this.datasetName=a}async _buildInMemoryRaster(e,t,s){const{rasterInfo:i}=this,o=i.storageInfo.maximumPyramidLevel??0,n="thematic"!==i.dataType,l=this.rasterJobHandler?this.rasterJobHandler.split({pixelBlock:e,tileSize:t,maximumPyramidLevel:o,useBilinear:n},s):Promise.resolve(z(e,t,o,n)),p=null!=i.statistics,m=null!=i.histograms,u=this.ioConfig.skipStatistics||p?Promise.resolve({statistics:null,histograms:null}):this.rasterJobHandler?this.rasterJobHandler.estimateStatisticsHistograms({pixelBlock:e},s):Promise.resolve(H(e)),c=await a([l,u]);if(!c[0].value&&c[1].value)throw new r("inmemory-raster:open","failed to build in memory raster");this._pixelBlockTiles=c[0].value,p||(i.statistics=c[1].value?.statistics),m||(i.histograms=c[1].value?.histograms)}async _buildMDimStats(e,t,s){for(let r=0;r<t.variables.length;r++){const i=t.variables[r];if(i.statistics)continue;const o=i.dimensions.map((e=>new U({variableName:i.name,dimensionName:e.name,values:[e.values?.[0]??e.extent?.[0]],isSlice:!0}))),a=J(o,t),n=null==a?null:e[a];if(null==n)continue;const l=this.rasterJobHandler?await this.rasterJobHandler.computeStatisticsHistograms({pixelBlock:n},s):W(n);i.statistics=l.statistics,i.histograms||(i.histograms=l.histograms)}}};e([u({type:String,json:{write:!0}})],_e.prototype,"datasetFormat",void 0),e([u()],_e.prototype,"source",void 0),e([u()],_e.prototype,"url",null),_e=e([d("esri.layers.support.rasterDatasets.InMemoryRaster")],_e);const Pe=_e;let De=class extends x{constructor(){super(...arguments),this.datasetFormat="CovJSON"}fetchRawTile(e,t,s,r={}){return this._inMemoryRaster.fetchRawTile(e,t,s,r)}async _open(e){const{extent:t,pixelBlocks:s,multidimensionalInfo:r,attributeTable:i,bandNames:o}=await this._fetchData(e),{statistics:a,histograms:n}=W(s[0]),l=o?.map((e=>({BandName:e}))),p={DataType:i?"Thematic":r?"Scientific":"Generic",BandProperties:l},m=new Pe({source:{extent:t,pixelBlocks:s,attributeTable:i?$.fromJSON(i):null,multidimensionalInfo:r,statistics:a,histograms:n,keyProperties:p,isPseudoSpatialReference:!1}});await m.open(),this._inMemoryRaster=m;const u=this.source?"":this.url.slice(this.url.lastIndexOf("/")+1);this._set("datasetName",u.slice(0,u.indexOf("."))),this._set("rasterInfo",m.rasterInfo)}async _fetchData(e){const t=this.source??(await this.request(this.url,{signal:e?.signal})).data,s="imagery-tile-layer:open-coverage-json";if("coverage"!==t.type?.toLowerCase()||"grid"!==t.domain?.domainType?.toLowerCase())throw new r(s,"Only coverage with Grid domain type is supported");if(!t.ranges)throw new r(s,"Missing ranges in the grid coverage data");if(!t.domain.referencing?.length)throw new r(s,"Missing domain referencing in the grid coverage data");const i=Object.values(t.ranges);for(let e=0;e<i.length;e++){const{axisNames:t,shape:o,type:a,values:n}=i[e];if(!("ndarray"===a.toLowerCase()&&n?.length&&t?.length&&o?.length))throw new r(s,"Only ranges with valid NdArray, axisNames, shape, and inline values are supported");if(!ve(t[t.length-1])||!Te(t[t.length-2]))throw new r(s,"Only row-major ordered pixel values are supported. X axis must be the last axis.")}return function(e){const{width:t,height:s,extent:r,dimensions:i}=function(e){const{axes:t}=e.domain,s=Object.keys(t),r=[],i=[];let o=-1,a=-1,n=[];for(let e=0;e<s.length;e++){const l=s[e];ve(l)?o=e:Te(l)&&(a=e);const p=t[l],m=[];if("values"in p){p.values.forEach((e=>m.push("string"==typeof e?new Date(e).getTime():e)));const e=m[1]-m[0];r.push([m[0]-.5*e,m[m.length-1]+.5*e]),i.push(e)}else{const{start:e,stop:t,num:s}=p,o=(t-e)/(s-1);r.push([e-.5*o,t+.5*o]),i.push(o);for(let t=0;t<s;t++)m.push(e+o*t)}n.push({name:l,values:m,extent:[m[0],m[m.length-1]]})}o>-1&&-1===a?a=0===o?1:0:a>-1&&-1===o?o=0===a?1:0:-1===a&&-1===o&&(o=0,a=1),n=n.filter(((e,t)=>!(t===o||t===a)));const{referencing:l}=e.domain,p=l.find((e=>e.coordinates.includes(s[o]))).system.id,m=p?.slice(p.lastIndexOf("/")+1),u=null==m||"CRS84"===m?4326:Number(m),c=new N({wkid:u}),[h,f]=r[o],[d,y]=r[a],g=new P({xmin:h,xmax:f,ymin:d,ymax:y,spatialReference:c});return{width:Math.round(g.width/i[o]),height:Math.round(g.height/i[a]),extent:g,dimensions:n}}(e),{ranges:o}=e,a=Object.keys(o).sort(((e,t)=>e<t?-1:1)),n=[];for(let e=0;e<a.length;e++){const t=a[e];i?.length&&n.push({name:t,dimensions:i})}const l=function(e){const t={},{parameters:s}=e;if(!s)return t;for(const[e,r]of Object.entries(s)){const{type:s,description:i,unit:o,categoryEncoding:a,observedProperty:n}=r;if("Parameter"===s&&(t[e]={},i&&(t[e].description=Ce(i)),o&&(t[e].unit=o.label?Ce(o.label):null,t[e].symbol=o.symbol?.value),a)){const s=Object.entries(a).map(((e,t)=>({OID:t,Value:Number(e[1]),ClassName:e[0].slice(e[0].lastIndexOf("/")+1),Count:1})));let r=!1;n?.categories?.length&&(n.categories.forEach((e=>{if(!e.id)return;const t=e.id.slice(e.id.lastIndexOf("/")+1),i=s.find((e=>e.ClassName===t));if(!i)return;const o=e.label?Ce(e.label):null;if(i.Label=o,e.preferredColor){const t=_.fromHex(e.preferredColor);t&&(r=!0,i.Red=t.r,i.Green=t.g,i.Blue=t.b)}})),r&&s.forEach((e=>{null==e.Red&&(e.Red=Me(),e.Green=Me(),e.Blue=Me())})));const i={objectIdFieldName:"",fields:[{name:"OID",type:"esriFieldTypeOID",alias:"OID",domain:null},{name:"Value",type:"esriFieldTypeInteger",alias:"Value",domain:null},{name:"Count",type:"esriFieldTypeDouble",alias:"Count",domain:null},{name:"ClassName",type:"esriFieldTypeString",alias:"ClassName",domain:null,length:50},{name:"Label",type:"esriFieldTypeString",alias:"Label",domain:null,length:50}],features:s.map((e=>({attributes:e})))};r&&i.fields.push({name:"Red",type:"esriFieldTypeInteger",alias:"Red",domain:null},{name:"Green",type:"esriFieldTypeInteger",alias:"Green",domain:null},{name:"Blue",type:"esriFieldTypeInteger",alias:"Blue",domain:null}),t[e].attributeTable=i}}return t}(e);n.forEach((e=>l[e.name]&&Object.assign(e,l[e.name])));const p=n.length?{variables:n}:void 0,m=[];for(let e=0;e<a.length;e++){const r=a[e],{values:n,dataType:l,axisNames:p,shape:u}=o[r],c=u.length>2?e*u.slice(0,-2).reduce(((e,t)=>e*t)):0,h=p.slice(0,-2),f=u.slice(0,-2),d="float"===l?"f32":Fe(n),y=t*s,g=n.length/y;for(let r=0;r<g;r++){const o=L.createEmptyBand(d,y),a=new Uint8Array(y).fill(255);let l=!1;const p=r*y;for(let e=0;e<y;e++){const t=n[p+e];null==t?(a[e]=0,l=!0):o[e]=t}if(0===e||i?.length){const e=new L({width:t,height:s,mask:l?a:null,pixels:[o],pixelType:d});e.updateStatistics(),i?.length?m[Oe(h,f,r)+c]=e:m.push(e)}else{const e=m[r];e.pixels.push(o),l?e.mask&&(e.mask=L.combineBandMasks([e.mask,a])):e.mask=l?a:null}}}const u=Object.values(l).find((e=>e.attributeTable))?.attributeTable;return{extent:r,pixelBlocks:m,multidimensionalInfo:p,attributeTable:u,bandNames:p?void 0:a}}(t)}};e([u({type:String,json:{write:!0}})],De.prototype,"datasetFormat",void 0),e([u({constructOnly:!0})],De.prototype,"source",void 0),De=e([d("esri.layers.support.rasterDatasets.CovJSONRaster")],De);const Le=De;function Ee(e,t){if(!e||!t)return null;const s=[];for(let r=0;r<e.length;r++)s.push(e[r]),s.push(t[r]);return s}function Ne(e){if(!e)return null;let t=Number(e);if(!isNaN(t)&&0!==t)return new N({wkid:t});if(e=String(e).trim(),Y(e))return new N({wkt2:e});const s=e.toUpperCase();if(s.startsWith("COMPD_CS")){if(!s.includes("VERTCS")||!s.includes("GEOGCS")&&!s.startsWith("PROJCS"))return null;const r=s.indexOf("VERTCS"),i=s.indexOf("PROJCS"),o=i>-1?i:s.indexOf("GEOGCS");if(-1===o)return null;const a=e.slice(o,e.lastIndexOf("]",r)+1).trim(),n=e.slice(r,e.lastIndexOf("]")).trim();t=Ue(a);const l=new N(t?{wkid:t}:{wkt:a}),p=Ue(n);return p&&(l.vcsWkid=p),l}return s.startsWith("GEOGCS")||s.startsWith("PROJCS")?(t=Ue(e),new N(0!==t?{wkid:t}:{wkt:e})):null}function Ue(e){const t=e.replaceAll("]","[").replaceAll('"',"").split("[").map((e=>e.trim())).filter((e=>""!==e)),s=t[t.length-1].split(","),r=s[0]?.toLowerCase();if(("epsg"===r||"esri"===r)&&e.endsWith('"]]')){const e=Number(s[1]);if(!isNaN(e)&&0!==e)return e}return 0}function Ae(e){if("pamdataset"!==e?.documentElement.tagName?.toLowerCase())return{};const t={spatialReference:null,transform:null,metadata:{},rasterBands:[],statistics:null,histograms:null};e.documentElement.childNodes.forEach((e=>{if(1===e.nodeType)if(X(e,"SRS")){if(!t.spatialReference){const s=K(e);t.spatialReference=Ne(s)}}else if(X(e,"Metadata"))if("xml:ESRI"===e.getAttribute("domain")){const{spatialReference:s,transform:r}=function(e){const t=Z(e,"GeodataXform"),s=Ne(ee(t,"SpatialReference/WKID")||K(t,"SpatialReference/WKT"));if("typens:PolynomialXform"!==t.getAttribute("xsi:type"))return{spatialReference:s,transform:null};const r=ee(t,"PolynomialOrder")??1,i=te(t,"CoeffX/Double"),o=te(t,"CoeffY/Double"),a=te(t,"InverseCoeffX/Double"),n=te(t,"InverseCoeffY/Double"),l=Ee(i,o),p=Ee(a,n);return{spatialReference:s,transform:l&&p&&l.length&&p.length?new se({spatialReference:s,polynomialOrder:r,forwardCoefficients:l,inverseCoefficients:p}):null}}(e);t.transform=r,t.spatialReference||(t.spatialReference=s)}else Q(e,"MDI").forEach((e=>t.metadata[e.getAttribute("key")]=K(e)));else if(X(e,"PAMRasterBand")){const s=function(e){const t=ee(e,"NoDataValue"),s=Z(e,"Histograms/HistItem"),r=ee(s,"HistMin"),i=ee(s,"HistMax"),o=ee(s,"BucketCount"),a=K(s,"HistCounts")?.split("|").map((e=>Number(e)));let n,l,p,m;Q(e,"Metadata/MDI").forEach((e=>{const t=Number(e.textContent??e.nodeValue);switch(e.getAttribute("key").toUpperCase()){case"STATISTICS_MINIMUM":n=t;break;case"STATISTICS_MAXIMUM":l=t;break;case"STATISTICS_MEAN":p=t;break;case"STATISTICS_STDDEV":m=t}}));const u=ee(e,"Metadata/SourceBandIndex");return{noDataValue:t,histogram:a?.length&&null!=r&&null!=i?{min:r,max:i,size:o||a.length,counts:a}:null,sourceBandIndex:u,statistics:null!=n&&null!=l?{min:n,max:l,avg:p,stddev:m}:null}}(e);null!=s.sourceBandIndex&&null==t.rasterBands[s.sourceBandIndex]?t.rasterBands[s.sourceBandIndex]=s:t.rasterBands.push(s)}}));const s=t.rasterBands;if(s.length){const e=!!s[0].statistics;t.statistics=e?s.map((e=>e.statistics)).filter(h):null;const r=!!s[0].histogram;t.histograms=r?s.map((e=>e.histogram)).filter(h):null}return t}let Be=class extends x{fetchRawTile(e,t,s,r={}){return this._inMemoryRaster.fetchRawTile(e,t,s,r)}async _open(e){const t=await this._fetchData(e);let{spatialReference:s,statistics:r,histograms:i,transform:o}=await this._fetchAuxiliaryData(e);const a=!s;a&&(s=new N({wkid:3857})),i?.length&&null==r&&(r=q(i));const{width:n,height:l}=t;let p=new P({xmin:-.5,ymin:.5-l,xmax:n-.5,ymax:.5,spatialReference:s});const m=o?o.forwardTransform(p):p;let u=!0;if(o){const e=o.forwardCoefficients;u=e&&0===e[1]&&0===e[2],u&&(o=null,p=m)}const c=new Pe({source:{extent:m,nativeExtent:p,transform:o,pixelBlocks:[t],statistics:r,histograms:i,keyProperties:{DateType:"Processed"},isPseudoSpatialReference:a},ioConfig:{sampling:"closest",skipStatistics:!0}});this.ioConfig.skipMapInfo&&(c.ioConfig.skipMapInfo=!0),await c.open(),c.source=null,this._set("rasterInfo",c.rasterInfo),this._inMemoryRaster=c}async _fetchData(e){const{data:t}=await this.request(this.url,{responseType:"array-buffer",signal:e?.signal}),s=ie(t).toUpperCase();if("JPG"!==s&&"PNG"!==s&&"GIF"!==s&&"BMP"!==s)throw new r("image-aux-raster:open","the data is not a supported format");this._set("datasetFormat",s);const i=s.toLowerCase(),o="gif"===i||"bmp"===i||!f("ios"),a=await this.decodePixelBlock(t,{format:i,useCanvas:o,hasNoZlibMask:!0});if(null==a)throw new r("image-aux-raster:open","the data cannot be decoded");return a}async _fetchAuxiliaryData(e){const t=e?.signal,{skipExtensions:s=[],skipMapInfo:r}=this.ioConfig,i=r||s.includes("aux.xml")?null:this.request(this.url+".aux.xml",{responseType:"xml",signal:t}),o=this.datasetFormat,l="JPG"===o?"jgw":"PNG"===o?"pgw":"BMP"===o?"bpw":null,p=l&&s.includes(l)?null:this.request(this.url.slice(0,this.url.lastIndexOf("."))+"."+l,{responseType:"text",signal:t}),m=await a([i,p]);if(t?.aborted)throw n();const u=Ae(m[0].value?.data);if(!u.transform){const e=m[1].value?m[1].value.data.split("\n").slice(0,6).map((e=>Number(e))):null;u.transform=6===e?.length?new se({forwardCoefficients:[e[4],e[5],e[0],-e[1],e[2],-e[3]]}):null}return u}};e([u({type:String,json:{write:!0}})],Be.prototype,"datasetFormat",void 0),Be=e([d("esri.layers.support.rasterDatasets.ImageAuxRaster")],Be);const Je=Be;let Ve=class extends x{constructor(){super(...arguments),this._levelOffset=0,this._tilemapCache=null,this._slices=null,this.datasetFormat="RasterTileServer",this.tileType=null}async fetchRawTile(e,t,s,r={}){const{storageInfo:i,extent:o}=this.rasterInfo,{transposeInfo:a}=i,n=null!=a&&!!r.transposedVariableName;if(this._slices&&!n&&null==r.sliceId)return null;const l=n?0:i.maximumPyramidLevel-e+this._levelOffset,p=`${this.url}/tile/${l}/${t}/${s}`,m=this._slices?n?{variable:r.transposedVariableName}:{sliceId:r.sliceId||0}:null,{data:u}=await this.request(p,{query:m,responseType:"array-buffer",signal:r.signal});if(!u)return null;const c=n?a.tileSize:i.tileInfo.size,h=await this.decodePixelBlock(u,{width:c[0],height:c[1],planes:null,pixelType:null,isPoint:"Elevation"===this.tileType,returnInterleaved:n,noDataValue:this.rasterInfo.noDataValue});if(null==h)return null;const f=i.blockBoundary[e];if("jpg"!==i.compression||s>f.minCol&&s<f.maxCol&&t>f.minRow&&t<f.maxRow)return h;const{origin:d,blockWidth:y,blockHeight:g}=i,{x:b,y:j}=this.getPyramidPixelSize(e),x=Math.round((o.xmin-d.x)/b)%y,w=Math.round((o.xmax-d.x)/b)%y||y,I=Math.round((d.y-o.ymax)/j)%g,S=Math.round((d.y-o.ymin)/j)%g||g,k=s===f.minCol?x:0,R=t===f.minRow?I:0,v=s===f.maxCol?w:y,T=t===f.maxRow?S:g;return G(h,{x:k,y:R},{width:v-k,height:T-R}),h}getSliceIndex(e){if(!this._slices||null==e||0===e.length)return null;const t=e;for(let e=0;e<this._slices.length;e++){const s=this._slices[e].multidimensionalDefinition;if(s.length===t.length&&!s.some((e=>{const s=t.find((t=>e.variableName===t.variableName&&t.dimensionName===e.dimensionName));return!s||(Array.isArray(e.values[0])?`${e.values[0][0]}-${e.values[0][1]}`:e.values[0])!==(Array.isArray(s.values[0])?`${s.values[0][0]}-${s.values[0][1]}`:s.values[0])})))return e}return null}async fetchVariableStatisticsHistograms(e,t){const s=this.request(this.url+"/statistics",{query:{variable:e,f:"json"},signal:t}).then((e=>e.data?.statistics)),r=this.request(this.url+"/histograms",{query:{variable:e,f:"json"},signal:t}).then((e=>e.data?.histograms)),i=await Promise.all([s,r]);return i[0]&&i[0].forEach((e=>{e.avg=e.mean,e.stddev=e.standardDeviation})),i[1]?.[0]?.counts?.length||(i[1]=null),{statistics:i[0]||null,histograms:i[1]||null}}async computeBestPyramidLevelForLocation(e,t={}){if(!this._tilemapCache)return 0;let s=this.identifyPixelLocation(e,0,t.datumTransformation);if(null===s)return null;let r=0;const{maximumPyramidLevel:i}=this.rasterInfo.storageInfo;let o=i-r+this._levelOffset;const a=s.srcLocation;for(;o>=0;){try{if("available"===await this._tilemapCache.fetchAvailability(o,s.row,s.col,t))break}catch{}if(o--,r++,s=this.identifyPixelLocation(a,r,t.datumTransformation),null===s)return null}return-1===o||null==s?null:r}async _open(e){const t=e?.signal,s=this.sourceJSON?{data:this.sourceJSON}:await this.request(this.url,{query:{f:"json"},signal:t});s.ssl&&(this.url=this.url.replace(/^http:/i,"https:"));const i=s.data;if(this.sourceJSON=i,!i)throw new r("imageserverraster:open","cannot initialize tiled image service, missing service info");if(!i.tileInfo)throw new r("imageserverraster:open","use ImageryLayer to open non-tiled image services");this._fixScaleInServiceInfo(),this.tileType=i.cacheType,null==this.tileType&&(["jpg","jpeg","png","png8","png24","png32","mixed"].includes(i.tileInfo.format.toLowerCase())?this.tileType="Map":"lerc"===i.tileInfo.format.toLowerCase()?this.tileType="Elevation":this.tileType="Raster"),this.datasetName=i.name?.slice(i.name.indexOf("/")+1)??"";const o=await this._fetchRasterInfo({signal:t});if(null==o)throw new r("image-server-raster:open","cannot initialize image service");je(o,i);const a="Map"===this.tileType?function(e,t){if(!e)return null;const{minScale:s,maxScale:r,minLOD:i,maxLOD:o}=t;if(null!=i&&null!=o)return ge.fromJSON({...e,lods:e.lods.filter((({level:e})=>null!=e&&e>=i&&e<=o))});if(0!==s&&0!==r){const t=e=>Math.round(1e4*e)/1e4,i=s?t(s):1/0,o=r?t(r):-1/0;return ge.fromJSON({...e,lods:e.lods.filter((e=>{const s=t(e.scale);return s<=i&&s>=o}))})}return ge.fromJSON(e)}(i.tileInfo,i):ge.fromJSON(i.tileInfo);de(a);const[n,l]=this._computeMinMaxLOD(o,a),{extent:p,pixelSize:m}=o,u=.5/o.width*m.x,c=Math.max(m.x,m.y),{lods:h}=a;("Map"!==this.tileType&&0!==i.maxScale||Math.abs(m.x-m.y)>u||!h.some((e=>Math.abs(e.resolution-c)<u)))&&(m.x=m.y=n.resolution,o.width=Math.ceil((p.xmax-p.xmin)/m.x-.1),o.height=Math.ceil((p.ymax-p.ymin)/m.y-.1));const f=n.level-l.level,[d,y]=a.size,g=[],b=[];h.forEach(((e,t)=>{e.level>=l.level&&e.level<=n.level&&g.push({x:e.resolution,y:e.resolution}),t<h.length-1&&b.push(Math.round(10*e.resolution/h[t+1].resolution)/10)})),g.sort(((e,t)=>e.x-t.x));const j=this.computeBlockBoundary(p,d,y,a.origin,g,f),x=g.length>1?g.slice(1):null;let w;i.transposeInfo&&(w={tileSize:[i.transposeInfo.rows,i.transposeInfo.cols],packetSize:o.keyProperties?._yxs.PacketSize??0});const I=b.length<=1||b.length>=3&&b.slice(0,-1).every((e=>e===b[0]))?b[0]??2:Math.round(10/(l.resolution/n.resolution)**(-1/f))/10;if(o.storageInfo=new B({blockWidth:a.size[0],blockHeight:a.size[1],pyramidBlockWidth:a.size[0],pyramidBlockHeight:a.size[1],pyramidResolutions:x,pyramidScalingFactor:I,compression:a.format,origin:a.origin,firstPyramidLevel:1,maximumPyramidLevel:f,tileInfo:a,transposeInfo:w,blockBoundary:j}),function(e){const{extent:t,spatialReference:s}=e;t.xmin>-1&&t.xmax>181&&s?.wkid&&s.isGeographic&&(e.nativeExtent=e.extent,e.transform=new re,e.extent=e.transform.forwardTransform(t))}(o),this._set("rasterInfo",o),i.capabilities.toLowerCase().includes("tilemap")){const e={tileInfo:o.storageInfo.tileInfo,parsedUrl:ye(this.url),url:this.url,tileServers:[]};this._tilemapCache=new be({layer:e})}}async _fetchRasterInfo(e){const t=this.sourceJSON;if("Map"===this.tileType){const e=t.fullExtent||t.extent,s=Math.ceil((e.xmax-e.xmin)/t.pixelSizeX-.1),r=Math.ceil((e.ymax-e.ymin)/t.pixelSizeY-.1),i=N.fromJSON(t.spatialReference||e.spatialReference),o=new we({x:t.pixelSizeX,y:t.pixelSizeY,spatialReference:i});return new A({width:s,height:r,bandCount:3,extent:P.fromJSON(e),spatialReference:i,pixelSize:o,pixelType:"u8",statistics:null,keyProperties:{DataType:"processed"}})}const{signal:s}=e,r=xe(this.url,this.sourceJSON,{signal:s,query:this.ioConfig.customFetchParameters}),i=t.hasMultidimensions?this.request(`${this.url}/slices`,{query:{f:"json"},signal:s}).then((e=>e.data?.slices)).catch((()=>null)):null,o=await Promise.all([r,i]);return this._slices=o[1],o[0]}_fixScaleInServiceInfo(){const{sourceJSON:e}=this;e.minScale&&e.minScale<0&&(e.minScale=0),e.maxScale&&e.maxScale<0&&(e.maxScale=0)}_computeMinMaxLOD(e,t){const{pixelSize:s}=e,r=.5/e.width*s.x,{lods:i}=t,o=t.lodAt(Math.max.apply(null,i.map((e=>e.level)))),a=t.lodAt(Math.min.apply(null,i.map((e=>e.level)))),{tileType:n}=this;if("Map"===n)return this._levelOffset=i[0].level,[o,a];if("Raster"===n)return[i.find((e=>e.resolution===s.x))??o,a];const{minScale:l,maxScale:p}=this.sourceJSON;let m=o;p>0&&(m=i.find((e=>Math.abs(e.scale-p)<r)),m||(m=i.filter((e=>e.scale>p)).sort(((e,t)=>e.scale>t.scale?1:-1))[0]??o));let u=a;return l>0&&(u=i.find((e=>Math.abs(e.scale-l)<r))??a,this._levelOffset=u.level-a.level),[m,u]}};e([u({type:String,json:{write:!0}})],Ve.prototype,"datasetFormat",void 0),e([u()],Ve.prototype,"tileType",void 0),Ve=e([d("esri.layers.support.rasterDatasets.ImageServerRaster")],Ve);const ze=Ve,Ge=new Map;Ge.set("Int8","s8"),Ge.set("UInt8","u8"),Ge.set("Int16","s16"),Ge.set("UInt16","u16"),Ge.set("Int32","s32"),Ge.set("UInt32","u32"),Ge.set("Float32","f32"),Ge.set("Float64","f32"),Ge.set("Double64","f32");const He=new Map;He.set("none",{blobExtension:".til",isOneSegment:!0,decoderFormat:"bip"}),He.set("lerc",{blobExtension:".lrc",isOneSegment:!1,decoderFormat:"lerc"}),He.set("deflate",{blobExtension:".pzp",isOneSegment:!0,decoderFormat:"deflate"}),He.set("jpeg",{blobExtension:".pjg",isOneSegment:!0,decoderFormat:"jpg"});let We=class extends x{constructor(){super(...arguments),this._files=null,this._storageIndex=null,this.datasetFormat="MRF"}async fetchRawTile(e,t,s,r={}){const{blockWidth:i,blockHeight:o,blockBoundary:a}=this.rasterInfo.storageInfo,n=a[e];if(!n||n.maxRow<t||n.maxCol<s||n.minRow>t||n.minCol>s)return null;const{bandCount:l,pixelType:p}=this.rasterInfo,{ranges:m,actualTileWidth:u,actualTileHeight:c}=this._getTileLocation(e,t,s);if(!m||0===m.length)return null;if(0===m[0].from&&0===m[0].to){const e=new Uint8Array(i*o);return new L({width:i,height:o,pixels:void 0,mask:e,validPixelCount:0})}const{bandIds:h}=this.ioConfig,f=this._getBandSegmentCount(),d=[];let y=0;for(y=0;y<f;y++)h&&!h.includes(y)||d.push(this.request(this._files.data,{range:{from:m[y].from,to:m[y].to},responseType:"array-buffer",signal:r.signal}));const g=await Promise.all(d),b=g.map((e=>e.data.byteLength)).reduce(((e,t)=>e+t)),j=new Uint8Array(b),x=[];let w=0;for(y=0;y<f;y++)x.push(w),j.set(new Uint8Array(g[y].data),w),w+=g[y].data.byteLength;const I=He.get(this.rasterInfo.storageInfo.compression).decoderFormat,S=await this.decodePixelBlock(j.buffer,{width:i,height:o,format:I,planes:h?.length||l,offsets:x,pixelType:p});if(null==S)return null;let{noDataValue:k}=this.rasterInfo;if(null!=k&&"lerc"!==I&&!S.mask&&(k=k[0],null!=k)){const e=S.width*S.height,t=new Uint8Array(e);if(Math.abs(k)>1e24)for(y=0;y<e;y++)Math.abs((S.pixels[0][y]-k)/k)>1e-6&&(t[y]=1);else for(y=0;y<e;y++)S.pixels[0][y]!==k&&(t[y]=1);S.mask=t}let R=0,v=0;if(u!==i||c!==o){let e=S.mask;if(e)for(y=0;y<o;y++)if(v=y*i,y<c)for(R=u;R<i;R++)e[v+R]=0;else for(R=0;R<i;R++)e[v+R]=0;else for(e=new Uint8Array(i*o),S.mask=e,y=0;y<c;y++)for(v=y*i,R=0;R<u;R++)e[v+R]=1}return S}async _open(e){this.datasetName=this.url.slice(this.url.lastIndexOf("/")+1);const t=e?e.signal:null,s=await this.request(this.url,{responseType:"xml",signal:t}),{rasterInfo:r,files:i}=this._parseHeader(s.data),{skipMapInfo:o,skipExtensions:a=[]}=this.ioConfig;if(!a.includes("aux.xml")&&!o){const t=await this._fetchAuxiliaryData(e);null!=t&&(r.statistics=t.statistics??r.statistics,r.histograms=t.histograms,t.histograms&&null==r.statistics&&(r.statistics=q(t.histograms)))}o&&this.updateImageSpaceRasterInfo(r),this._set("rasterInfo",r),this._files=i;const n=await this.request(i.index,{responseType:"array-buffer",signal:t});this._storageIndex=function(e){if(e.byteLength%16>0)throw new Error("invalid array buffer must be multiples of 16");let t,s,r,i,o,a;if(oe){for(s=new Uint8Array(e),i=new ArrayBuffer(e.byteLength),r=new Uint8Array(i),o=0;o<e.byteLength/4;o++)for(a=0;a<4;a++)r[4*o+a]=s[4*o+3-a];t=new Uint32Array(i)}else t=new Uint32Array(e);return t}(n.data);const{blockWidth:l,blockHeight:p}=this.rasterInfo.storageInfo,m=this.rasterInfo.storageInfo.pyramidScalingFactor,{width:u,height:c}=this.rasterInfo,h=[],f=this._getBandSegmentCount();let d=0,y=-1;for(;d<this._storageIndex.length;){y++;const e=Math.ceil(u/l/m**y)-1,t=Math.ceil(c/p/m**y)-1;d+=(e+1)*(t+1)*f*4,h.push({maxRow:t,maxCol:e,minCol:0,minRow:0})}this.rasterInfo.storageInfo.blockBoundary=h,y>0&&(this.rasterInfo.storageInfo.firstPyramidLevel=1,this.rasterInfo.storageInfo.maximumPyramidLevel=y),this.updateTileInfo()}_getBandSegmentCount(){return He.get(this.rasterInfo.storageInfo.compression).isOneSegment?1:this.rasterInfo.bandCount}_getTileLocation(e,t,s){const{blockWidth:r,blockHeight:i,pyramidScalingFactor:o}=this.rasterInfo.storageInfo,{width:a,height:n}=this.rasterInfo,l=this._getBandSegmentCount();let p,m,u,c=0,h=0;for(u=0;u<e;u++)h=o**u,p=Math.ceil(a/r/h),m=Math.ceil(n/i/h),c+=p*m;h=o**e,p=Math.ceil(a/r/h),m=Math.ceil(n/i/h),c+=t*p+s,c*=4*l;const f=this._storageIndex.subarray(c,c+4*l);let d=0,y=0;const g=[];for(let e=0;e<l;e++)d=f[4*e]*2**32+f[4*e+1],y=d+f[4*e+2]*2**32+f[4*e+3],g.push({from:d,to:y});return{ranges:g,actualTileWidth:s<p-1?r:Math.ceil(a/h)-r*(p-1),actualTileHeight:t<m-1?i:Math.ceil(n/h)-i*(m-1)}}_parseHeader(e){const t=Z(e,"MRF_META/Raster");if(!t)throw new r("mrf:open","not a valid MRF format");const s=Z(t,"Size"),i=parseInt(s.getAttribute("x"),10),o=parseInt(s.getAttribute("y"),10),a=parseInt(s.getAttribute("c"),10),n=(K(t,"Compression")||"none").toLowerCase();if(!He.has(n))throw new r("mrf:open","currently does not support compression "+n);const l=K(t,"DataType")||"UInt8",p=Ge.get(l);if(null==p)throw new r("mrf:open","currently does not support pixel type "+l);const m=Z(t,"PageSize"),u=parseInt(m.getAttribute("x"),10),c=parseInt(m.getAttribute("y"),10),h=Z(t,"DataValues");let f,d;if(h&&(d=h.getAttribute("NoData"),null!=d&&(f=d.trim().split(" ").map((e=>parseFloat(e))))),Z(e,"MRF_META/CachedSource"))throw new r("mrf:open","currently does not support MRF referencing other data files");const y=Z(e,"MRF_META/GeoTags"),g=Z(y,"BoundingBox");let b,j=!1;if(null!=g){const e=parseFloat(g.getAttribute("minx")),t=parseFloat(g.getAttribute("miny")),s=parseFloat(g.getAttribute("maxx")),r=parseFloat(g.getAttribute("maxy")),i=K(y,"Projection")||"";let o=N.WGS84;if("LOCAL_CS[]"!==i)if(i.toLowerCase().startsWith("epsg:")){const e=Number(i.slice(5));isNaN(e)||0===e||(o=new N({wkid:e}))}else o=Ne(i)??N.WGS84;else j=!0,o=new N({wkid:3857});b=new P(e,t,s,r),b.spatialReference=o}else j=!0,b=new P({xmin:-.5,ymin:.5-o,xmax:i-.5,ymax:.5,spatialReference:new N({wkid:3857})});const x=Z(e,"MRF_META/Rsets"),w=parseInt(x?.getAttribute("scale")||"2",10),I=b.spatialReference,S=new B({origin:new we({x:b.xmin,y:b.ymax,spatialReference:I}),blockWidth:u,blockHeight:c,pyramidBlockWidth:u,pyramidBlockHeight:c,compression:n,pyramidScalingFactor:w}),k=new we({x:b.width/i,y:b.height/o,spatialReference:I}),R=new A({width:i,height:o,extent:b,isPseudoSpatialReference:j,spatialReference:I,bandCount:a,pixelType:p,pixelSize:k,noDataValue:f,storageInfo:S}),v=K(e,"datafile"),T=K(e,"IndexFile");return{rasterInfo:R,files:{mrf:this.url,index:T||this.url.replace(".mrf",".idx"),data:v||this.url.replace(".mrf",He.get(n).blobExtension)}}}async _fetchAuxiliaryData(e){try{const{data:t}=await this.request(this.url+".aux.xml",{responseType:"xml",signal:e?.signal});return Ae(t)}catch{return null}}};e([u()],We.prototype,"_files",void 0),e([u()],We.prototype,"_storageIndex",void 0),e([u({type:String,json:{write:!0}})],We.prototype,"datasetFormat",void 0),We=e([d("esri.layers.support.rasterDatasets.MRFRaster")],We);const qe=We;class $e{static get supportedVersions(){return[5]}static parse(e){const t=new DataView(e),s=3&t.getUint8(0);if(3!==s)return{header:{version:s},recordSet:null};const r=t.getUint32(4,!0),i=t.getUint16(8,!0),o=t.getUint16(10,!0),a={version:s,recordCount:r,headerByteCount:i,recordByteCount:o};let n=32;const l=[],p=[];let m;if(3===s){for(;13!==t.getUint8(n);)m=String.fromCharCode(t.getUint8(n+11)).trim(),l.push({name:ae(new Uint8Array(e,n,11)),type:m,typeName:["String","Date","Double","Boolean","String","Integer"][["C","D","F","L","M","N"].indexOf(m)],length:t.getUint8(n+16)}),n+=32;if(n+=1,l.length>0)for(;p.length<r&&e.byteLength-n>o;){const s=[];32===t.getUint8(n)?(n+=1,l.forEach((t=>{if("C"===t.type)s.push(ae(new Uint8Array(e,n,t.length)).trim());else if("N"===t.type)s.push(parseInt(String.fromCharCode.apply(null,new Uint8Array(e,n,t.length)).trim(),10));else if("F"===t.type)s.push(parseFloat(String.fromCharCode.apply(null,new Uint8Array(e,n,t.length)).trim()));else if("D"===t.type){const r=String.fromCharCode.apply(null,new Uint8Array(e,n,t.length)).trim();s.push(new Date(parseInt(r.slice(0,4),10),parseInt(r.slice(4,6),10)-1,parseInt(r.slice(6,8),10)))}n+=t.length})),p.push(s)):n+=o}}const u=function(e){const t=e.fields,s=e.records,r=t.some((e=>"oid"===e.name.toLowerCase()))?"OBJECTID":"OID",i=[{name:r,type:"esriFieldTypeOID",alias:"OID"}].concat(t.map((e=>({name:e.name,type:"esriFieldType"+e.typeName,alias:e.name})))),o=i.map((e=>e.name)),a=[];let n=0,l=0;return s.forEach((e=>{const t={};for(t[r]=n++,l=1;l<o.length;l++)t[o[l]]=e[l-1];a.push({attributes:t})})),{displayFieldName:"",fields:i,features:a}}({fields:l,records:p});return{header:a,fields:l,records:p,recordSet:u}}}const Ye=(e,t)=>e.get(t)?.values,Xe=(e,t)=>e.get(t)?.values?.[0];let Ke=class extends x{constructor(){super(...arguments),this._files=null,this._headerInfo=null,this._bufferSize=1048576,this.datasetFormat="TIFF"}async fetchRawTile(e,t,s,r={}){if(!this._headerInfo?.isSupported||this.isBlockOutside(e,t,s))return null;const i=await this._fetchRawTiffTile(e,t,s,!1,r);if(null!=i&&this._headerInfo.hasMaskBand){const o=await this._fetchRawTiffTile(e,t,s,!0,r);null!=o&&o.pixels[0]instanceof Uint8Array&&(i.mask=o.pixels[0])}return i}async _open(e){const t=e?e.signal:null,{data:s}=await this.request(this.url,{range:{from:0,to:this._bufferSize},responseType:"array-buffer",signal:t});if(!s)throw new r("tiffraster:open","failed to open url "+this.url);this.datasetName=this.url.slice(this.url.lastIndexOf("/")+1,this.url.lastIndexOf("."));const{littleEndian:o,firstIFDPos:a,isBigTiff:n}=ne(s),l=[];await this._readIFDs(l,s,o,a,0,n?8:4,t);const{imageInfo:p,rasterInfo:m}=function(e){const t=fe(e),{width:s,height:r,tileWidth:i,tileHeight:o,planes:a,pixelType:n,compression:l,firstPyramidLevel:p,maximumPyramidLevel:m,pyramidBlockWidth:u,pyramidBlockHeight:c,pyramidResolutions:h,tileBoundary:f,affine:d,metadata:y}=t;let g=Ne(t.extent.spatialReference?.wkt||t.extent.spatialReference?.wkid),b=!!t.isPseudoGeographic;null==g&&(b=!0,g=new N({wkid:3857}));const j=new P({...t.extent,spatialReference:g}),x=new we(j?{x:j.xmin,y:j.ymax,spatialReference:g}:{x:0,y:0}),w=new B({blockWidth:i,blockHeight:o,pyramidBlockWidth:u,pyramidBlockHeight:c,compression:l,origin:x,firstPyramidLevel:p,maximumPyramidLevel:m,pyramidResolutions:h,blockBoundary:f}),I=new we({x:(j.xmax-j.xmin)/s,y:(j.ymax-j.ymin)/r,spatialReference:g}),S=y?{BandProperties:y.bandProperties,DataType:y.dataType}:{};let k=null;const R=Xe(e[0],"PHOTOMETRICINTERPRETATION"),v=Ye(e[0],"COLORMAP");if(R<=3&&v?.length>3&&v.length%3==0){k=[];const e=v.length/3;for(let t=0;t<e;t++)k.push([t,v[t]>>>8,v[t+e]>>>8,v[t+2*e]>>>8])}const T=new A({width:s,height:r,bandCount:a,pixelType:n,pixelSize:I,storageInfo:w,spatialReference:g,isPseudoSpatialReference:b,keyProperties:S,extent:j,colormap:k,statistics:y?y.statistics:null});if(d?.length&&(T.nativeExtent=new P({xmin:-.5,ymin:.5-r,xmax:s-.5,ymax:.5,spatialReference:g}),T.transform=new se({polynomialOrder:1,forwardCoefficients:[d[2]+d[0]/2,d[5]-d[3]/2,d[0],d[3],-d[1],-d[4]]}),T.extent=T.transform.forwardTransform(T.nativeExtent),T.pixelSize=new we({x:(j.xmax-j.xmin)/s,y:(j.ymax-j.ymin)/r,spatialReference:g}),w.origin.x=-.5,w.origin.y=.5),h){const{x:e,y:t}=T.pixelSize;h.forEach((s=>{s.x*=e,s.y*=t}))}return{imageInfo:t,rasterInfo:T}}(l),u=le(l),c=pe(l);if(this._headerInfo={littleEndian:o,isBigTiff:n,ifds:l,pyramidIFDs:u,maskIFDs:c,...p},this._set("rasterInfo",m),!p.isSupported)throw new r("tiffraster:open","this tiff is not supported: "+p.message);if(!p.tileWidth)throw new r("tiffraster:open","none-tiled tiff is not optimized for access, convert to COG and retry.");m.isPseudoSpatialReference&&i.getLogger(this).warn("The spatial reference for this tiff is unsupported. Only EPSG spatial reference codes and Esri WKTs are supported.");const h=l[0].get("PREDICTOR")?.values?.[0],f=l[0].get("SAMPLEFORMAT")?.values?.[0];if(3===f&&2===h)throw new r("tiffraster:open","unsupported horizontal difference encoding. Predictor=3 is supported for floating point data");const{skipMapInfo:d,skipExtensions:y=[]}=this.ioConfig;if(!y.includes("aux.xml")&&!d){const t=await this._fetchAuxiliaryMetaData(e);null!=t&&function(e,t){if(t.statistics=e.statistics??t.statistics,t.histograms=e.histograms,e.histograms&&null==t.statistics&&(t.statistics=q(e.histograms)),e.transform&&null==t.transform){t.transform=e.transform,t.nativeExtent=t.extent;const s=t.transform.forwardTransform(t.nativeExtent);t.pixelSize=new we({x:(s.xmax-s.xmin)/t.width,y:(s.ymax-s.ymin)/t.height,spatialReference:t.spatialReference}),t.extent=s}t.isPseudoSpatialReference&&e.spatialReference&&(t.spatialReference=e.spatialReference,t.extent.spatialReference=t.nativeExtent.spatialReference=t.storageInfo.origin.spatialReference=t.spatialReference)}(t,m)}y.includes("vat.dbf")||1!==m.bandCount||"u8"!==m.pixelType||d||(m.attributeTable=await this._fetchAuxiliaryTable(e),null!=m.attributeTable&&(m.keyProperties.DataType="thematic")),d&&this.updateImageSpaceRasterInfo(m),this.updateTileInfo()}async _readIFDs(e,t,s,r,i,o=4,a){if(!r)return null;(r>=t.byteLength||r<0)&&(t=(await this.request(this.url,{range:{from:r+i,to:r+i+this._bufferSize},responseType:"array-buffer",signal:a})).data,i=r+i,r=0);const n=await this._readIFD(t,s,r,i,me.tiffTags,o,a);if(e.push(n.ifd),!n.nextIFD)return null;await this._readIFDs(e,t,s,n.nextIFD-i,i,o,a)}async _readIFD(e,t,s,r,i=me.tiffTags,o=4,a){if(!e)return null;const n=ue(e,t,s,r,i,o);if(n.success){const s=[];if(n.ifd?.forEach((e=>{e.values||s.push(e)})),s.length>0){const i=s.map((e=>e.offlineOffsetSize)).filter(h),o=Math.min.apply(null,i.map((e=>e[0])));if(Math.min.apply(null,i.map((e=>e[0]+e[1])))-o<=this._bufferSize){const{data:i}=await this.request(this.url,{range:{from:o,to:o+this._bufferSize},responseType:"array-buffer",signal:a});e=i,r=o,s.forEach((s=>ce(e,t,s,r)))}}if(n.ifd?.has("GEOKEYDIRECTORY")){const s=n.ifd.get("GEOKEYDIRECTORY"),i=s?.values;if(i&&i.length>4){const o=i[0]+"."+i[1]+"."+i[2],n=await this._readIFD(e,t,s.valueOffset+6-r,r,me.geoKeys,2,a);s.data=n.ifd,s.data&&s.data.set("GEOTIFFVersion",{id:0,type:2,valueCount:1,valueOffset:null,values:[o]})}}return n}if(n.requiredBufferSize&&n.requiredBufferSize!==e.byteLength){const s=await this.request(this.url,{range:{from:r,to:r+n.requiredBufferSize+4},responseType:"array-buffer",signal:a});return(e=s.data).byteLength<n.requiredBufferSize?null:this._readIFD(e,t,0,r,me.tiffTags,4,a)}}async _fetchRawTiffTile(e,t,s,r,i={}){const o=this._getTileLocation(e,t,s,r);if(!o)return null;const{ranges:a,actualTileWidth:n,actualTileHeight:l,ifd:p}=o,m=a.map((e=>this.request(this.url,{range:e,responseType:"array-buffer",signal:i.signal}))),u=await Promise.all(m),c=u.map((e=>e.data.byteLength)).reduce(((e,t)=>e+t)),h=1===u.length?u[0].data:new ArrayBuffer(c),f=[0],d=[0];if(u.length>1){const e=new Uint8Array(h);for(let t=0,s=0;t<u.length;t++){const r=u[t].data;e.set(new Uint8Array(r),s),f[t]=s,s+=r.byteLength,d[t]=r.byteLength}}const{blockWidth:y,blockHeight:g}=this.getBlockWidthHeight(e),b=await this.decodePixelBlock(h,{format:"tiff",customOptions:{headerInfo:this._headerInfo,ifd:p,offsets:f,sizes:d},width:y,height:g,planes:null,pixelType:null});if(null==b)return null;let j,x,w;if(n!==y||l!==g){let e=b.mask;if(e)for(j=0;j<g;j++)if(w=j*y,j<l)for(x=n;x<y;x++)e[w+x]=0;else for(x=0;x<y;x++)e[w+x]=0;else for(e=new Uint8Array(y*g),b.mask=e,j=0;j<l;j++)for(w=j*y,x=0;x<n;x++)e[w+x]=1}return b}_getTileLocation(e,t,s,r=!1){const{firstPyramidLevel:i,blockBoundary:o}=this.rasterInfo.storageInfo,a=0===e?0:e-(i-1),{_headerInfo:n}=this;if(!n)return null;const l=r?n.maskIFDs[a]:0===a?n?.ifds[0]:n?.pyramidIFDs[a-1];if(!l)return null;const p=he(l,n),m=Ye(l,"TILEOFFSETS");if(void 0===m)return null;const u=Ye(l,"TILEBYTECOUNTS"),{minRow:c,minCol:h,maxRow:f,maxCol:d}=o[a];if(t>f||s>d||t<c||s<h)return null;const y=Xe(l,"IMAGEWIDTH"),g=Xe(l,"IMAGELENGTH"),b=Xe(l,"TILEWIDTH"),j=Xe(l,"TILELENGTH"),x=[];if(p){const{bandCount:e}=this.rasterInfo;for(let r=0;r<e;r++){const e=r*(f+1)*(d+1)+t*(d+1)+s;x[r]={from:m[e],to:m[e]+u[e]-1}}}else{const e=t*(d+1)+s;x.push({from:m[e],to:m[e]+u[e]-1})}for(let e=0;e<x.length;e++)if(null==x[e].from||!x[e].to||x[e].to<0)return null;return{ranges:x,ifd:l,actualTileWidth:s===d&&y%b||b,actualTileHeight:t===f&&g%j||j}}async _fetchAuxiliaryMetaData(e){try{const{data:t}=await this.request(this.url+".aux.xml",{responseType:"xml",signal:e?.signal});return Ae(t)}catch{return null}}async _fetchAuxiliaryTable(e){try{const{data:t}=await this.request(this.url+".vat.dbf",{responseType:"array-buffer",signal:e?.signal}),s=$e.parse(t);return s?.recordSet?$.fromJSON(s.recordSet):null}catch{return null}}};e([u()],Ke.prototype,"_files",void 0),e([u()],Ke.prototype,"_headerInfo",void 0),e([u()],Ke.prototype,"_bufferSize",void 0),e([u({type:String,json:{write:!0}})],Ke.prototype,"datasetFormat",void 0),Ke=e([d("esri.layers.support.rasterDatasets.TIFFRaster")],Ke);const Qe=Ke,Ze=new Map;Ze.set("MRF",{desc:"Meta Raster Format",constructor:qe}),Ze.set("TIFF",{desc:"GeoTIFF",constructor:Qe}),Ze.set("RasterTileServer",{desc:"Raster Tile Server",constructor:ze}),Ze.set("JPG",{desc:"JPG Raster Format",constructor:Je}),Ze.set("PNG",{desc:"PNG Raster Format",constructor:Je}),Ze.set("GIF",{desc:"GIF Raster Format",constructor:Je}),Ze.set("BMP",{desc:"BMP Raster Format",constructor:Je}),Ze.set("CovJSON",{desc:"COVJSON Raster Format",constructor:Le}),Ze.set("MEMORY",{desc:"In Memory Raster Format",constructor:Pe});class et{static get supportedFormats(){const e=new Set;return Ze.forEach(((t,s)=>e.add(s))),e}static async open(e){const{url:t,ioConfig:s,source:i,sourceJSON:o}=e;let a=e.datasetFormat??s?.datasetFormat;null==a&&(t.includes(".")?a=t.slice(t.lastIndexOf(".")+1).toUpperCase():"coverage"===i?.type?.toLowerCase()?a="CovJSON":i?.extent&&i.pixelblocks&&(a="MEMORY")),"OVR"===a||"TIF"===a?a="TIFF":"JPG"===a||"JPEG"===a||"JFIF"===a?a="JPG":"COVJSON"===a&&(a="CovJSON"),t.toLowerCase().includes("/imageserver")&&!t.toLowerCase().includes("/wcsserver")&&(a="RasterTileServer");const n={url:t,source:i,sourceJSON:o,datasetFormat:a,ioConfig:s??{bandIds:null,sampling:null}};if(Object.keys(n).forEach((e=>{null==n[e]&&delete n[e]})),a){if(!this.supportedFormats.has(a))throw new r("rasterfactory:open","not a supported format "+a);if("CRF"===a)throw new r("rasterfactory:open",`cannot open raster: ${t}`);const s=new(0,Ze.get(a).constructor)(n);return await s.open({signal:e.signal}),s}const l=Array.from(Ze.keys()).filter((e=>"CovJSON"!==e&&"Memory"!==e));let p=0;const m=()=>{if(a=l[p++],!a)return null;if("CRF"===a)return null;const t=new(0,Ze.get(a).constructor)(n);return t.open({signal:e.signal}).then((()=>t)).catch((()=>m()))};return m()}static register(e,t,s){Ze.has(e.toUpperCase())||Ze.set(e.toUpperCase(),{desc:t,constructor:s})}}let tt=class extends(b(T(S(k(R(j(w(C(g(v(o(s(y))))))))))))){constructor(...e){super(...e),this._primaryRasters=[],this.legendEnabled=!0,this.isReference=null,this.listMode="show",this.sourceJSON=null,this.version=null,this.type="imagery-tile",this.operationalLayerType="ArcGISTiledImageServiceLayer",this.popupEnabled=!0,this.popupTemplate=null,this.fields=null,this.source=void 0,this._debouncedSaveOperations=l((async(e,t,s)=>{const{save:r,saveAs:i}=await import("../chunks/imageryUtils.js");switch(e){case Re.SAVE:return r(this,t);case Re.SAVE_AS:return i(this,s,t)}}))}normalizeCtorArgs(e,t){return"string"==typeof e?{url:e,...t}:e}load(e){const t=null!=e?e.signal:null;return this.addResolvingPromise(this.loadFromPortal({supportedTypes:["Image Service"]},e).catch(p).then((()=>this._openRaster(t)))),Promise.resolve(this)}get defaultPopupTemplate(){return this.createPopupTemplate()}get rasterFields(){const e=[new F({name:"Raster.ServicePixelValue",alias:"Pixel Value",domain:null,editable:!1,length:50,type:"string"}),new F({name:"Raster.ServicePixelValue.Raw",alias:"Raw Pixel Value",domain:null,editable:!1,length:50,type:"string"})],t=this.raster?.rasterInfo??this.serviceRasterInfo,s=t?.attributeTable,r=null!=s?s.fields:null;if(r){const t=r.filter((e=>"oid"!==e.type&&"value"!==e.name.toLowerCase())).map((e=>{const t=e.clone();return t.name="Raster."+e.name,t}));e.push(...t)}const i=t?.dataType,o=t?.multidimensionalInfo;if(("vector-magdir"===i||"vector-uv"===i)&&null!=o){const t=o.variables[0].unit?.trim(),s="Magnitude"+(t?` (${t})`:"");e.push(new F({name:"Raster.Magnitude",alias:s,domain:null,editable:!1,type:"double"})),e.push(new F({name:"Raster.Direction",alias:"Direction (°)",domain:null,editable:!1,type:"double"}))}return e}createPopupTemplate(e){const{rasterFields:t}=this,s=e?.visibleFieldNames??new Set(t.map((({name:e})=>e)).filter((e=>"raster.servicepixelvalue.raw"!==e.toLowerCase()))),r=ke({fields:t,title:this.title},{...e,visibleFieldNames:s}),{rasterInfo:i}=this.raster;return r?.fieldInfos&&i?.pixelType.startsWith("f")&&r.fieldInfos.forEach((({format:e,fieldName:t})=>{e&&t&&/^raster\.(item|service)pixelvalue/i.test(t)&&(e.places=2)})),r}async generateRasterInfo(e,t){if(e=c(O,e),await this.load(),!e||"none"===e.functionName?.toLowerCase())return this.serviceRasterInfo;try{const{rasterInfo:s}=await this._openFunctionRaster(e,t);return s}catch(e){if(e instanceof r)throw e;throw new r("imagery-tile-layer","the given raster function is not supported")}}async save(e){return this._debouncedSaveOperations(Re.SAVE,e)}async saveAs(e,t){return this._debouncedSaveOperations(Re.SAVE_AS,t,e)}write(e,t){const s=this._primaryRasters[0]??this.raster;if(this.loaded?"RasterTileServer"===s.datasetFormat&&("Raster"===s.tileType||"Map"===s.tileType):this.url&&/\/ImageServer(\/|\/?$)/i.test(this.url))return super.write(e,t);if(t?.messages){const e=`${t.origin}/${t.layerContainerType||"operational-layers"}`;t.messages.push(new r("layer:unsupported",`Layers (${this.title}, ${this.id}) of type '${this.declaredClass}' are not supported in the context of '${e}'`,{layer:this}))}return null}async _openRaster(e){let t=!1;if(this.raster)await this._openFromRaster(this.raster,e),t="Function"===this.raster.datasetFormat,!t&&this.rasterFunction&&(this._primaryRasters=[this.raster],await this._initializeWithFunctionRaster(this.rasterFunction));else{const{url:t,rasterFunction:s,source:i}=this;if(!t&&!i)throw new r("imagery-tile-layer:open","missing url or source parameter");i?await this._openFromSource(i,e):s?await this._openFromUrlWithRasterFunction(t,s,e):await this._openFromUrl(t,e)}const s=this.raster.rasterInfo;if(!s)throw new r("imagery-tile-layer:load","cannot load resources on "+this.url);if(this._set("serviceRasterInfo",t?s:this._primaryRasters[0].rasterInfo),this._set("spatialReference",s.spatialReference),this.sourceJSON=this.sourceJSON||this.raster.sourceJSON,null!=this.sourceJSON){const e="Map"===this.raster.tileType&&null!=this.sourceJSON.minLOD&&null!=this.sourceJSON.maxLOD?this.sourceJSON:{...this.sourceJSON,minScale:0,maxScale:0};this.read(e,{origin:"service"})}else this.read({tileInfo:this.serviceRasterInfo?.storageInfo.tileInfo.toJSON()},{origin:"service"});this.title||(this.title=this.raster.datasetName),"Map"===this.raster.tileType&&(this.popupEnabled=!1),this._configDefaultSettings(),this.addHandles(m((()=>this.customParameters),(e=>{this.raster&&(this.raster.ioConfig.customFetchParameters=e)})))}async _openFromRaster(e,t){e.rasterInfo||await e.open({signal:t}),this._primaryRasters="Function"===e.datasetFormat?e.primaryRasters.rasters:[e],this.url||(this.url=this._primaryRasters[0].url)}async _openFromUrlWithRasterFunction(e,t,s){const i=[e];t&&Ie(t.toJSON(),i);const o=await Promise.all(i.map((e=>et.open({url:e,sourceJSON:this.sourceJSON,ioConfig:{sampling:"closest",...this.ioConfig,customFetchParameters:this.customParameters},signal:s})))),a=o.findIndex((e=>null==e));if(a>-1)throw new r("imagery-tile-layer:open",`cannot open raster: ${i[a]}`);return this._primaryRasters=o,this._initializeWithFunctionRaster(t)}async _openFromUrl(e,t){const s=await et.open({url:e,sourceJSON:this.sourceJSON,ioConfig:{sampling:"closest",...this.ioConfig,customFetchParameters:this.customParameters},signal:t});if(null==s)throw new r("imagery-tile-layer:open",`cannot open raster: ${e}`);this._primaryRasters=[s],this.raster=s}async _openFromSource(e,t){const s="the tiled imagery data source is not supported",i="coverage"===e.type?.toLowerCase()?"CovJSON":e.extent&&e.pixelBlock?"MEMORY":null;if(!i)throw new r("imagery-tile-layer:open",s);"MEMORY"===i&&(e={...e,pixelBlock:void 0,pixelBlocks:[e.pixelBlock]});const o=await et.open({url:"",source:e,datasetFormat:i,ioConfig:{sampling:"closest",...this.ioConfig,customFetchParameters:this.customParameters},signal:t});if(null==o)throw new r("imagery-tile-layer:open",s);this._primaryRasters=[o],this.rasterFunction?await this._initializeWithFunctionRaster(this.rasterFunction):this.raster=o}async _openFunctionRaster(e,t){const s={raster:this._primaryRasters[0]};this._primaryRasters.length>1&&this._primaryRasters.forEach((e=>s[e.url]=e));const r=Se(e.functionDefinition?.toJSON()??e.toJSON(),s),i=new I({rasterFunction:r});return await i.open(t),i}async _initializeWithFunctionRaster(e,t){try{this.raster=await this._openFunctionRaster(e,t)}catch(e){e instanceof r&&i.getLogger(this).error("imagery-tile-layer:open",e.message),i.getLogger(this).warn("imagery-tile-layer:open","the raster function cannot be applied and is removed"),this._set("rasterFunction",null),this.raster=this._primaryRasters[0]}}};e([u({clonable:!1})],tt.prototype,"_primaryRasters",void 0),e([u(M)],tt.prototype,"legendEnabled",void 0),e([u({type:Boolean,json:{read:!1,write:{enabled:!0,overridePolicy:()=>({enabled:!1})}}})],tt.prototype,"isReference",void 0),e([u({type:["show","hide"]})],tt.prototype,"listMode",void 0),e([u({json:{read:!0,write:!0}})],tt.prototype,"blendMode",void 0),e([u()],tt.prototype,"sourceJSON",void 0),e([u({readOnly:!0,json:{origins:{service:{read:{source:"currentVersion"}}}}})],tt.prototype,"version",void 0),e([u({readOnly:!0,json:{read:!1}})],tt.prototype,"type",void 0),e([u({type:["ArcGISTiledImageServiceLayer"]})],tt.prototype,"operationalLayerType",void 0),e([u({type:Boolean,value:!0,json:{read:{source:"disablePopup",reader:(e,t)=>!t.disablePopup},write:{target:"disablePopup",overridePolicy(){return{enabled:!this.loaded||"Raster"===this.raster.tileType}},writer(e,t,s){t[s]=!e}}}})],tt.prototype,"popupEnabled",void 0),e([u({type:t,json:{read:{source:"popupInfo"},write:{target:"popupInfo",overridePolicy(){return{enabled:!this.loaded||"Raster"===this.raster.tileType}}}}})],tt.prototype,"popupTemplate",void 0),e([u({readOnly:!0})],tt.prototype,"defaultPopupTemplate",null),e([u({readOnly:!0,type:[F]})],tt.prototype,"fields",void 0),e([u({readOnly:!0,type:[F]})],tt.prototype,"rasterFields",null),e([u({constructOnly:!0})],tt.prototype,"source",void 0),tt=e([d("esri.layers.ImageryTileLayer")],tt);const st=tt,rt=Object.freeze(Object.defineProperty({__proto__:null,default:st},Symbol.toStringTag,{value:"Module"}));export{rt as I,et as R,st as default};
