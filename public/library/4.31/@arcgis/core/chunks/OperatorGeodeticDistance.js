/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.31/esri/copyright.txt for details.
*/
import{a as r,b as t}from"./tslib.es6.js";import{t as o,a as e}from"./Transformation2D.js";import{G as s,m as i}from"./GeodeticDistanceCalculator-CJvEB3vc.js";import"./converterAPI.js";import"../geometry.js";import"./ensureType.js";import"../core/lang.js";import"./Logger.js";import"../config.js";import"../geometry/Extent.js";import"../core/accessorSupport/decorators/property.js";import"./utils.js";import"./handleUtils.js";import"./metadata.js";import"../core/Error.js";import"../core/accessorSupport/decorators/subclass.js";import"./tracking.js";import"../geometry/Geometry.js";import"../core/JSONSupport.js";import"../core/Accessor.js";import"../core/Handles.js";import"./maybe.js";import"./ObservableBase.js";import"../core/scheduling.js";import"../core/promiseUtils.js";import"./reader.js";import"../geometry/SpatialReference.js";import"./unitUtils.js";import"./jsonMap.js";import"./assets.js";import"../request.js";import"../kernel.js";import"../core/urlUtils.js";import"./writer.js";import"../geometry/Point.js";import"../core/accessorSupport/decorators/cast.js";import"../geometry/support/webMercatorUtils.js";import"../geometry/Multipoint.js";import"./zmUtils.js";import"../geometry/Polygon.js";import"./coordsUtils.js";import"./Axis.js";import"./extentUtils.js";import"./boundsUtils.js";import"./aaBoundingRect.js";import"./mathUtils.js";import"../geometry/Polyline.js";import"./typeUtils.js";import"../geometry/support/jsonUtils.js";import"./Distance2DCalculator-BX0Ep7eP.js";import"./OperatorShapePreservingDensify.js";import"./OperatorGeodeticDensifyByLength.js";class p{getOperatorType(){return 10316}supportsCurves(){return!0}accelerateGeometry(r,t,o){return!1}canAccelerateGeometry(r){return!1}execute(r,t,o,e,s){return this.executeEx(r,t,o,e,s,null,null,Number.NaN)}executeEx(p,m,a,c,j,n,l,u){const y={stack:[],error:void 0,hasError:!1};try{if(0===a.getCoordinateSystemType()&&o(""),e(p),e(m),p.isEmpty()||m.isEmpty())return Number.NaN;Number.isNaN(u)&&(u=Number.MAX_VALUE);const t=r(y,new s(a,c,j,u,1),!1),g=i(),d=i(),U=t.calculate(p,m,g,d);return n&&n.outPoint.assign(g.outPoint),l&&l.outPoint.assign(d.outPoint),U}catch(r){y.error=r,y.hasError=!0}finally{t(y)}}}export{p as OperatorGeodeticDistance,i as makeOutput};
