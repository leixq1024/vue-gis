/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.31/esri/copyright.txt for details.
*/
import{A as e,b as t}from"./enums2.js";const r={color:[128,128,128,1],outlinecolor:[0,0,0,1],backgroundcolor:[128,128,128,1],borderlinecolor:[0,0,0,1],tintcolor:[255,255,255,1]},o={CIMVectorMarker:{scalesymbolsproportionally:!1,respectframe:!0,anchorpointunits:"Relative",offsetx:0,offsety:0,rotateclockwise:!1,rotation:0,size:10,enable:!0,colorlocked:!1},CIMPictureMarker:{scalex:1,texturefilter:"Draft",anchorpointunits:"Relative",offsetx:0,offsety:0,rotateclockwise:!1,rotation:0,size:10,enable:!0,colorlocked:!1},CIMTextSymbol:{angle:0,anglex:0,angley:0,halosize:1,height:10,horizontalalignment:"Left",kerning:!0,letterspacing:0,letterwidth:100,ligatures:!0,linegap:0,offsetx:0,offsety:0,strikethrough:!1,textcase:"Normal",textstring:"",underline:!1,verticalalignment:"Bottom",enable:!0,colorlocked:!1},CIMSolidStroke:{capstyle:"Round",joinstyle:"Round",miterlimit:4,width:4,enable:!0,colorlocked:!1},CIMPictureStroke:{texturefilter:"Draft",capstyle:"Round",joinstyle:"Round",miterlimit:4,width:4,enable:!0,colorlocked:!1},CIMGradientStroke:{capstyle:"Round",joinstyle:"Round",miterlimit:4,width:4,enable:!0,colorlocked:!1},CIMSolidFill:{enable:!0,colorlocked:!1},CIMPictureFill:{offsetx:0,offsety:0,rotation:0,scalex:1,height:10,texturefilter:"Draft",enable:!0,colorlocked:!1},CIMHatchFill:{offsetx:0,offsety:0,rotation:0,separation:4,enable:!0,colorlocked:!1},CIMGeometricEffectAddControlPoints:{angletolerance:120},CIMGeometricEffectArrow:{arrowtype:"OpenEnded",width:5},CIMGeometricEffectBuffer:{size:1},CIMGeometricEffectCut:{begincut:1,endcut:1,middlecut:0,invert:!1},CIMGeometricEffectDashes:{customendingoffset:0,linedashending:"NoConstraint",offsetalongline:0},CIMGeometricEffectDonut:{method:"Mitered",option:"Accurate",width:2},CIMGeometricEffectJog:{angle:225,length:20,position:50},CIMGeometricEffectControlMeasureLine:{rule:"FullGeometry"},CIMGeometricEffectMove:{offsetx:1,offsety:-1},CIMGeometricEffectOffset:{method:"Square",offset:1,option:"Fast"},CIMGeometricEffectRotate:{angle:15},CIMGeometricEffectScale:{xscalefactor:1.15,yscalefactor:1.15},CIMGeometricEffectWave:{amplitude:2,period:3,seed:1,waveform:"Sinus"},CIMMarkerPlacementAlongLine:{customendingoffset:0,endings:"WithHalfGap",offsetalongline:0,placeperpart:!0,angletoline:!0,offset:0},CIMMarkerPlacementAtExtremities:{extremityplacement:"Both",offsetalongline:0,angletoline:!0,offset:0},CIMMarkerPlacementAtRatioPositions:{beginposition:0,endposition:0,flipfirst:!0,angletoline:!0,offset:0},CIMMarkerPlacementInsidePolygon:{gridangle:0,gridtype:"Fixed",offsetx:0,offsety:0,randomness:100,seed:0,shiftoddrows:!1,stepx:16,stepy:16,clipping:"ClipAtBoundary"},CIMMarkerPlacementOnLine:{relativeto:"LineMiddle",startpointoffset:0,angletoline:!0,offset:0},CIMMarkerPlacementOnVertices:{placeperpart:!0,placeoncontrolpoints:!0,placeonendpoints:!0,placeonregularvertices:!0,angletoline:!0,offset:0},CIMMarkerPlacementPolygonCenter:{method:"OnPolygon",offsetx:0,offsety:0,clipatboundary:!1},CIMAnimatedSymbolProperties:{playanimation:!1,reverseanimation:!1,randomizestarttime:!1,randomizestartseed:0,starttimeoffset:0,duration:3,endingduration:3,useendingduration:!1,repeattype:e.Loop,repeatdelay:0,easing:t.Linear},CIMSymbolAnimationSize:{tosize:10},CIMSymbolAnimationScale:{scalefactor:1},CIMSymbolAnimationColor:{tocolor:[255,255,255,1]},CIMSymbolAnimationTransparency:{totransparency:0},CIMSymbolAnimationRotation:{torotation:0},CIMSymbolAnimationOffset:{offsetx:0,offsety:0}};function n(e,t,r,o){return function(e){return"function"==typeof e}(e)?e(t,r,o):e}function a(e){return[e.r,e.g,e.b,e.a]}function i(e){let t=e.length;for(;t--;)if(!" /-,\n".includes(e.charAt(t)))return!1;return!0}function l(e,t){const r=[];let o=0,n=-1;do{if(n=e.indexOf("[",o),n>=o){if(n>o){const t=e.slice(o,n);r.push([t,null,i(t)])}if(o=n+1,n=e.indexOf("]",o),n>=o){if(n>o){const a=t[e.slice(o,n)];a&&r.push([null,a,!1])}o=n+1}}}while(-1!==n);if(o<e.length){const t=e.slice(o);r.push([t,null,i(t)])}return r}function s(e,t,r,o){let n="",a=null;for(const o of t){const[t,i,l]=o;if(t)l?a=t:(a&&(n+=a,a=null),n+=t);else{let t=i;null!=r&&(t=q(i,r));const o=e.attributes[t];o&&(a&&(n+=a,a=null),n+=o)}}return function(e,t){switch("string"!=typeof e&&(e=String(e)),t){case"LowerCase":return e.toLowerCase();case"Allcaps":return e.toUpperCase();default:return e}}(n,o)}function c(e,t,r,o,n,a,i=!0){const l=t/n,s=r/a,c=Math.ceil(l/2),f=Math.ceil(s/2);for(let r=0;r<a;r++)for(let u=0;u<n;u++){const m=4*(u+(i?a-r-1:r)*n);let M=0,y=0,C=0,d=0,p=0,I=0,h=0;const b=(r+.5)*s;for(let o=Math.floor(r*s);o<(r+1)*s;o++){const r=Math.abs(b-(o+.5))/f,n=(u+.5)*l,a=r*r;for(let r=Math.floor(u*l);r<(u+1)*l;r++){let i=Math.abs(n-(r+.5))/c;const l=Math.sqrt(a+i*i);l>=-1&&l<=1&&(M=2*l*l*l-3*l*l+1,M>0&&(i=4*(r+o*t),h+=M*e[i+3],C+=M,e[i+3]<255&&(M=M*e[i+3]/250),d+=M*e[i],p+=M*e[i+1],I+=M*e[i+2],y+=M))}}o[m]=d/y,o[m+1]=p/y,o[m+2]=I/y,o[m+3]=h/C}}function f(e){return e?[e[0],e[1],e[2],e[3]/255]:[0,0,0,0]}function u(e){return e.data?.symbol??null}function m(e){return"CIMVectorMarker"===e.type||"CIMPictureMarker"===e.type||"CIMBarChartMarker"===e.type||"CIMCharacterMarker"===e.type||"CIMPieChartMarker"===e.type||"CIMStackedBarChartMarker"===e.type}function M(e){return"CIMGradientStroke"===e.type||"CIMPictureStroke"===e.type||"CIMSolidStroke"===e.type}function y(e){return null!=e&&("CIMGradientFill"===e.type||"CIMHatchFill"===e.type||"CIMPictureFill"===e.type||"CIMSolidFill"===e.type||"CIMWaterFill"===e.type)}function C(e){return null!=e&&("CIMMarkerPlacementAlongLineRandomSize"===e.type||"CIMMarkerPlacementAlongLineSameSize"===e.type||"CIMMarkerPlacementAlongLineVariableSize"===e.type||"CIMMarkerPlacementAtExtremities"===e.type||"CIMMarkerPlacementAtMeasuredUnits"===e.type||"CIMMarkerPlacementAtRatioPositions"===e.type||"CIMMarkerPlacementOnLine"===e.type||"CIMMarkerPlacementOnVertices"===e.type)}const d=(e,t=0)=>null==e||isNaN(e)?t:e,p=(e,t)=>null!=e?e:t,I=(e,t)=>e??t,h=e=>e.tintColor?f(e.tintColor):[255,255,255,1],b=e=>{if(!e)return!1;for(const t of e)switch(t.type){case"CIMGeometricEffectBuffer":case"CIMGeometricEffectOffset":case"CIMGeometricEffectDonut":return!0}return!1};function g(){return import("./geometryEngineJSON.js").then((e=>e.g))}function k(e){if(!e)return"normal";switch(e.toLowerCase()){case"italic":return"italic";case"oblique":return"oblique";default:return"normal"}}function S(e){if(!e)return"normal";switch(e.toLowerCase()){case"bold":return"bold";case"bolder":return"bolder";case"lighter":return"lighter";default:return"normal"}}function P(e){let t="normal",r="normal";if(e){const o=e.toLowerCase();o.includes("italic")?t="italic":o.includes("oblique")&&(t="oblique"),o.includes("bold")?r="bold":o.includes("light")&&(r="lighter")}return{style:t,weight:r}}function w(e){return e.underline?"underline":e.strikethrough?"line-through":"none"}function x(e){if(!e)return null;switch(e.type){case"CIMPolygonSymbol":if(e.symbolLayers)for(const t of e.symbolLayers){const e=x(t);if(null!=e)return e}break;case"CIMTextSymbol":return x(e.symbol);case"CIMSolidFill":return e.color}return null}function L(e){if(e)switch(e.type){case"CIMPolygonSymbol":case"CIMLineSymbol":{const t=e.symbolLayers;if(t)for(const e of t){const t=L(e);if(null!=t)return t}break}case"CIMTextSymbol":return L(e.symbol);case"CIMSolidStroke":return e.color}}function A(e){if(e)switch(e.type){case"CIMPolygonSymbol":case"CIMLineSymbol":if(e.symbolLayers)for(const t of e.symbolLayers){const e=A(t);if(void 0!==e)return e}break;case"CIMTextSymbol":return A(e.symbol);case"CIMSolidStroke":case"CIMGradientStroke":case"CIMPictureStroke":return e.width}}function G(e){switch(e){case"Left":default:return"left";case"Right":return"right";case"Center":case"Justify":return"center"}}function E(e){switch(e){case"Top":default:return"top";case"Center":return"middle";case"Baseline":return"baseline";case"Bottom":return"bottom"}}function v(e){return(e?Object.keys(e):[]).map((t=>({name:t,alias:t,type:"string"==typeof e[t]?"esriFieldTypeString":"esriFieldTypeDouble"})))}const z=e=>e.includes("data:image/svg+xml");function F(e){if(!e)return null;switch(e.type){case"CIMPointSymbol":case"CIMTextSymbol":return"esriGeometryPoint";case"CIMLineSymbol":return"esriGeometryPolyline";case"CIMPolygonSymbol":return"esriGeometryPolygon";default:return null}}function T(e){return e?e.charAt(0).toLowerCase()+e.slice(1):e}function N(e,t,r,o,n,a,i=!0){const{infos:l}=a;let s=1,c=0,f=0,u=0,m=1;for(const{absoluteAnchorPoint:e,offsetX:t,offsetY:r,rotation:o,size:n,frameHeight:a,rotateClockWise:M,scaleSymbolsProportionally:y}of l)m=e?1:s,f=U(t,r,c,m,f),u=W(t,r,c,m,u),a&&(y||i)&&(s*=n/a),c=X(o,M,c);const M=U(o,n,c,m,f),y=W(o,n,c,m,u);return{size:e*s,rotation:X(t,r,c),offsetX:M,offsetY:y}}function O(e){if(null==e)return!1;if(Array.isArray(e))return e.every((e=>O(e)));switch(typeof e){case"string":return!!e;case"number":return!isNaN(e)}}function R(e,t){if("color"===t||"outlinecolor"===t||"backgroundcolor"===t||"borderlinecolor"===t||"tintcolor"===t)return[...r[t]];const n=o[e];if(!n)throw new Error(`InternalError: default value for type ${e}.`);return n[t]}function D(e){return"string"==typeof e?function(e){return e.split(" ").map((e=>Number(e)))}(e):e}function V(e){return e?.dashTemplate&&(e.dashTemplate=D(e.dashTemplate)),e}function B(e){if(null==e)return"Normal";switch(e.type){case"CIMTextSymbol":return e.textCase??"Normal";case"CIMPointSymbol":case"CIMLineSymbol":case"CIMPolygonSymbol":{const t=e.symbolLayers;if(!t)return"Normal";for(const e of t)if("CIMVectorMarker"===e.type)return B(e)}break;case"CIMVectorMarker":{const t=e.markerGraphics;if(!t)return"Normal";for(const e of t)if(e.symbol)return B(e.symbol)}}return"Normal"}function j(e){if(e)switch(e.type){case"CIMTextSymbol":return e.height;case"CIMPointSymbol":{let t=0;if(e.symbolLayers)for(const r of e.symbolLayers)if(r)switch(r.type){case"CIMCharacterMarker":case"CIMPictureMarker":case"CIMVectorMarker":case"CIMObjectMarker3D":case"CIMglTFMarker3D":{const e=r.size??o.CIMVectorMarker.size;e>t&&(t=e);break}}return t}case"CIMLineSymbol":case"CIMPolygonSymbol":{let t=0;if(e.symbolLayers)for(const r of e.symbolLayers)if(r)switch(r.type){case"CIMSolidStroke":case"CIMPictureStroke":case"CIMGradientStroke":{const e=r.width;null!=e&&e>t&&(t=e);break}case"CIMCharacterMarker":case"CIMPictureMarker":case"CIMVectorMarker":case"CIMObjectMarker3D":case"CIMglTFMarker3D":if(r.markerPlacement&&C(r.markerPlacement)){const e=r.size??o.CIMVectorMarker.size;e>t&&(t=e)}break;case"CIMPictureFill":{const e=r.height;null!=e&&e>t&&(t=e)}}return t}}}function q(e,t){if(null!==t){const r=t.get(e);return r?r.name:e}return e}function H(e){return e.map((e=>({...e,propertyName:T(e.propertyName)})))}function J(e){const t={};for(const r in e){const o=e[r];t[T(r)]=o}return t}function W(e,t,r,o,n){const a=r*Math.PI/180;if(a){const r=Math.cos(a);return(Math.sin(a)*e+r*t)*o+n}return t*o+n}function U(e,t,r,o,n){const a=r*Math.PI/180;return a?(Math.cos(a)*e-Math.sin(a)*t)*o+n:e*o+n}function X(e,t,r){return t?r-e:r+e}function Y(e,t,r){const o="Color"===r||"TintColor"===r||"ToColor"===r,n="Rotation"===r||"Angle"===r||"ToRotation"===r;let a=t[T(r)];if(null!=a&&(o?a=[a[0]/255,a[1]/255,a[2]/255,a[3]/255]:n&&(a*=Math.PI/180)),null==a&&(a=R(t.type,r.toLowerCase()),null!=a&&(o?a=[a[0]/255,a[1]/255,a[2]/255,a[3]]:n&&(a*=Math.PI/180))),null!=t.primitiveName){const i=e[t.primitiveName];if(null!=i){const e=i[r];null==e||("string"==typeof e||"number"==typeof e||Array.isArray(e)?(a=e,null!=a&&(o?a=[a[0]/255,a[1]/255,a[2]/255,a[3]/255]:n&&(a*=Math.PI/180))):(a={valueExpressionInfo:e,defaultValue:a},null!=a&&(o?a={type:"Process",op:"ArcadeColor",value:a}:n&&(a={type:"Process",op:"Divide",left:a,right:180/Math.PI}))))}}if(null==a)throw new Error(`Failed to derive a value or an expression for "${r}".`);return a}export{L as A,A as B,k as C,S as D,b as E,g as F,Y as G,p as H,a as I,h as J,R as K,I as L,O as M,D as N,c as O,n as P,M as a,y as b,C as c,B as d,V as e,J as f,q as g,H as h,m as i,v as j,l as k,s as l,F as m,f as n,N as o,j as p,d as q,o as r,z as s,u as t,T as u,w as v,P as w,G as x,E as y,x as z};
