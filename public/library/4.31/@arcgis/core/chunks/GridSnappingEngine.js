/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.31/esri/copyright.txt for details.
*/
import{_ as t}from"./tslib.es6.js";import r from"../core/Accessor.js";import{L as e}from"./Logger.js";import{d as i}from"./mathUtils.js";import{n as s}from"./unitUtils.js";import{property as o}from"../core/accessorSupport/decorators/property.js";import"../core/lang.js";import{subclass as p}from"../core/accessorSupport/decorators/subclass.js";import{z as n}from"./vec3.js";import{isLoadedOrLoadFor as a,project as m}from"../geometry/projection.js";import{getClosestDenormalizedXToReference as l}from"../geometry/support/normalizeUtils.js";import{d as c}from"./scaleUtils.js";import{g as j,m as u,a as d}from"./gridUtils.js";import{c as g,b as f}from"./normalizedPoint.js";import{g as y}from"./snappingUtils.js";import{L as h,I as S}from"./SnappingManager.js";import"../core/Handles.js";import"./maybe.js";import"./metadata.js";import"./utils.js";import"./handleUtils.js";import"./ObservableBase.js";import"./tracking.js";import"../core/scheduling.js";import"../core/promiseUtils.js";import"../core/Error.js";import"../config.js";import"./jsonMap.js";import"./assets.js";import"../request.js";import"../kernel.js";import"../core/urlUtils.js";import"../core/JSONSupport.js";import"./ensureType.js";import"./vec3f64.js";import"./common.js";import"./SimpleObservable.js";import"../geometry/Extent.js";import"../geometry/Geometry.js";import"./reader.js";import"../geometry/SpatialReference.js";import"./writer.js";import"../geometry/Point.js";import"../core/accessorSupport/decorators/cast.js";import"../geometry/support/webMercatorUtils.js";import"../geometry/Multipoint.js";import"./zmUtils.js";import"../geometry/Polygon.js";import"./coordsUtils.js";import"./Axis.js";import"./extentUtils.js";import"./boundsUtils.js";import"./aaBoundingRect.js";import"../geometry/Polyline.js";import"./projectBuffer.js";import"./geodesicConstants.js";import"../geometry/support/GeographicTransformation.js";import"../geometry/support/GeographicTransformationStep.js";import"./zscale.js";import"./normalizeUtilsCommon.js";import"../geometry/support/jsonUtils.js";import"./simplify.js";import"../geometry.js";import"./typeUtils.js";import"./utils9.js";import"./utils10.js";import"../geometry/support/geodesicUtils.js";import"./dehydratedPoint.js";import"./elevationInfoUtils.js";import"./unitConversionUtils.js";import"./lengthUtils.js";import"./vec2.js";import"./vec2f64.js";import"./vec4.js";import"./vec4f64.js";import"./plane.js";import"./mat3f64.js";import"./mat4f64.js";import"./quatf64.js";import"./mathUtils2.js";import"./sphere.js";import"./mat4.js";import"./ray.js";import"./mat3.js";import"./geometry2dUtils.js";import"../core/reactiveUtils.js";import"./asyncUtils.js";import"../core/Collection.js";import"../core/Evented.js";import"./shared.js";import"../core/sql.js";import"./timeUtils.js";import"./date.js";import"./locale.js";import"./datetime.js";import"../rest/support/Query.js";import"./enumeration.js";import"./DataLayerSource.js";import"../layers/support/Field.js";import"./domains.js";import"../layers/support/CodedValueDomain.js";import"../layers/support/Domain.js";import"../layers/support/InheritedDomain.js";import"../layers/support/RangeDomain.js";import"./fieldType.js";import"./FullTextSearch.js";import"../core/Clonable.js";import"./spatialRelationships.js";import"../rest/support/StatisticDefinition.js";import"../time/TimeExtent.js";import"./InputManager.js";import"./Queue.js";import"../core/signal.js";import"./keybindings.js";import"./utils6.js";import"./Version.js";import"./Version2.js";import"./Settings2.js";import"../Color.js";import"./colorUtils.js";import"./RightAngleSnappingHint.js";import"../views/interactive/snapping/SnappingOptions.js";import"../views/interactive/snapping/FeatureSnappingLayerSource.js";import"./screenUtils.js";import"./viewUtils.js";let v=class extends r{constructor(t){super(t),this.options=null}destroy(){this._set("options",null)}get grid(){return this.view.grid}get effectiveViewRotation(){return this.grid?.rotateWithMap?0:i(this.view.rotation??0)}get gridRotation(){return i(this.grid?.rotation??0)}get gridCenter(){const{spatialReference:t,grid:r}=this;if(!r||!t||!a(r.center.spatialReference,t))return null;try{const e=m(r.center,t),i=t.isWrappable&&null!=this.view?.center?l(e.x,this.view.center.x,t):e.x;return g(i,e.y,e.z)}catch(t){return e.getLogger(this).errorOnce("Grid Snapping - Failed to project grid center.",t),null}}get offsetScaleFactor(){const{pixelsPerStride:t,grid:r}=this;if(!r||!t)return 1;const{majorLineInterval:e,dynamicScaling:i}=r;return e<1?null:j(e,t,i)}get spatialReference(){return this.view.spatialReference}get gridMetersPerStride(){const{grid:t}=this;return t?s(t.spacing,t.units,"meters"):null}get viewMetersPerPixel(){const{viewMetersPerSRUnit:t}=this;return null==t?null:t*c(this.view.scale,this.view.spatialReference)}get viewMetersPerSRUnit(){const{spatialReference:t}=this.view;return this.gridCenter?u(this.gridCenter[0],this.gridCenter[1],t):null}get pixelsPerStride(){const{gridMetersPerStride:t,viewMetersPerPixel:r}=this;return r&&t?t/r:null}get updating(){return null!=this.grid&&null!=this.spatialReference&&null==this.viewMetersPerSRUnit}async fetchCandidates(t,r,e){const{options:i,view:s}=this;if(!i?.effectiveGridEnabled||!s.grid||e.feature?.attributes&&y in e.feature.attributes)return[];const o=e.coordinateHelper.arrayToPoint(t),p=i.distance*("touch"===e.pointer?i.touchSensitivityMultiplier:1);return this.fetchCandidatesSync(o,p)}fetchCandidatesSync(t,r){const e=[],{grid:i,effectiveViewRotation:s,gridRotation:o,gridCenter:p,viewMetersPerPixel:n,viewMetersPerSRUnit:l,offsetScaleFactor:c,spatialReference:j,gridMetersPerStride:u,pixelsPerStride:f}=this;if(!(i&&n&&l&&p&&j&&c&&u&&f))return e;if(!i.dynamicScaling&&f<d)return e;if(!a(t.spatialReference,j))return e;const y=m(t,j),v=g(y.x,y.y,y.z),R=U(v,-o,p,-s),x=u/l*c,b=w(R,x,p),{shouldSnapX:C,shouldSnapY:z}=P(b,R,r,n,l);if(!C&&!z)return[];const D=g((C?b:R)[0],(z?b:R)[1]),E=U(D,o,p,s),F=U(b,o,p,s);if(z){const t=M(b,R,x,"y"),r=U(t,o,p,s);e.push(new h({lineStart:F,lineEnd:r,targetPoint:E,isDraped:!1}))}if(C){const t=M(b,R,x,"x"),r=U(t,o,p,s);e.push(new h({lineStart:F,lineEnd:r,targetPoint:E,isDraped:!1}))}return C&&z&&e.push(new S(E,e[0],e[1],!1)),e}};t([o({constructOnly:!0})],v.prototype,"view",void 0),t([o()],v.prototype,"options",void 0),t([o()],v.prototype,"grid",null),t([o()],v.prototype,"effectiveViewRotation",null),t([o()],v.prototype,"gridRotation",null),t([o()],v.prototype,"gridCenter",null),t([o()],v.prototype,"offsetScaleFactor",null),t([o()],v.prototype,"spatialReference",null),t([o()],v.prototype,"gridMetersPerStride",null),t([o()],v.prototype,"viewMetersPerPixel",null),t([o()],v.prototype,"viewMetersPerSRUnit",null),t([o()],v.prototype,"pixelsPerStride",null),t([o()],v.prototype,"updating",null),v=t([p("esri.views.interactive.snapping.GridSnappingEngine")],v);const U=(t,r,e,i)=>{const s=f(t[0],t[1],t[2]);return n(s,n(s,s,e,r),e,i)},w=(t,r,e)=>{const i=(t[0]-e[0])/r,s=(t[1]-e[1])/r,o=Math.trunc(i),p=Math.trunc(s),n=Math.round(i%1),a=Math.round(s%1),m=e[0]+(o+n)*r,l=e[1]+(p+a)*r;return g(m,l)},P=(t,r,e,i,s)=>{if(i<=0)return{shouldSnapX:!1,shouldSnapY:!1};const o=(t[0]-r[0])/i,p=(t[1]-r[1])/i;return{shouldSnapX:Math.abs(o*s)<e,shouldSnapY:Math.abs(p*s)<e}},M=(t,r,e,i)=>{if("y"===i){const i=r[0]>t[0]?1:-1;return g(t[0]+e*i,t[1])}const s=r[1]>t[1]?1:-1;return g(t[0],t[1]+e*s)};export{v as GridSnappingEngine};
