/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.31/esri/copyright.txt for details.
*/
import{t as e,d as t,G as r,P as s}from"./Transformation2D.js";import{p as n,v as o,m as a}from"./converterAPI.js";import{m as i,a as u,c}from"./SideCalculator2D-CsYV5zVZ.js";class m{getOperatorType(){return 10500}accelerateGeometry(e,t,r){return!1}canAccelerateGeometry(e){return!1}supportsCurves(){return!0}getNearestCoordinate(s,n,o,a){if(n.isNAN()&&e("NAN xy coordinates are not allowed"),s.isEmpty())return i();switch(s.getGeometryType()){case r.enumPoint:return this.pointGetNearestVertex(s,n);case r.enumMultiPoint:return this.multiVertexGetNearestVertex(s,n);case r.enumPolyline:case r.enumPolygon:return this.multiPathGetNearestCoordinate(s,n,o,a);default:t("")}}getNearestVertex(s,n){if(n.isNAN()&&e("NAN xy coordinates are not allowed"),s.isEmpty())return i();switch(s.getGeometryType()){case r.enumPoint:return this.pointGetNearestVertex(s,n);case r.enumMultiPoint:case r.enumPolyline:case r.enumPolygon:return this.multiVertexGetNearestVertex(s,n);default:t("")}}getNearestVertices(s,n,o,a){if(0===a&&e(""),n.isNAN()&&e("NAN xy coordinates are not allowed"),s.isEmpty())return[];switch(s.getGeometryType()){case r.enumPoint:return this.pointGetNearestVertices(s,n,o,a);case r.enumMultiPoint:case r.enumPolyline:case r.enumPolygon:return this.multiVertexGetNearestVertices(s,n,o,a);default:t("")}}multiPathGetNearestCoordinate(t,i,m,l){if(t.getGeometryType()===r.enumPolygon&&m){const e=new n;t.queryEnvelope(e);const r=o(null,e,!1);let s;if(s=a(t,i,l?0:r),0!==s){const e=u(i,-1,0);return l&&(e.m_bRightSide=!0),e}}const g=t.querySegmentIterator(),y=new s;let N=-1,d=-1,h=Number.MAX_VALUE,p=0;for(;g.nextPath();)for(;g.hasNextSegment();){const e=g.nextSegment(),t=e.getClosestCoordinate(i,!1),r=e.getCoord2D(t),n=s.sqrDistance(r,i);n<h?(p=1,y.assign(r),N=g.getStartPointIndex(),d=g.getPathIndex(),h=n):n===h&&p++}-1===N&&e("");const x=u(y,N,Math.sqrt(h));if(l)if(t.getGeometryType()!==r.enumPolygon){let e=!1;if(p>1){const r=c(t,i,N,d);e=0!==r&&3!==r}else{g.resetToVertex(N,d);const t=g.nextSegment();e=0!==c(t,i)}x.m_bRightSide=e}else m||0!==a(t,i,0)&&(x.m_bRightSide=!0);return x}pointGetNearestVertex(e,t){const r=e.getXY(),n=s.distance(r,t);return u(r,0,n)}multiVertexGetNearestVertex(e,t){const r=e.getAttributeStreamRef(0),n=e.getPointCount();let o=-1;const a=new s;let i=Number.MAX_VALUE;const c=new s;for(let e=0;e<n;e++){r.queryPoint2D(2*e,c);const n=s.sqrDistance(c,t);n<i&&(a.assign(c),o=e,i=n)}return u(a,o,Math.sqrt(i))}pointGetNearestVertices(e,t,r,n){const o=[];if(0!==n){const n=r*r,a=e.getXY(),i=s.sqrDistance(a,t);i<=n&&o.push(u(a,0,Math.sqrt(i)))}return o}multiVertexGetNearestVertices(e,t,r,n){const o=[];if(0!==n){const a=e.getAttributeStreamRef(0),i=e.getPointCount();o.length=n+1;const c=r*r;for(let e=0;e<i;e++){const r=a.read(2*e),n=a.read(2*e+1),i=t.x-r,m=t.y-n,l=i*i+m*m;l<=c&&o.push(u(s.construct(r,n),e,Math.sqrt(l)))}o.sort(((e,t)=>e.m_distance-t.m_distance))}return o.slice(0,n)}}export{m as O};
