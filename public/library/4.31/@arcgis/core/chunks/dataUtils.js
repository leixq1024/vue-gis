/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.31/esri/copyright.txt for details.
*/
import"../geometry.js";import{h as t,R as e}from"../core/lang.js";import{L as n}from"./Logger.js";import{d as r}from"./mathUtils.js";import{throwIfAborted as o}from"../core/promiseUtils.js";import{l}from"./unitUtils.js";import i from"../geometry/Extent.js";const a=()=>n.getLogger("esri.views.2d.engine.flow.dataUtils");async function s(n,r,l,i){const s=performance.now(),f=function(t,e){const n=function(t,e,n,r){if(0===r)return t;const o=Math.round(3*r),l=new Array(2*o+1);let i=0;for(let t=-o;t<=o;t++){const e=Math.exp(-t*t/(r*r));l[t+o]=e,i+=e}for(let t=-o;t<=o;t++)l[t+o]/=i;const a=new Float32Array(t.length);for(let r=0;r<n;r++)for(let n=0;n<e;n++){let i=0,s=0;for(let a=-o;a<=o;a++){if(n+a<0||n+a>=e)continue;const c=l[a+o];i+=c*t[2*(r*e+(n+a))],s+=c*t[2*(r*e+(n+a))+1]}a[2*(r*e+n)]=i,a[2*(r*e+n)+1]=s}const s=new Float32Array(t.length);for(let t=0;t<e;t++)for(let r=0;r<n;r++){let i=0,c=0;for(let s=-o;s<=o;s++){if(r+s<0||r+s>=n)continue;const f=l[s+o];i+=f*a[2*((r+s)*e+t)],c+=f*a[2*((r+s)*e+t)+1]}s[2*(r*e+t)]=i,s[2*(r*e+t)+1]=c}return s}(e.data,e.width,e.height,t.smoothing);return t.interpolate?(t,r)=>{const o=Math.floor(t),l=Math.floor(r);if(o<0||o>=e.width)return[0,0];if(l<0||l>=e.height)return[0,0];const i=t-o,a=r-l,s=o,c=l,f=o<e.width-1?o+1:o,u=l<e.height-1?l+1:l,h=n[2*(c*e.width+s)],d=n[2*(c*e.width+f)],m=n[2*(u*e.width+s)],w=n[2*(u*e.width+f)],p=n[2*(c*e.width+s)+1],g=n[2*(c*e.width+f)+1];return[(h*(1-a)+m*a)*(1-i)+(d*(1-a)+w*a)*i,(p*(1-a)+n[2*(u*e.width+s)+1]*a)*(1-i)+(g*(1-a)+n[2*(u*e.width+f)+1]*a)*i]}:(t,r)=>{const o=Math.round(t),l=Math.round(r);return o<0||o>=e.width||l<0||l>=e.height?[0,0]:[n[2*(l*e.width+o)],n[2*(l*e.width+o)+1]]}}(r,l),u=performance.now(),h=function(t,n,r,o){const l=[],i=new e,a=1/Math.max(t.lineCollisionWidth,1),s=Math.round(r*a),f=Math.round(o*a),u=new Int32Array(s*f);for(let t=0;t<u.length;t++)u[t]=-1;const h=[];for(let e=0;e<o;e+=t.lineSpacing)for(let n=0;n<r;n+=t.lineSpacing)h.push({x:n,y:e,sort:i.getFloat()});h.sort(((t,e)=>t.sort-e.sort));for(const{x:e,y:r}of h)if(i.getFloat()<t.density){const o=c(t,n,e,r,l.length,u,s,f,a);if(o.length<2)continue;l.push(o)}return l}(r,f,l.width,l.height),d=performance.now(),m=function(t){const n=new e,r=t.reduce(((t,e)=>t+e.length),0),o=new Float32Array(4*r),l=new Array(t.length);let i=0,a=0;for(const e of t){const t=i;for(const t of e)o[4*i]=t.x,o[4*i+1]=t.y,o[4*i+2]=t.t,o[4*i+3]=t.speed,i++;l[a++]={startVertex:t,numberOfVertices:e.length,totalTime:e[e.length-1].t,timeSeed:n.getFloat()}}return{lineVertices:o,lineDescriptors:l}}(h),w=performance.now(),p="Streamlines"===n?function(t){const{lineVertices:e,lineDescriptors:n}=t;let r=0,o=0;for(const t of n)r+=2*t.numberOfVertices,o+=6*(t.numberOfVertices-1);const l=new Float32Array(9*r),i=new Uint32Array(o);let a=0,s=0;function c(t,e,n,r,o,i,s,c){const f=9*a;let u=0;l[f+u++]=t,l[f+u++]=e,l[f+u++]=1,l[f+u++]=n,l[f+u++]=i,l[f+u++]=s,l[f+u++]=r/2,l[f+u++]=o/2,l[f+u++]=c,a++,l[f+u++]=t,l[f+u++]=e,l[f+u++]=-1,l[f+u++]=n,l[f+u++]=i,l[f+u++]=s,l[f+u++]=-r/2,l[f+u++]=-o/2,l[f+u++]=c,a++}for(const t of n){const{totalTime:n,timeSeed:r}=t;let o=null,l=null,f=null,u=null,h=null,d=null;for(let m=0;m<t.numberOfVertices;m++){const w=e[4*(t.startVertex+m)],p=e[4*(t.startVertex+m)+1],g=e[4*(t.startVertex+m)+2],y=e[4*(t.startVertex+m)+3];let x=null,M=null,A=null,I=null;if(m>0){x=w-o,M=p-l;const t=Math.sqrt(x*x+M*M);if(x/=t,M/=t,m>1){let t=x+h,e=M+d;const n=Math.sqrt(t*t+e*e);t/=n,e/=n;const r=Math.min(1/(t*x+e*M),10);t*=r,e*=r,A=-e,I=t}else A=-M,I=x;null!==A&&null!==I&&(c(o,l,f,A,I,n,r,y),i[s++]=a-2,i[s++]=a,i[s++]=a-1,i[s++]=a,i[s++]=a+1,i[s++]=a-1)}o=w,l=p,f=g,h=x,d=M,u=y}c(o,l,f,-d,h,n,r,u)}return{vertexData:l,indexData:i}}(m):function(t){const{lineVertices:e,lineDescriptors:n}=t;let r=0,o=0;for(const t of n){const e=t.numberOfVertices-1;r+=4*e*2,o+=6*e*2}const l=new Float32Array(16*r),i=new Uint32Array(o);let a,s,c,f,u,h,d,m,w,p,g,y,x,M,A=0,I=0;function V(t,e){let n=w+g,r=p+y;const o=Math.sqrt(n*n+r*r);n/=o,r/=o;const V=w*n+p*r;n/=V,r/=V;let F=g+x,v=y+M;const D=Math.sqrt(F*F+v*v);F/=D,v/=D;const b=g*F+y*v;F/=b,v/=b,function(t,e,n,r,o,i,a,s,c,f,u,h,d,m){const w=16*A;let p=0;for(const g of[1,2])for(const y of[1,2,3,4])l[w+p++]=t,l[w+p++]=e,l[w+p++]=n,l[w+p++]=r,l[w+p++]=a,l[w+p++]=s,l[w+p++]=c,l[w+p++]=f,l[w+p++]=g,l[w+p++]=y,l[w+p++]=d,l[w+p++]=m,l[w+p++]=o/2,l[w+p++]=i/2,l[w+p++]=u/2,l[w+p++]=h/2,A++}(a,s,c,f,-r,n,u,h,d,m,-v,F,t,e),i[I++]=A-8,i[I++]=A-7,i[I++]=A-6,i[I++]=A-7,i[I++]=A-5,i[I++]=A-6,i[I++]=A-4,i[I++]=A-3,i[I++]=A-2,i[I++]=A-3,i[I++]=A-1,i[I++]=A-2}function F(t,e,n,r,o,l){if(w=g,p=y,g=x,y=M,null==w&&null==p&&(w=g,p=y),null!=u&&null!=h){x=t-u,M=e-h;const n=Math.sqrt(x*x+M*M);x/=n,M/=n}null!=w&&null!=p&&V(o,l),a=u,s=h,c=d,f=m,u=t,h=e,d=n,m=r}function v(t,e){w=g,p=y,g=x,y=M,null==w&&null==p&&(w=g,p=y),null!=w&&null!=p&&V(t,e)}for(const t of n){a=null,s=null,c=null,f=null,u=null,h=null,d=null,m=null,w=null,p=null,g=null,y=null,x=null,M=null;const{totalTime:n,timeSeed:r}=t;for(let o=0;o<t.numberOfVertices;o++)F(e[4*(t.startVertex+o)],e[4*(t.startVertex+o)+1],e[4*(t.startVertex+o)+2],e[4*(t.startVertex+o)+3],n,r);v(n,r)}return{vertexData:l,indexData:i}}(m),g=performance.now();return t("esri-2d-profiler")&&(a().info("I.1","_createFlowFieldFromData (ms)",Math.round(u-s)),a().info("I.2","_getStreamlines (ms)",Math.round(d-u)),a().info("I.3","createAnimatedLinesData (ms)",Math.round(w-d)),a().info("I.4","create{Streamlines|Particles}Mesh (ms)",Math.round(g-w)),a().info("I.5","createFlowMesh (ms)",Math.round(g-s)),a().info("I.6","Mesh size (bytes)",p.vertexData.buffer.byteLength+p.indexData.buffer.byteLength)),await Promise.resolve(),o(i),p}function c(t,e,n,r,o,l,i,a,s){const c=[];let f=n,u=r,h=0,[d,m]=e(f,u);d*=t.velocityScale,m*=t.velocityScale;const w=Math.sqrt(d*d+m*m);let p,g;c.push({x:f,y:u,t:h,speed:w});for(let n=0;n<t.verticesPerLine;n++){let[n,r]=e(f,u);n*=t.velocityScale,r*=t.velocityScale;const d=Math.sqrt(n*n+r*r);if(d<t.minSpeedThreshold)return c;const m=n/d,w=r/d;if(f+=m*t.segmentLength,u+=w*t.segmentLength,h+=t.segmentLength/d,Math.acos(m*p+w*g)>t.maxTurnAngle)return c;if(t.collisions){const t=Math.round(f*s),e=Math.round(u*s);if(t<0||t>i-1||e<0||e>a-1)return c;const n=l[e*i+t];if(-1!==n&&n!==o)return c;l[e*i+t]=o}c.push({x:f,y:u,t:h,speed:d}),p=m,g=w}return c}function f(t,e){const n=e.pixels,{width:o,height:l}=e,i=new Float32Array(o*l*2),a=e.mask||new Uint8Array(o*l*2);if(e.mask||a.fill(255),"vector-uv"===t)for(let t=0;t<o*l;t++)i[2*t]=n[0][t],i[2*t+1]=-n[1][t];else if("vector-magdir"===t)for(let t=0;t<o*l;t++){const e=n[0][t],o=r(n[1][t]),l=Math.cos(o-Math.PI/2),a=Math.sin(o-Math.PI/2);i[2*t]=l*e,i[2*t+1]=a*e}return{data:i,mask:a,width:o,height:l}}async function u(e,n,r,o,s,c){const f=performance.now(),u=l(n.spatialReference);if(!u){const l=await h(e,n,r,o,s,c);return t("esri-2d-profiler")&&a().info("I.7","loadImagery, early exit (ms)",Math.round(performance.now()-f)),t("esri-2d-profiler")&&a().info("I.9","Number of parts",1),l}const[d,m]=u.valid,w=m-d,p=Math.ceil(n.width/w),g=n.width/p,y=Math.round(r/p);let x=n.xmin;const M=[],A=performance.now();for(let t=0;t<p;t++){const t=new i({xmin:x,xmax:x+g,ymin:n.ymin,ymax:n.ymax,spatialReference:n.spatialReference});M.push(h(e,t,y,o,s,c)),x+=g}const I=await Promise.all(M);t("esri-2d-profiler")&&a().info("I.8","All calls to _fetchPart (ms)",Math.round(performance.now()-A)),t("esri-2d-profiler")&&a().info("I.9","Number of parts",I.length);const V={data:new Float32Array(r*o*2),mask:new Uint8Array(r*o),width:r,height:o};let F=0;for(const t of I){for(let e=0;e<t.height;e++)for(let n=0;n<t.width;n++)F+n>=r||(V.data[2*(e*r+F+n)]=t.data[2*(e*t.width+n)],V.data[2*(e*r+F+n)+1]=t.data[2*(e*t.width+n)+1],V.mask[e*r+F+n]=t.mask[e*t.width+n]);F+=t.width}return t("esri-2d-profiler")&&a().info("I.10","loadImagery, general exit (ms)",Math.round(performance.now()-f)),V}async function h(t,e,n,r,o,l){const i={requestProjectedLocalDirections:!0,signal:l};if(null!=o&&(i.timeExtent=o),"imagery"===t.type){await t.load({signal:l});const o=t.rasterInfo.dataType,a=await t.fetchImage(e,n,r,i);return null==a?.pixelData?.pixelBlock?{data:new Float32Array(n*r*2),mask:new Uint8Array(n*r),width:n,height:r}:f(o,a.pixelData.pixelBlock)}await t.load({signal:l});const a=t.serviceRasterInfo.dataType,s=await t.fetchPixels(e,n,r,i);return null==s?.pixelBlock?{data:new Float32Array(n*r*2),mask:new Uint8Array(n*r),width:n,height:r}:f(a,s.pixelBlock)}export{s as c,u as l};
