/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.31/esri/copyright.txt for details.
*/
import t from"../core/Error.js";import{h as e}from"../core/lang.js";import{L as i}from"./Logger.js";import{A as s,f as r,c as n,e as a,l as o,v as h,h as u,i as d,j as l}from"./definitions.js";import{g as c}from"./UpdateTracking2D.js";import{g as p,a as _}from"./dataViewUtils.js";import{T as x,c as f}from"./enums.js";import{F as g}from"./Program.js";import{a as b,T as y}from"./Texture.js";import{T as m}from"./TileContainer.js";class T{constructor(t,e,i){this._texture=null,this._lastTexture=null,this._fbos={},this.texelSize=4;const{buffer:s,pixelType:r,textureOnly:n}=t,a=p(r);this.blockIndex=i,this.pixelType=r,this.size=e,this.textureOnly=n,n||(this.data=new a(s)),this._resetRange()}destroy(){this._texture?.dispose();for(const t in this._fbos){const e=this._fbos[t];e&&("0"===t&&e.detachColorTexture(),e.dispose()),this._fbos[t]=null}this._texture=null}get _textureDesc(){const t=new b;return t.wrapMode=x.CLAMP_TO_EDGE,t.samplingMode=f.NEAREST,t.dataType=this.pixelType,t.width=this.size,t.height=this.size,t}setData(t,e,i){const s=c(t),r=this.data,n=s*this.texelSize+e;!r||n>=r.length||(r[n]=i,this.dirtyStart=Math.min(this.dirtyStart,s),this.dirtyEnd=Math.max(this.dirtyEnd,s))}getData(t,e){if(null==this.data)return null;const i=c(t)*this.texelSize+e;return!this.data||i>=this.data.length?null:this.data[i]}getTexture(t){return this._texture??this._initTexture(t)}getFBO(t,e=0){if(!this._fbos[e]){const i=0===e?this.getTexture(t):this._textureDesc;this._fbos[e]=new g(t,i)}return this._fbos[e]}get hasDirty(){const t=this.dirtyStart;return this.dirtyEnd>=t}updateTexture(s,r){try{const n=this.dirtyStart,a=this.dirtyEnd;if(!this.hasDirty)return;e("esri-2d-update-debug")&&console.debug(`Version[${r}] AttributeStoreView.updateTexture`,{start:n,end:a,firstBytes:new Uint8Array(this.data.buffer.slice(0,16)),block:this}),this._resetRange();const o=this.data.buffer,h=this.getTexture(s),u=4,d=(n-n%this.size)/this.size,l=(a-a%this.size)/this.size,c=d,_=this.size,x=l,f=d*this.size*u,g=(_+x*this.size)*u-f,b=p(this.pixelType),y=new b(o,f*b.BYTES_PER_ELEMENT,g),m=this.size,T=x-c+1;if(T>this.size)return void i.getLogger("esri.views.2d.engine.webgl.AttributeStoreView").error(new t("mapview-webgl","Out-of-bounds index when updating AttributeData"));h.updateData(0,0,c,m,T,y)}catch(t){}}update(t){const{data:e,start:i,end:s}=t;if(null!=e&&null!=this.data){const s=this.data,r=i*this.texelSize;for(let i=0;i<e.length;i++){const n=1<<i%this.texelSize;t.layout&n&&(s[r+i]=e[i])}}this.dirtyStart=Math.min(this.dirtyStart,i),this.dirtyEnd=Math.max(this.dirtyEnd,s)}resize(t,e){const i=this.size;if(this.size=e,this.textureOnly)return void(i!==this.size&&(this._lastTexture=this._texture,this._texture=null));const s=p(this.pixelType);this.destroy(),this.data=new s(t.buffer)}_resetRange(){this.dirtyStart=2147483647,this.dirtyEnd=0}_initTexture(t){const e=new y(t,this._textureDesc,this.data??void 0);if(null!=this._lastTexture&&this._fbos[0]){const i=this._lastTexture.descriptor.width,s=this._lastTexture.descriptor.height,r=this._lastTexture.descriptor.dataType,n=this._lastTexture.descriptor.pixelFormat,a=this.getFBO(t),o=_(r),h=new(p(r))(new ArrayBuffer(i*s*o*this.texelSize)),u=t.getBoundFramebufferObject(),{x:d,y:l,width:c,height:x}=t.getViewport();t.bindFramebuffer(a),a.readPixels(0,0,i,s,n,r,h),e.updateData(0,0,0,2*i,s/2,h),t.setViewport(d,l,c,x),t.bindFramebuffer(u)}return this.destroy(),this._texture=e,this._texture}}class w{constructor(){this.size=0,this._pendingAttributeUpdates=[],this._version=0,this._epoch=0,this._locked=!1}_initialize(t){if(!t)throw new Error("InternalError: initArgs must be defined");const i=t.blockDescriptors;if(this.size=t.blockSize,e("esri-2d-update-debug")&&console.debug("AttributeStoreView.initialize",{message:t}),null==this._data)this._data=i.map(((t,e)=>null!=t?new T(t,this.size,e):null));else for(let t=0;t<this._data.length;t++){const e=this._data[t],s=i[t];null!=s&&(null==e?this._data[t]=new T(s,this.size,t):e.resize(s,this.size))}}destroy(){for(const t of this._data??[])t?.destroy();this._defaultTexture?.dispose(),this._defaultTexture=null,this._pendingAttributeUpdates=[]}isEmpty(){return null==this._data}getBlock(t){return null==this._data?null:this._data[t]}setLabelMinZoom(t,e){this.setData(t,s.FilterFlags,1,e)}setLocalTimeOrigin(t,e){this.setData(t,s.LocalTimeOrigin,0,e)}getLabelMinZoom(t){return this.getData(t,s.FilterFlags,1,255)}getFilterFlags(t){return this.getData(t,s.FilterFlags,0,0)}getVisualVariableData(t,e){return this.getData(t,s.VV,e,0)}getData(t,e,i,s){if(!this._data)return 0;const r=this._data[e];if(null==r)return 0;const n=r.getData(t,i);return null!=n?n:s}setData(t,e,i,s){this._data[e].setData(t,i,s)}lockTextureUploads(){this._locked=!0}unlockTextureUploads(){this._locked=!1,this.update()}requestUpdate(t){this._version=t.version,this._pendingAttributeUpdates.push(t),e("esri-2d-update-debug")&&console.debug(`Version[${this._version}] AttributeStoreView.requestUpdate`,{message:t})}get currentEpoch(){return this._epoch}update(){if(this._locked)return;const t=this._pendingAttributeUpdates;this._pendingAttributeUpdates=[];for(const i of t){const{blockData:t,initArgs:s,sendUpdateEpoch:r,version:n}=i;e("esri-2d-update-debug")&&console.debug(`Version[${this._version}] Epoch[${r}] AttributeStoreView.applyUpdate`),this._version=n,this._epoch=r,null!=s&&this._initialize(s);const a=this._data;for(let i=0;i<t.length;i++){const s=t[i],r=a[i];null!=r&&null!=s&&(e("esri-2d-update-debug")&&console.debug(`Version[${this._version}] CpuBlock[${i}] AttributeStoreView.update`,{block:s}),r.update(s))}}}getUniforms(t){return{filterFlags:{texture:this._getTexture(t,s.FilterFlags),unit:r},animation:{texture:this._getTexture(t,s.Animation),unit:n},gpgpu:{texture:this._getTexture(t,s.GPGPU),unit:a},localTimeOrigin:{texture:this._getTexture(t,s.LocalTimeOrigin),unit:o},visualVariableData:{texture:this._getTexture(t,s.VV),unit:h},dataDriven0:{texture:this._getTexture(t,s.DD0),unit:u},dataDriven1:{texture:this._getTexture(t,s.DD1),unit:d},dataDriven2:{texture:this._getTexture(t,s.DD2),unit:l},size:this.size}}_getTexture(t,e){const i=this._data?.[e];return i?(i.updateTexture(t,this._version),i.getTexture(t)):this._getDefaultTexture(t)}_getDefaultTexture(t){if(null==this._defaultTexture){const e=new b;e.wrapMode=x.CLAMP_TO_EDGE,e.samplingMode=f.NEAREST,e.width=1,e.height=1,this._defaultTexture=new y(t,e,new Uint8Array(4))}return this._defaultTexture}}class D extends m{constructor(t){super(t),this._statisticsByLevel=new Map,this._entityIndex=new Map,this.attributeView=new w}destroy(){this.children.forEach((t=>t.destroy())),this.removeAllChildren(),this.attributeView.destroy()}doRender(t){t.context.capabilities.enable("textureFloatLinear"),super.doRender(t)}get hasAnimations(){for(const t of this.children)if(t.hasAnimations)return!0;return!1}_reindexAndUpdateFeaturesIfNeeded(){if(this.hasAnimations&&(this._reindexFeatures(),0!==this.attributeView.size))for(const t of this._entityIndex.values())t.dirty&&(this.attributeView.setData(t.displayId,s.LocalTimeOrigin,0,t.firstIndexed),t.dirty=!1)}restartAnimation(t){const e=this._entityIndex.get(t);if(!e)return;const i=performance.now()/1e3;e.firstIndexed=i,e.dirty=!0}restartAllAnimations(){const t=performance.now()/1e3;for(const[e,i]of this._entityIndex)i.firstIndexed=t,i.dirty=!0}_reindexFeatures(){const t=performance.now()/1e3;for(const e of this.children)for(const i of e.entityIds){const{objectId:e}=i;let s=this._entityIndex.get(e);s||(s={objectId:e,displayId:0,firstIndexed:t,lastIndexed:0,dirty:!0},this._entityIndex.set(e,s)),s.lastIndexed=t,s.displayId=i.displayId}for(const[e,i]of this._entityIndex)t-i.lastIndexed>60&&this._entityIndex.delete(e)}_updateAttributeView(){this.attributeView.update(),this._reindexAndUpdateFeaturesIfNeeded()}createRenderParams(t){const e=super.createRenderParams(t);return e.attributeView=this.attributeView,e.instanceStore=this._instanceStore,e.statisticsByLevel=this._statisticsByLevel,e}}function A(t){return t}class z{constructor(t,e,i){this._instanceId=t,this.techniqueRef=e,this._input=i}get instanceId(){return this._instanceId}createMeshInfo(t){return{id:this._instanceId,techniqueType:this.techniqueRef.type,inputParams:t,optionalAttributes:this._input.optionalAttributes}}getInput(){return this._input}setInput(t){this._input=t}}export{D as A,z as F,A as c};
