/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.31/esri/copyright.txt for details.
*/
import{_ as e}from"./tslib.es6.js";import t from"../core/Error.js";import{L as a}from"./Logger.js";import{N as r}from"../core/lang.js";import{subclass as i}from"../core/accessorSupport/decorators/subclass.js";import{c as s,a as n}from"./generateRendererUtils.js";import{m as o,a as l,g as u,b as m}from"./utils13.js";import{open as p}from"../core/workers/workers.js";import{d as c,i as d,l as y}from"./utils3.js";import h from"../Graphic.js";import{timeout as f,throwIfAborted as g}from"../core/promiseUtils.js";import{property as w}from"../core/accessorSupport/decorators/property.js";import{r as F}from"./date.js";import{i as S}from"./arcgisLayerUrl.js";import{isTimeOnlyField as v,l as x,isNumericField as L,isDateOnlyField as _}from"../layers/support/fieldUtils.js";import V from"../request.js";import{fromJSON as z}from"../renderers/support/jsonUtils.js";import{p as q}from"./utils9.js";import{e as T}from"./executeQuery.js";import b,{Q as E}from"../rest/support/Query.js";import C from"../rest/support/StatisticDefinition.js";import{D as N,F as M,a as I,A as k,B as O}from"./BinsQuery.js";import{JSONSupport as A}from"../core/JSONSupport.js";import{e as Q}from"./enumeration.js";import{getArcadeForPredominantCategory as P,getSQLForPredominantCategoryName as j}from"../smartMapping/statistics/support/predominanceUtils.js";import{b as B}from"./maybe.js";import{whenOnce as G}from"../core/reactiveUtils.js";import{t as R}from"./quantizationUtils.js";import{k as D}from"./fieldType.js";import{summaryStatistics as J,uniqueValues as $,histogram as U,classBreaks as Z,heatmapStatistics as W}from"./statsWorker.js";import H from"../core/Loadable.js";import{e as K,a as X,b as Y,c as ee,d as te,u as ae,f as re,h as ie,i as se,j as ne,k as oe,l as le,m as ue,n as me,o as pe,p as ce,q as de,g as ye}from"./utils16.js";import{e as he,h as fe,r as ge,b as we,m as Fe}from"./utils11.js";import{o as Se}from"./viewpointUtils.js";import ve from"../rest/support/FeatureSet.js";class xe{constructor(){this.connection=null}async open(e){this.connection=await p("statsWorker",{strategy:"distributed",signal:e})}destroy(){this.connection?.close()}static getInstance(){return xe.instance||(xe.instance=new xe),xe.instance}async summaryStatistics(e,a){if(!this.connection)throw new t("worker-client:summary-statistics","connection is required");return this.connection.invoke("summaryStatistics",{attribute:e,features:a})}async uniqueValues(e,a){if(!this.connection)throw new t("worker-client:unique-values","connection is required");return this.connection.invoke("uniqueValues",{attribute:e,features:a})}async classBreaks(e,a){if(!this.connection)throw new t("worker-client:class-breaks","connection is required");return this.connection.invoke("classBreaks",{attribute:e,features:a})}async histogram(e,a){if(!this.connection)throw new t("worker-client:histogram","connection is required");return this.connection.invoke("histogram",{attribute:e,features:a})}async heatmapStatistics(e,a){if(!this.connection)throw new t("worker-client:heatmap-statistics","connection is required");return this.connection.invoke("heatmapStatistics",{attribute:e,features:a})}}function Le(e,t,a){if("classBreaks"===e.type){const r=z(e);return{classBreaks:r.classBreakInfos.map(((e,i)=>(0===i&&null!=t&&(e.minValue=t),i===r.classBreakInfos.length-1&&null!=a&&(e.maxValue=a),{minValue:e.minValue,maxValue:e.maxValue,label:e.label}))),normalizationTotal:r.normalizationTotal}}const{uniqueValueInfos:r}=e;return{uniqueValues:r?.map(((e,i)=>(0===i&&null!=t&&(e.value=t),i===r.length-1&&null!=a&&(e.value=a),{count:e.count,value:e.value,label:e.label})))??[]}}let _e=class extends A{constructor(e){super(e),this.classificationDefinition=null,this.where=null}};e([w({json:{name:"classificationDef",write:!0}})],_e.prototype,"classificationDefinition",void 0),e([w({type:String,json:{write:!0}})],_e.prototype,"where",void 0),_e=e([i("esri.rest.support.GenerateRendererParameters")],_e);const Ve=_e;let ze=class extends A{constructor(e){super(e),this.type="unique-value-definition",this.attributeField=null,this.attributeField2=null,this.attributeField3=null,this.fieldDelimiter=null}get uniqueValueFields(){const e=[];return this.attributeField&&e.push(this.attributeField),this.attributeField2&&e.push(this.attributeField2),this.attributeField3&&e.push(this.attributeField3),e}};e([Q({uniqueValueDef:"unique-value-definition"})],ze.prototype,"type",void 0),e([w()],ze.prototype,"attributeField",void 0),e([w()],ze.prototype,"attributeField2",void 0),e([w()],ze.prototype,"attributeField3",void 0),e([w({json:{write:!0}})],ze.prototype,"fieldDelimiter",void 0),e([w({json:{write:!0}})],ze.prototype,"uniqueValueFields",null),ze=e([i("esri.rest.support.UniqueValueDefinition")],ze);const qe=ze;let Te=class extends H{constructor(e){super(e)}};e([w({constructOnly:!0})],Te.prototype,"layer",void 0),e([w()],Te.prototype,"geometryType",void 0),e([w()],Te.prototype,"objectIdField",void 0),e([w()],Te.prototype,"supportsSQLExpression",void 0),e([w()],Te.prototype,"hasQueryEngine",void 0),e([w()],Te.prototype,"minScale",void 0),e([w()],Te.prototype,"maxScale",void 0),e([w()],Te.prototype,"fullExtent",void 0),Te=e([i("esri.smartMapping.support.adapters.LayerAdapter")],Te);const be=Te;let Ee=null,Ce=class extends be{constructor(){super(...arguments),this._hasLocalSource=!1,this.adapterName="in-memory-layer-adapter"}destroy(){this.workerClient?.destroy()}async _waitForLayerViewUpdate(e){if(!e)throw new t(`${this.adapterName}:insufficient-data", "layerView is required to fetch the features`);const r=new AbortController,i=G((()=>!e.updating),r.signal);await f(i,5e3,r).catch((e=>{throw a.getLogger(this).warn("LayerView is taking too long to update. Aborting fetch from layerView."),e}))}async _fetchFeatureSetFromMemory(e,a,r){const i=this.layer;if(this._hasLocalSource&&"queryFeatures"in i)return i.queryFeatures(e);if(!a)throw new t(`${this.adapterName}:insufficient-data`,"view is required to fetch the features from layerView");const s=await a.whenLayerView(this.layer);return await this._waitForLayerViewUpdate(s),s.queryFeatures(e,{signal:r})}async _fetchFeaturesFromMemory(e,a,r,i){const s=this.layer,n="json"===i;if(this._hasLocalSource&&"queryFeatures"in s){const e=await s.queryFeatures(a);return n?K(e.features):e.features}if(await this._waitForLayerViewUpdate(e),n&&"queryFeaturesJSON"in e&&e.queryFeaturesJSON){const{features:t}=await e.queryFeaturesJSON(a,{signal:r});return t}if(!("queryFeatures"in e))throw new t(`${this.adapterName}:not-supported`,"'queryFeatures' is not supported on the layerView");const o=await e.queryFeatures(a,{signal:r});return n?K(o.features):o.features}_fetchFeaturesForStats(e,t){return c({field:e.field,field2:e.field2,field3:e.field3,normalizationField:e.normalizationField,valueExpression:e.valueExpression}).then((a=>this.getSampleFeatures({sampleSize:-1,view:e.view,returnGeometry:e.returnGeometry,filter:e.filter,requiredFields:a,signal:e.signal},t)))}async _summaryStatsFromClientQuery(e,t){const{view:a,signal:r}=e,i=X(this,e,t),s=await this._fetchFeatureSetFromMemory(i,a,r),n=Y(s,d(t)||v(t));return he(n,e.outStatisticTypes)}async _getNormalizationTotalFromMemory(e,a,r){const{featuresJSON:i,graphics:s,layerView:n,query:o}=a,l={include:["sum"]},u=(!i&&!s&&n&&"querySummaryStatistics"in n?await n.querySummaryStatistics(o,{field:e},{signal:r}):i?await this.workerClient.summaryStatistics({field:e,outStatisticTypes:l},i):await J({attribute:{field:e,outStatisticTypes:l},features:s??[]})).sum;if(null==u)throw new t(`${this.adapterName}:invalid`,"invalid normalizationTotal");return u}async _summaryStatsFromMemory(e,t){const{view:a,field:r,valueExpression:i,normalizationType:s,signal:n}=e,o={field:r,valueExpression:i,normalizationType:s,normalizationField:e.normalizationField,normalizationTotal:e.normalizationTotal,minValue:e.minValue,maxValue:e.maxValue,outStatisticTypes:e.outStatisticTypes},{featuresJSON:l,graphics:u,layerView:m,query:p,fieldInfos:c}=await this._processStatsFromMemoryParams({...e,layerViewFunc:"querySummaryStatistics"});return i&&a&&(l||u)&&(o.fieldType=t?.type?D.toJSON(t.type):null,o.viewInfoParams=ee(a),o.timeZone=a.timeZone,o.fieldInfos=c),"percent-of-total"===s&&null==e.normalizationTotal&&(o.normalizationTotal=await this._getNormalizationTotalFromMemory(r,{featuresJSON:l,graphics:u,layerView:m,query:p},n)),!l&&!u&&m&&"querySummaryStatistics"in m?m.querySummaryStatistics(p,o,{signal:n}):l?this.workerClient.summaryStatistics(o,l):J({attribute:o,features:u})}async _getFilteredFeatures(e,t){let a=[];if("intersects"===t?.spatialRelationship){const{intersect:r}=await import("../geometry/geometryEngineAsync.js"),i=null!=t.geometry?t.geometry:null;for(const t of e){const e=null!=t.geometry?t.geometry:null;e&&i&&await r(e,i)&&a.push(t)}}else a=e;return e.length&&"declaredClass"in e[0]&&"esri.Graphic"===e[0].declaredClass?{graphics:a}:{featuresJSON:a}}async _processStatsFromMemoryParams(e){const{features:t,filter:a}=e;if(t?.length)return this._getFilteredFeatures(t,a);const{view:r,field:i,field2:s,field3:n,normalizationField:o,valueExpression:l,layerViewFunc:u,signal:m}=e;let p=e.returnGeometry;if(null==p&&l){if(!Ee){const{arcadeUtils:e}=await x();Ee=e}const e=Ee.hasGeometryOperations(l);e&&await Ee.enableGeometryOperations(),p=e}let d=null,y=null,h=null,f=null,g=null;if(r)try{const e="subtype-sublayer"===this.layer.type?this.layer.parent:this.layer;d=await r.whenLayerView(e),y=null!=u&&u in d&&"function"==typeof d[u]}catch{y=!1}if(y)try{await this._waitForLayerViewUpdate(d);const e=await c({field:i,field2:s,field3:n,normalizationField:o,valueExpression:l});te(this,e,d).length?y=!1:(h=this.layer.createQuery(),h.outFields=e,h.returnGeometry=!1,ae(h,a)),d.suspended&&(y=!1)}catch{y=!1}return y||(f=await this._fetchFeaturesForStats({field:i,field2:s,field3:n,valueExpression:l,normalizationField:o,returnGeometry:p,filter:a,view:r,signal:m},"json"),g=(await c({valueExpression:l})).map((e=>this.getField(e)?.toJSON())).filter(Boolean)),{layerView:d,query:h,featuresJSON:f,fieldInfos:g}}async _uvFromClientQuery(e,t){const{view:a,signal:r}=e,i=re(this,e),s=await this._fetchFeatureSetFromMemory(i,a,r),n=await ie(s,{layer:this,field:e.field,field2:e.field2,field3:e.field3,fieldDelimiter:y,view:e.view,signal:e.signal});return fe(n,t,e.returnAllCodedValues,y)}async _uvFromMemory(e,t){const{view:a,field:r,valueExpression:i,returnAllCodedValues:s,signal:n}=e,{featuresJSON:o,graphics:l,layerView:u,query:m,fieldInfos:p}=await this._processStatsFromMemoryParams({...e,layerViewFunc:"queryUniqueValues"}),c={field:r,field2:e.field2,field3:e.field3,fieldDelimiter:y,valueExpression:i,domains:t,returnAllCodedValues:s};return i&&a&&(o||l)&&(c.viewInfoParams=ee(a),c.timeZone=a.timeZone,c.fieldInfos=p),!o&&!l&&u&&"queryUniqueValues"in u?u.queryUniqueValues(m,c,{signal:n}):o?this.workerClient.uniqueValues(c,o):$({attribute:c,features:l})}_histogramForField(e){let a=null;return a=null!=e.minValue&&null!=e.maxValue?Promise.resolve({min:e.minValue,max:e.maxValue}):this.summaryStatistics({...e,outStatisticTypes:{include:["min","max","count"]}}).then((e=>{if(!e.count)throw new t(`${this.adapterName}:insufficient-data`,"Either the layer has no features or none of the features have data for the field");return{min:e.min,max:e.max}})),a.then((t=>se(this,{min:t.min,max:t.max},e.field,e.numBins??void 0,e.view,e.filter,e.signal)))}async _histogramFromMemory(e){const{view:t,field:a,valueExpression:r,signal:i}=e,{featuresJSON:s,graphics:n,layerView:o,query:l,fieldInfos:u}=await this._processStatsFromMemoryParams({...e,layerViewFunc:"queryHistogram"}),m={field:a,valueExpression:r,normalizationType:e.normalizationType,normalizationField:e.normalizationField,normalizationTotal:e.normalizationTotal,minValue:e.minValue,maxValue:e.maxValue,standardDeviationInterval:e.standardDeviationInterval,classificationMethod:e.classificationMethod,numBins:e.numBins};return r&&t&&(s||n)&&(m.viewInfoParams=ee(t),m.timeZone=t.timeZone,m.fieldInfos=u),"percent-of-total"===e.normalizationType&&null==e.normalizationTotal&&(m.normalizationTotal=await this._getNormalizationTotalFromMemory(a,{featuresJSON:s,graphics:n,layerView:o,query:l},i)),!s&&!n&&o&&"queryHistogram"in o?o.queryHistogram(l,m,{signal:i}):s?this.workerClient.histogram(m,s):U({attribute:m,features:n})}_classBreaksFromInterpolation(e){const{minValue:t,maxValue:a}=e,r=e.numClasses||5,i=[],s=(a-t)/r;for(let e=0;e<r;e++){const a=t+e*s;i.push({minValue:a,maxValue:a+s})}i[r-1].maxValue=a;const n={classBreaks:i,normalizationTotal:e.normalizationTotal},o=ge(n,e.classificationMethod);return Promise.resolve(o)}async _classBreaksFromMemory(e){const{view:t,field:a,valueExpression:r,signal:i}=e,{featuresJSON:s,graphics:n,layerView:o,query:l,fieldInfos:u}=await this._processStatsFromMemoryParams({...e,layerViewFunc:"queryClassBreaks"}),m={field:a,valueExpression:r,normalizationType:e.normalizationType,normalizationField:e.normalizationField,normalizationTotal:e.normalizationTotal,minValue:e.minValue,maxValue:e.maxValue,standardDeviationInterval:e.standardDeviationInterval,classificationMethod:e.classificationMethod,numClasses:e.numClasses};return r&&t&&(s||n)&&(m.viewInfoParams=ee(t),m.timeZone=t.timeZone,m.fieldInfos=u),"percent-of-total"===e.normalizationType&&null==e.normalizationTotal&&(m.normalizationTotal=await this._getNormalizationTotalFromMemory(a,{featuresJSON:s,graphics:n,layerView:o,query:l},i)),!s&&!n&&o&&"queryClassBreaks"in o?o.queryClassBreaks(l,m,{signal:i}):s?this.workerClient.classBreaks(m,s):Z({attribute:m,features:n})}async _heatmapStatsFromMemory(e){const{view:t,field:a,radius:r,signal:i}=e;B(t,"InMemoryLayerAdapter: must have a view");try{const a=await t.whenLayerView(this.layer);if("queryHeatmapStatistics"in a&&!a.updating&&!e.filter)return await a.queryHeatmapStatistics({field:e.field,radius:e.radius})}catch{g(i)}const{featuresJSON:s,graphics:n}=await this._processStatsFromMemoryParams({...e,returnGeometry:!0}),o=new E({extent:t.extent,tolerance:"2d"===t.type?t.state.resolution:t.pixelSizeAt?.(t.center)}),l={field:a,radius:r,transform:R(o),spatialReference:t.spatialReference?.toJSON(),size:t.size};return s?.length||n?.length?s?this.workerClient.heatmapStatistics(l,s):W({attribute:l,features:n}):{min:null,max:null}}getField(e=""){return this.layer.getField(e)}getFieldUsageInfo(e){return this.getField(e)?{supportsLabelingInfo:!0,supportsRenderer:!0,supportsPopupTemplate:!0,supportsLayerQuery:!0,supportsStatistics:!0}:null}getFieldDomain(e,t){return this.layer.getFieldDomain(e,t)}createQuery(){return this.layer.createQuery()}async summaryStatistics(e){const{field:a,valueExpression:r,sqlExpression:i,features:s,view:n}=e,o=a?this.getField(a):null,l=!!r,u="3d"===n?.type;if(!r&&i&&!this.supportsSQLExpression)throw new t(`${this.adapterName}:not-supported`,"Layer does not support standardized SQL expression for queries");return l||s||u?this._summaryStatsFromMemory(e,o):this._summaryStatsFromClientQuery(e,o)}async uniqueValues(e){const{valueExpression:a,sqlExpression:r,features:i,view:s}=e,n=await ne(e,this),o=!!a,l="3d"===s?.type;if(!a&&r&&!this.supportsSQLExpression)throw new t(`${this.adapterName}:not-supported`,"Layer does not support standardized SQL expression for queries");return o||i||l?this._uvFromMemory(e,n):this._uvFromClientQuery(e,n)}async histogram(e){const{features:a,valueExpression:r,normalizationType:i,sqlExpression:s}=e,n=a||!!r;if(!r&&s&&!this.supportsSQLExpression)throw new t(`${this.adapterName}:not-supported`,"Layer does not support standardized SQL expression for queries");return n||i?this._histogramFromMemory(e):this._histogramForField(e)}async classBreaks(e){return!1!==e.analyzeData?this._classBreaksFromMemory(e):this._classBreaksFromInterpolation(e)}async queryFeatureCount(e){const{whereClause:a,view:r,signal:i}=e;if(!r)throw new t(`${this.adapterName}:insufficient-data`,"view is required to fetch the features from layerView");const s=this.layer.createQuery();s.where=o(s.where,a);const n=await r.whenLayerView(this.layer);return await G((()=>!n.updating),i),n.queryFeatureCount(s,{signal:i})}async generateRenderer(e,a){throw new t(`${this.adapterName}:not-supported`,"Layer does not support generateRenderer operation")}async predominantCategories(e){const{fields:t,view:a,signal:r,filter:i}=e,s=P(t),n=await this._uvFromMemory({valueExpression:s,view:a,signal:r,filter:i});return oe(n.uniqueValueInfos,t)}async heatmapStatistics(e){return this._heatmapStatsFromMemory(e)}async getSampleFeatures(e,a){const{view:i,sampleSize:s,requiredFields:n,returnGeometry:o,filter:l,signal:u}=e,m=this.layer.createQuery();if(m.outSpatialReference=i?.spatialReference,m.returnGeometry=!!o,m.outFields=n,ae(m,l),!i)throw new t(`${this.adapterName}:not-supported`,"view is required to get sample features for Layer");const p=await i.whenLayerView(this.layer);if(te(this,n,p).length)throw new t(`${this.adapterName}:not-supported`,"Required fields need to be passed in the outFields for Layer");const c=await this._fetchFeaturesFromMemory(p,m,u,a),d=null!=s&&s>0&&s<=c.length?s:c.length;return r(c,d,1)}load(e){const t=this.layer.load(e).then((async t=>{this.geometryType=t.geometryType,this.objectIdField=t.objectIdField,this.supportsSQLExpression="stream"===t.type||!!t.capabilities?.query?.supportsSqlExpression,this.minScale=t.minScale,this.maxScale=t.maxScale,this.fullExtent="fullExtent"in t?t.fullExtent:t.parent?.fullExtent,this._hasLocalSource=!1,this.hasQueryEngine=!0,this.workerClient=xe.getInstance(),await this.workerClient.open(e.signal)}));return this.addResolvingPromise(t),Promise.resolve(this)}};e([w({constructOnly:!0})],Ce.prototype,"layer",void 0),Ce=e([i("esri.smartMapping.support.adapters.InMemoryLayerAdapter")],Ce);const Ne=Ce;function Me(e,t=!1){return"string"!=typeof e?e:(t?new Date(`1970-01-01T${e}Z`):new Date(e)).getTime()}let Ie=class extends Ne{constructor(){super(...arguments),this.adapterName="feature-layer-adapter"}_isStatsSupportedOnService(){const e=this.layer;if(!e.capabilities?.query?.supportsStatistics||"multipatch"===this.geometryType&&!S(e.url)&&e.version<10.5)throw new t(`${this.adapterName}:not-supported`,"Layer does not support statistics query");return Promise.resolve()}_fetchFeaturesFromService(e,t){return this.layer.queryFeatures(e,{signal:t}).then((e=>e.features))}_fetchFeaturesJSONFromService(e,t){return this._fetchFeaturesFromService(e,t).then(K)}_summaryStatsFromGenRend(e){const t=e.normalizationType,a=e.normalizationField;return this.classBreaks({field:e.field,numClasses:5,classificationMethod:"standard-deviation",standardDeviationInterval:.25,normalizationType:t,normalizationField:"field"===t?a:void 0,minValue:e.minValue,maxValue:e.maxValue,filter:e.filter,signal:e.signal}).then((t=>{let a,r,i;if(t.classBreakInfos?.some((e=>(e.hasAvg&&(a=e),!!a))),a){const e=a.maxValue-a.minValue;r=a.minValue+e/2,i=4*e}const s={min:t.minValue,max:t.maxValue,avg:r,stddev:i};return he(s,e.outStatisticTypes)}))}async _summaryStatsFromServiceQuery(e,t){await this._isStatsSupportedOnService(),"percent-of-total"===e.normalizationType&&(e.normalizationTotal=await this._getNormalizationTotal(e.field,e.normalizationType,e.filter));const a=d(t)||v(t),r=X(this,e,t),i=await this.layer.queryFeatures(r,{signal:e.signal}),s=Y(i,a);return he(s,e.outStatisticTypes)}_uvFromGenRenderer(e,t){const a=e.field??void 0,r=new qe({attributeField:a}),i=new Ve({classificationDefinition:r});return this.generateRenderer(i,e.signal).then((e=>{const t={},r=this.getField(a);return e.uniqueValues.forEach((e=>{let a=e.value;null!=a&&""!==a&&("string"!=typeof a||""!==a.trim()&&"<null>"!==a.toLowerCase())||(a=null),null==t[a]?t[a]={count:e.count,data:L(r)&&a?Number(a):a}:t[a].count=t[a].count+e.count})),{count:t}})).then((a=>fe(a,[t],e.returnAllCodedValues)))}async _uvFromServiceQuery(e,t){return this._isStatsSupportedOnService().then((()=>this.layer.queryFeatures(re(this,e),{signal:e.signal}))).then((t=>ie(t,{layer:this,field:e.field,field2:e.field2,field3:e.field3,fieldDelimiter:y,view:e.view,signal:e.signal}))).then((a=>fe(a,t,e.returnAllCodedValues,y)))}_getNormalizationTotal(e,t,a,r){return e&&"percent-of-total"===t?this.summaryStatistics({field:e,outStatisticTypes:{include:["sum"]},filter:a,signal:r}).then((e=>e.sum)):Promise.resolve(null)}_getQueryParamsForExpr(e,t){const a=e.valueExpression||e.sqlExpression,r=e.signal;if(!a){const{field:a,normalizationType:i,normalizationField:s}=e,n=a?this.getField(a):null,o=d(n)||v(n),u={field:a,normalizationType:i,normalizationField:s,normalizationTotal:t,layer:this};return{sqlExpression:o?le(this,n):ue(u),sqlWhere:o?null:e.sqlWhere||l({field:a,normalizationType:i,normalizationField:s}),filter:e.filter,signal:r}}return{valueExpression:e.valueExpression,sqlExpression:e.sqlExpression,sqlWhere:e.sqlWhere,filter:e.filter,signal:r}}_getDataRange(e,t,a){return null!=t&&null!=a?Promise.resolve({min:t,max:a}):this.summaryStatistics({...e,outStatisticTypes:{include:["min","max"]}}).then((e=>({min:e.min,max:e.max})))}_histogramForExpr(e){return this._getNormalizationTotal(e.field,e.normalizationType,e.filter,e.signal).then((t=>{const a=this._getQueryParamsForExpr(e,t);return this._getDataRange(a,e.minValue,e.maxValue).then((r=>{const i=r.min,s=r.max;if(null==i||null==s)return{bins:[],minValue:i,maxValue:s,normalizationTotal:t};const n=e.numBins||me,l=we(i,s,n),u=function(e,t,a){const r=[],i=t.length;return t.forEach(((t,s)=>{const[n,l]=t;let u=null;u=0!==s||a?s!==i-1||a?o(`${e} >= ${n}`,`${e} ${s===i-1?" <= ":" < "} ${l}`):`${e} >= ${n}`:`${e} < ${l}`,r.push("WHEN ("+u+") THEN "+(s+1))})),["CASE",r.join(" "),"ELSE 0","END"].join(" ")}(a.sqlExpression,l,null!=e.minValue&&null!=e.maxValue),m=new C({statisticType:"count",outStatisticFieldName:"countOFExpr",onStatisticField:"1"}),p=this.layer.createQuery();return p.where=o(p.where,a.sqlWhere),p.sqlFormat="standard",p.outStatistics=[m],p.groupByFieldsForStatistics=[u],p.orderByFields=[u],ae(p,e.filter),this._isStatsSupportedOnService().then((()=>this.layer.queryFeatures(p,{signal:a.signal}))).then((e=>pe(e,i,s,n,t)))}))}))}async _getBinQueryParams(e,a,r,i){const{field:s,sqlExpression:n,normalizationField:o,classificationMethod:l,normalizationType:m}=e,p=s?this.getField(s):null,c=v(p),d=_(p)||c,y=e.numBins||me;if(d){if(m||l)throw new t(`${this.adapterName}:not-supported`,"NormalizationType and classificationMethod are not supported for date-only and time-only fields");const e=(r-a)/y/1e3,i=e/86400;return new N({field:s,expression:n,interval:{units:c?"seconds":"days",value:Math.ceil(c?e:i)},start:a,end:r})}if("defined-interval"===l)return new M({field:s,expression:n,normalizationField:o,normalizationTotal:i,normalizationType:m,interval:e.definedInterval??Math.ceil((r-a)/y),start:m?null:a,end:m?null:r,normalizationMinValue:m?a:null,normalizationMaxValue:m?r:null});if("manual"===l)throw new t(`${this.adapterName}:not-supported`,"Layer does not support manual classificationMethod");if("natural-breaks"===l||"quantile"===l||"standard-deviation"===l){const r=ue({field:s,normalizationField:o,normalizationTotal:i,normalizationType:m,layer:this}),l=null!==e.minValue&&null!==e.maxValue?u(r,e.minValue,e.maxValue):void 0,p=await this._binParamsFromGenRend(e,l);if(!p.intervals)throw new t(`${this.adapterName}:invalid`,"Invalid intervals returned from generate renderer");const c=[a,...p.intervals.map((e=>e[1]))];return new I({field:m?null:s,expression:m?r:n,boundaries:c})}return new k({field:s,normalizationField:o,normalizationTotal:i,normalizationType:m,expression:n,bins:y,start:m?null:a,end:m?null:r,normalizationMinValue:m?a:null,normalizationMaxValue:m?r:null})}async _histogramFromQueryBins(e){const{field:t,normalizationType:a,minValue:r,maxValue:i,filter:s,view:n,signal:l}=e,u=await this._getNormalizationTotal(t,a,s,l),m=this._getQueryParamsForExpr(e,u),{min:p,max:c}=await this._getDataRange(m,r,i);if(null==p||null==c)return{bins:[],minValue:p,maxValue:c,normalizationTotal:u};const d="countOFExpr",y=new C({statisticType:"count",outStatisticFieldName:d,onStatisticField:"1"}),h=this.layer.createQuery(),f=o(h.where,m.sqlWhere),g="lowerBoundary",w="upperBoundary",S=new O({binParameters:await this._getBinQueryParams(e,p,c,u),outStatistics:[y],binOrder:e.sortOrder,where:f,lowerBoundaryAlias:g,upperBoundaryAlias:w,outTimeZone:n?.timeZone?F(n?.timeZone):null});ae(S,s);const x=await this.layer.queryBins(S,{signal:l}),L=v(t?this.getField(t):null);return{bins:x.features.map((e=>({minValue:Me(e.attributes[g],L),maxValue:Me(e.attributes[w],L),count:e.attributes[d]}))),minValue:p,maxValue:c,normalizationTotal:u}}_binParamsFromGenRend(e,t){const{field:a,normalizationType:r,normalizationField:i,signal:s}=e,n=l({field:a,normalizationType:r,normalizationField:i}),u=new Ve({classificationDefinition:Fe({field:a,normalizationType:r,normalizationField:i,classificationMethod:e.classificationMethod,standardDeviationInterval:e.standardDeviationInterval,definedInterval:e.definedInterval,breakCount:e.numBins||me}),where:o(n,t)});return this.generateRenderer(u,s).then((e=>{const{normalizationTotal:t,classBreaks:s}=e;return ce({field:a,normalizationType:r,normalizationField:i,normalizationTotal:t,classBreaks:s,where:n,layer:this})}))}_classBreaksFromGenRend(e){const{field:t,normalizationType:a,normalizationField:r,normalizationTotal:i,signal:s}=e,n=l({field:t,normalizationType:a,normalizationField:r}),m=ue({field:t,normalizationType:a,normalizationField:r,normalizationTotal:i,layer:this}),p=u(m,e.minValue,e.maxValue),c=Fe({field:t,normalizationType:a,normalizationField:r,classificationMethod:e.classificationMethod,standardDeviationInterval:e.standardDeviationInterval,breakCount:e.numClasses||5}),d=new Ve({classificationDefinition:c});return d.where=o(n,p),this.generateRenderer(d,s).then((t=>ge(t,e.classificationMethod)))}async summaryStatistics(e){const{field:a,normalizationType:r,sqlExpression:i,view:s,features:n,useFeaturesInView:o}=e,l=a?this.getField(a):null,u=d(l)||v(l),m=e.valueExpression||i,p=m&&!i,c=this._hasLocalSource||n||o,y=s&&"3d"===s.type;if(c||p)return p||n||o||y?this._summaryStatsFromMemory(e,l):this._summaryStatsFromClientQuery(e,l);if(!this.supportsSQLExpression&&(u||m||"natural-log"===r||"square-root"===r))throw new t(`${this.adapterName}:not-supported`,"Layer does not support standardized SQL expression for queries");return(r&&!this.supportsSQLExpression?this._summaryStatsFromGenRend(e):this._summaryStatsFromServiceQuery(e,l)).catch((()=>(g(e.signal),this._summaryStatsFromMemory(e,l))))}async uniqueValues(e){const{valueExpression:t,sqlExpression:a,features:r,useFeaturesInView:i,signal:s}=e,n=t&&(!a||!this.supportsSQLExpression),o=this._hasLocalSource||r||i||n,l=e.view,u=l&&"3d"===l.type,m=await ne(e,this);return o?n||r||i||u?this._uvFromMemory(e,m):this._uvFromClientQuery(e,m):this._uvFromServiceQuery(e,m).catch((t=>(g(s),!e.field||e.field2||e.field3||e.filter?t:this._uvFromGenRenderer(e,m[0])))).catch((()=>(g(s),u?this._uvFromMemory(e,m):this._uvFromClientQuery(e,m))))}async histogram(e){const{field:a,normalizationType:r,normalizationField:i,classificationMethod:s,view:n,filter:o,signal:l}=e,m=a?this.getField(a):null,p=d(m)||v(m),c=e.valueExpression||e.sqlExpression,y=c&&!e.sqlExpression,h=this._hasLocalSource||e.features||e.useFeaturesInView||y,f=this.supportsSQLExpression,g=!s||"equal-interval"===s,w=e.minValue,F=e.maxValue,S=null!=w&&null!=F,x=e.numBins||me;if(h)return this._histogramFromMemory(e);if(this.layer.capabilities?.operations?.supportsQueryBins&&e.useQueryBins)return this._histogramFromQueryBins(e);if((c||f)&&g){if(!f&&(c||"natural-log"===r||"square-root"===r))throw new t(`${this.adapterName}:not-supported`,"Layer does not support standardized SQL expression for queries");return this._histogramForExpr(e)}if(p&&g)throw new t(`${this.adapterName}:not-supported`,"Normalization and date field are not allowed when layer does not support standardized SQL expression for queries");return r||!g?this._binParamsFromGenRend(e).then((s=>{if(!S)return se(this,s,a,x,n,o,l);if(w>s.max||F<s.min)throw new t(`${this.adapterName}:insufficient-data`,"Range defined by 'minValue' and 'maxValue' does not intersect available data range of the field");if(g)return se(this,{min:w,max:F,sqlExpr:s.sqlExpr,excludeZerosExpr:s.excludeZerosExpr},a,x,n,o,l);{const t={field:a,normalizationType:r,normalizationField:i,normalizationTotal:s.normTotal,layer:this},m=ue(t),p=u(m,w,F);return this._binParamsFromGenRend(e,p).then((e=>se(this,e,a,x,n,o,l)))}})):this._histogramForField(e)}async classBreaks(e){const t=!1!==e.analyzeData,a=this._hasLocalSource||e.features||e.useFeaturesInView||e.valueExpression||e.filter;return t&&a?this._classBreaksFromMemory(e):(t?this._classBreaksFromGenRend(e):this._classBreaksFromInterpolation(e)).catch((()=>(g(e.signal),this._classBreaksFromMemory(e))))}async queryFeatureCount(e){if(this._hasLocalSource)throw new t(`${this.adapterName}:not-supported`,"Layer does not support count query");const a=this.layer,r=a.createQuery();return r.where=o(r.where,e.whereClause),ae(r,e.filter),a.queryFeatureCount(r,{signal:e.signal})}async generateRenderer(e,a){const r=this.layer;if(this._hasLocalSource||r.version<10.1)throw new t(`${this.adapterName}:not-supported`,"Layer does not support generateRenderer operation (requires ArcGIS Server version 10.1+)");const i=r.createQuery();return e.where=o(e.where,i.where),async function(e,t,a,r){const i=q(e),{source:s,checkValueRange:n}=t,{classificationDefinition:o}=a,l={...a.toJSON(),f:"json"};let u=null;if(u="class-breaks-definition"===o?.type?o.classificationField:o?.attributeField,s){const e={source:s?.toJSON()};l.layer=JSON.stringify(e)}l.classificationDef&&(l.classificationDef=JSON.stringify(l.classificationDef));let m={query:l};r&&(m={...r,...m});const p={url:i.path,field:u,checkValueRange:n},c=i.path+"/generateRenderer";return V(c,m).then((e=>function(e,t){const{field:a,checkValueRange:r,url:i}=e,s=t?.data;if(!s)return;if(!r){const e=Le(s);return Promise.resolve(e)}const n=new C({statisticType:"min",onStatisticField:a}),o=new C({statisticType:"max",onStatisticField:a}),l=new b({outStatistics:[n,o]});return T(i,l).then((e=>{const t=e.features[0].attributes;let a=null,r=null;for(const e in t)0===e.toLowerCase().indexOf("min")?a=t[e]:r=t[e];return Le(s,a,r)}))}(p,e)))}(r.parsedUrl?.path??"",{source:r.dynamicDataSource??void 0,gdbVersion:r.gdbVersion??void 0},e,{signal:a})}async predominantCategories(e){if(!this._hasLocalSource&&!this.supportsSQLExpression)throw new t(`${this.adapterName}:not-supported`,"Layer does not support advanced SQL expressions and standardized queries");const{fields:a,view:r,signal:i,filter:s}=e,n=P(a),o=j(a),l=r&&this._hasLocalSource?await this._uvFromMemory({valueExpression:n,view:r,signal:i,filter:s}):await this._uvFromServiceQuery({sqlExpression:o.expression,valueExpression:n,signal:i,filter:s});return oe(l.uniqueValueInfos,a)}async getSampleFeatures(e,t){const{view:a,requiredFields:i,returnGeometry:s,filter:n,signal:o}=e,l=e.sampleSize;if(null==l||0===l)return[];const u=this.layer.createQuery(),m="json"===t;u.outSpatialReference=a?.spatialReference,u.returnGeometry=!!s,u.outFields=i,ae(u,n);let p=[],c=!1;if(a)try{const s=await a.whenLayerView(this.layer);if(c=!te(this,i,s).length,c){if(l>=1&&!e.filter&&"getSampleFeatures"in s){await this._waitForLayerViewUpdate(s);const e=await s.getSampleFeatures({minFeatureCount:l,sampleSize:l});if(null!=e)return m?e:e.map((e=>h.fromJSON(e)))}if(p=await this._fetchFeaturesFromMemory(s,u,o,t),p.length>=l&&l>0)return r(p,l,1)}}catch(e){g(o)}try{if(this._hasLocalSource)return c?p:m?await this._fetchFeaturesJSONFromService(u,o):await this._fetchFeaturesFromService(u,o);const t=await this.queryFeatureCount({view:a,filter:n,signal:o}),i=this.layer.capabilities.query.maxRecordCount;let s=-1===l?t:l;if(s=i&&s>i?i:s,t<=p.length||p.length>=i)return p;if(u.maxAllowableOffset=e.resolution||4e5*(a?a.extent.width/a.width/a.scale:Se(this.layer.spatialReference)),t<=s)return m?await this._fetchFeaturesJSONFromService(u,o):await this._fetchFeaturesFromService(u,o);if(t<=2e4){const e=this.layer.createQuery();ae(e,n);const t=await this.layer.queryObjectIds();return u.objectIds=r(t,s,1),m?await this._fetchFeaturesJSONFromService(u,o):await this._fetchFeaturesFromService(u,o)}return this.layer.capabilities?.query?.supportsPagination&&(u.num=Math.min(s,2e4)),m?await this._fetchFeaturesJSONFromService(u,o):await this._fetchFeaturesFromService(u,o)}catch(e){return g(o),p}}load(e){const t=this.layer.load(e).then((async t=>{this.geometryType=t.geometryType,this.objectIdField=t.objectIdField,this.supportsSQLExpression=t.capabilities?.query?.supportsSqlExpression,this._hasLocalSource=!t.url&&!!t.source,this.hasQueryEngine=this._hasLocalSource,this.minScale=t.minScale,this.maxScale=t.maxScale,this.fullExtent=t.fullExtent,this.workerClient=xe.getInstance(),await this.workerClient.open(e.signal)}));return this.addResolvingPromise(t),Promise.resolve(this)}};e([w({constructOnly:!0})],Ie.prototype,"layer",void 0),Ie=e([i("esri.smartMapping.support.adapters.FeatureLayerAdapter")],Ie);const ke=Ie;let Oe=class extends ke{constructor(){super(...arguments),this.adapterName="csv-layer-adapter"}async _createGenerateRendererResult(e,a,r,i,o){const l=e?.features,u=l?.length;if(!u)throw new t("csv-layer-adapter:insufficient-data","No features are available to calculate statistics");const p=K(l);let c=null;if("percent-of-total"===i&&(c=(await this.workerClient.summaryStatistics({field:a},p)).sum,null==c))throw new t("csv-layer-adapter:invalid","invalid normalizationTotal");if("class-breaks-definition"===o?.type){const e=(await m({field:a,normalizationType:i,normalizationField:r,normalizationTotal:c},p)).filter((e=>Number.isFinite(e)));return s({definition:o,values:e,normalizationTotal:c})}const d=(await m({field:a},p)).filter((e=>null!=e&&"string"==typeof e&&""!==e.trim()));return n(d)}generateRenderer(e,t){const a=e.classificationDefinition;let r=null,i=null,s=null;"class-breaks-definition"===a?.type?(r=a.classificationField,i=a.normalizationField,s=a.normalizationType):r=a?.attributeField;const n=this.layer;return c({field:r,normalizationField:i}).then((l=>{const u=n.createQuery();return u.returnGeometry=!1,u.outFields=l,u.where=o(u.where,e.where),n.queryFeatures(u,{signal:t}).then((e=>this._createGenerateRendererResult(e,r,i,s,a)))}))}load(e){const t=this.layer.load(e).then((async t=>{this.geometryType=t.geometryType,this.objectIdField=t.objectIdField,this.supportsSQLExpression=!0,this._hasLocalSource=!1,this.hasQueryEngine=!0,this.workerClient=xe.getInstance(),await this.workerClient.open(e.signal)}));return this.addResolvingPromise(t),Promise.resolve(this)}};Oe=e([i("esri.smartMapping.support.adapters.CSVLayerAdapter")],Oe);const Ae=Oe;let Qe=class extends ke{constructor(){super(...arguments),this.adapterName="feature-layer-binning-adapter"}async _getNormalizationTotalFromMemory(e,a,r){const{featuresJSON:i,graphics:s,layerView:n,query:o}=a,l={include:["sum"]},u=(!i&&!s&&n&&"queryAggregateSummaryStatistics"in n?await n.queryAggregateSummaryStatistics(o,{field:e,outStatisticTypes:l},{signal:r}):i?await this.workerClient.summaryStatistics({field:e},i):await J({attribute:{field:e,outStatisticTypes:l},features:s})).sum;if(null==u)throw new t(`${this.adapterName}:invalid`,"invalid normalizationTotal");return u}async _processStatsFromMemoryParams(e){const{features:a,filter:r}=e;if(a?.length)return this._getFilteredFeatures(a,r);const{view:i,field:s,field2:n,field3:o,normalizationField:l,valueExpression:u,returnGeometry:m,layerViewFunc:p,signal:d}=e;let y=null,h=null,f=null,g=null,w=null;if(i)try{if(y=await i.whenLayerView(this.layer),h=null!=p&&p in y&&"function"==typeof y[p],h){await this._waitForLayerViewUpdate(y);const e=await c({field:s,field2:n,field3:o,normalizationField:l,valueExpression:u});de(this,e).length?h=!1:(f="createAggregateQuery"in y?y.createAggregateQuery():null,f?(f.outFields=e,f.returnGeometry=!1,ae(f,r)):h=!1),y.suspended&&(h=!1)}}catch{h=!1}if(!h&&(w=ye(this.layer).map((e=>e.toJSON())),g=await this._fetchFeaturesForStats({field:s,field2:n,field3:o,valueExpression:u,normalizationField:l,returnGeometry:m,filter:r,view:i,signal:d},"json"),!g?.length))throw new t(`${this.adapterName}:insufficient-data`,"No features are available to calculate statistics");return{layerView:y,query:f,featuresJSON:g,fieldInfos:w}}async _summaryStatsFromMemory(e,t){const{view:a,field:r,valueExpression:i,normalizationType:s,signal:n}=e,o={field:r,valueExpression:i,normalizationType:s,normalizationField:e.normalizationField,normalizationTotal:e.normalizationTotal,minValue:e.minValue,maxValue:e.maxValue,outStatisticTypes:e.outStatisticTypes},{featuresJSON:l,graphics:u,layerView:m,query:p,fieldInfos:c}=await this._processStatsFromMemoryParams({...e,layerViewFunc:"queryAggregateSummaryStatistics"});return i&&a&&(l||u)&&(o.fieldType=t?.type?D.toJSON(t.type):null,o.viewInfoParams=ee(a),o.timeZone=a.timeZone,o.fieldInfos=c),"percent-of-total"===s&&null==e.normalizationTotal&&(o.normalizationTotal=await this._getNormalizationTotalFromMemory(r,{featuresJSON:l,graphics:u,layerView:m,query:p},n)),!l&&!u&&m&&"queryAggregateSummaryStatistics"in m?m.queryAggregateSummaryStatistics(p,o,{signal:n}):l?this.workerClient.summaryStatistics(o,l):J({attribute:o,features:u})}async _uvFromMemory(e,t){const{view:a,field:r,valueExpression:i,returnAllCodedValues:s,signal:n}=e,{featuresJSON:o,graphics:l,layerView:u,query:m,fieldInfos:p}=await this._processStatsFromMemoryParams({...e,layerViewFunc:"queryAggregateUniqueValues"}),c={field:r,field2:e.field2,field3:e.field3,fieldDelimiter:y,valueExpression:i,domains:t,returnAllCodedValues:s};return i&&a&&(o||l)&&(c.viewInfoParams=ee(a),c.timeZone=a.timeZone,c.fieldInfos=p),!o&&!l&&u&&"queryAggregateUniqueValues"in u?u.queryAggregateUniqueValues(m,c,{signal:n}):o?this.workerClient.uniqueValues(c,o):$({attribute:c,features:l})}async _histogramFromMemory(e){const{view:t,field:a,valueExpression:r,signal:i}=e,{featuresJSON:s,graphics:n,layerView:o,query:l,fieldInfos:u}=await this._processStatsFromMemoryParams({...e,layerViewFunc:"queryAggregateHistogram"}),m={field:a,valueExpression:r,normalizationType:e.normalizationType,normalizationField:e.normalizationField,normalizationTotal:e.normalizationTotal,minValue:e.minValue,maxValue:e.maxValue,standardDeviationInterval:e.standardDeviationInterval,classificationMethod:e.classificationMethod,numBins:e.numBins};return r&&t&&(s||n)&&(m.viewInfoParams=ee(t),m.timeZone=t.timeZone,m.fieldInfos=u),"percent-of-total"===e.normalizationType&&null==e.normalizationTotal&&(m.normalizationTotal=await this._getNormalizationTotalFromMemory(a,{featuresJSON:s,graphics:n,layerView:o,query:l},i)),!s&&!n&&o&&"queryAggregateHistogram"in o?o.queryAggregateHistogram(l,m,{signal:i}):s?this.workerClient.histogram(m,s):U({attribute:m,features:n})}async _classBreaksFromMemory(e){const{view:t,field:a,valueExpression:r,signal:i}=e,{featuresJSON:s,graphics:n,layerView:o,query:l,fieldInfos:u}=await this._processStatsFromMemoryParams({...e,layerViewFunc:"queryAggregateClassBreaks"}),m={field:a,valueExpression:r,normalizationType:e.normalizationType,normalizationField:e.normalizationField,normalizationTotal:e.normalizationTotal,minValue:e.minValue,maxValue:e.maxValue,standardDeviationInterval:e.standardDeviationInterval,classificationMethod:e.classificationMethod,numClasses:e.numClasses};return r&&t&&(s||n)&&(m.viewInfoParams=ee(t),m.timeZone=t.timeZone,m.fieldInfos=u),"percent-of-total"===e.normalizationType&&null==e.normalizationTotal&&(m.normalizationTotal=await this._getNormalizationTotalFromMemory(a,{featuresJSON:s,graphics:n,layerView:o,query:l},i)),!s&&!n&&o&&"queryAggregateClassBreaks"in o?o.queryAggregateClassBreaks(l,m,{signal:i}):s?this.workerClient.classBreaks(m,s):Z({attribute:m,features:n})}getField(e=""){const t=ye(this.layer);return t?.find((t=>t.name.toLowerCase()===e?.toLowerCase()))}getFieldUsageInfo(e){return this.getField(e)?{supportsLabelingInfo:!0,supportsRenderer:!0,supportsPopupTemplate:!0,supportsLayerQuery:!1,supportsStatistics:!0}:null}getFieldDomain(e,t){return null}async summaryStatistics(e){const{field:a}=e,r=a?this.getField(a):null,i=d(r)||v(r),s=e.sqlExpression&&!e.valueExpression&&!a;if(i||s)throw new t(`${this.adapterName}:not-supported`,"Date field and sqlExpression are not supported");return this._summaryStatsFromMemory(e,r)}async uniqueValues(e){const t=await ne(e,this);return this._uvFromMemory(e,t)}async histogram(e){const{field:a}=e,r=a?this.getField(a):null,i=d(r)||v(r),s=e.sqlExpression&&!e.valueExpression&&!a;if(i||s)throw new t(`${this.adapterName}:not-supported`,"Date field and sqlExpression are not supported");return this._histogramFromMemory(e)}async classBreaks(e){return(!1!==e.analyzeData?this._classBreaksFromMemory(e):this._classBreaksFromInterpolation(e)).catch((()=>(g(e.signal),this._classBreaksFromMemory(e))))}async queryFeatureCount(e){const a=await(e.view?.whenLayerView(this.layer));if(!a||!("queryAggregateCount"in a)||!a.queryAggregateCount)throw new t(`${this.adapterName}:not-supported`,"LayerView is not supported.");await this._waitForLayerViewUpdate(a);const r=a.createAggregateQuery();return r.where=o(r.where,e.whereClause),ae(r,e.filter),a.queryAggregateCount(r,{signal:e.signal})}generateRenderer(e,a){throw new t(`${this.adapterName}:not-supported`,"'generateRenderer' is not supported.")}heatmapStatistics(e){throw new t(`${this.adapterName}:not-supported`,"'heatmapStatistics' is not supported.")}async predominantCategories(e){const{fields:t,view:a,signal:r}=e,i=P(t),s=await this._uvFromMemory({valueExpression:i,view:a,signal:r});return oe(s.uniqueValueInfos,t)}async getSampleFeatures(e,a){const{view:i,sampleSize:s,requiredFields:n,returnGeometry:o,filter:l,signal:u}=e;if(!i)throw new t(`${this.adapterName}:not-supported`,"'view' is required to get sample features for binning.");if("3d"===i.type)throw new t(`${this.adapterName}:not-supported`,"3d 'view' is not supported to get sample features for binning.");const m=await i.whenLayerView(this.layer);if(!("queryAggregateJSON"in m&&m.queryAggregateJSON&&"queryAggregates"in m&&m.queryAggregates))throw new t(`${this.adapterName}:not-supported`,"LayerView is not supported.");if(await this._waitForLayerViewUpdate(m),de(this,n).length)throw new t(`${this.adapterName}:insufficient-data`,"Layer does not have required fields");const p="json"===a,c=m.createAggregateQuery();c.outSpatialReference=i?.spatialReference,c.returnGeometry=!!o,c.outFields=n,ae(c,l);const{features:d}=p?await m.queryAggregateJSON(c,{signal:u}):await m.queryAggregates(c,{signal:u});return d.length&&null!=s&&s>0&&s<=d.length?r(d,s,1):d}load(e){const a=this.layer.load(e).then((async a=>{this.geometryType="polygon",this.objectIdField=null,this.supportsSQLExpression=!1,this._hasLocalSource=!1,this.hasQueryEngine=!0,this.minScale=a.minScale,this.maxScale=a.maxScale,this.fullExtent=a.fullExtent;const r="featureReduction"in a?a.featureReduction:null;if("binning"!==r?.type&&"cluster"!==r?.type)throw new t(`${this.adapterName}:invalid-parameters`,`Feature reduction type ${r?.type} is not supported`);this.workerClient=xe.getInstance(),await this.workerClient.open(e.signal)}));return this.addResolvingPromise(a),Promise.resolve(this)}};Qe=e([i("esri.smartMapping.support.adapters.FeatureLayerBinningAdapter")],Qe);const Pe=Qe;let je=class extends be{constructor(e){super(e),this._featureLayerAdapter=null,this.workerClient=null}destroy(){this.workerClient?.destroy()}_hasCachedStatistics(e){return this.layer.hasCachedStatistics(e)}_updateQuery(e,t=[],a=[]){if(!e||!a.length)return e;const r=this.layer.objectIdField,i=e.clone(),s=t.filter((e=>{const t=this.layer.getField(e);return!a.includes(t.name)})),n=s.some((e=>this.layer.getField(e).name===r));return i.outFields=n?s:[...s,r],i}async _fetchFeaturesFromMemory(e,a,r){if(!e)throw new t("scene-layer-adapter:insufficient-data","view is required to fetch the features from layerView");const i=await e.whenLayerView(this.layer),s=new AbortController,n=s.signal,o=G((()=>!i.updating),n);await f(o,5e3,s);const l=te(this,r,i);g(n);const u=this._updateQuery(a,r??[],l),m=await i.queryFeatures(u,{signal:n});g(n);const p=m.features;return l.length?i.whenGraphicAttributes(p,l):p}async _fetchFeaturesJSONFromMemory(e,t,a){return this._fetchFeaturesFromMemory(e,t,a).then(K)}_fetchFeaturesForStats(e,t){return c({field:e.field,normalizationField:e.normalizationField,valueExpression:e.valueExpression}).then((a=>this.getSampleFeatures({sampleSize:-1,view:e.view,returnGeometry:e.returnGeometry,requiredFields:a,signal:e.signal},t)))}async _processStatsFromMemoryParams(e){const a=e.features;if(a?.length)return a.length&&"declaredClass"in a[0]&&"esri.Graphic"===a[0].declaredClass?{graphics:a}:{featuresJSON:a};const{view:r,field:i,normalizationField:s,valueExpression:n,signal:o}=e,l=await this._fetchFeaturesForStats({field:i,valueExpression:n,normalizationField:s,view:r,signal:o},null);if(!l?.length)throw new t("scene-layer-adapter:insufficient-data","No features are available to calculate statistics");return{graphics:l}}_getCachedStatistics(e,a){const r=this.layer;return e.valueExpression||e.sqlExpression||e.sqlWhere||e.minValue||e.maxValue?Promise.reject(new t("scene-layer-adapter:not-supported","This Layer does not support calculating statistics when 'valueExpression', 'sqlExpression', 'sqlWhere', 'minValue' or 'maxValue' is specified")):r.queryCachedStatistics(a?.name,{signal:e.signal}).then((e=>{const t=e.stats,{min:a,max:r,totalValuesCount:i}=t;let{avg:s,stddev:n,sum:o,variance:l,count:u}=t;return 0===a&&0===r||(s=0===s?null:s,o=0===o?null:o,n=0===n?null:n,l=0===l?null:l,u=0===u?null:u),null==u&&(null!=o&&null!=s?u=Math.round(o/s):null!=i&&(u=i)),{avg:s,count:u,max:r,min:a,stddev:n,sum:o,variance:l}}))}async _getNormalizationTotal(e,a,r){const i={include:["sum"]},s=(a?await this.workerClient.summaryStatistics({field:e,outStatisticTypes:i},a):await J({attribute:{field:e,outStatisticTypes:i},features:r})).sum;if(null==s)throw new t("scene-layer-adapter:invalid","invalid normalizationTotal");return s}async _getSummaryStatisticsFromMemory(e,t){const{view:a,field:r,normalizationField:i,valueExpression:s}=e,{featuresJSON:n,graphics:o}=await this._processStatsFromMemoryParams(e),l={field:r,valueExpression:s,normalizationType:e.normalizationType,normalizationField:i,normalizationTotal:e.normalizationTotal,minValue:e.minValue,maxValue:e.maxValue,outStatisticTypes:e.outStatisticTypes};return e.valueExpression&&a&&n&&(l.fieldType=t?.type?D.toJSON(t.type):null,l.viewInfoParams=ee(a),l.timeZone=a.timeZone),"percent-of-total"===e.normalizationType&&null==e.normalizationTotal&&(l.normalizationTotal=await this._getNormalizationTotal(r,n,o)),n?this.workerClient.summaryStatistics(l,n):J({attribute:l,features:o})}_getCachedStatisticsForUniqueValues(e,a){const r=this.layer,i=a?.name,s=a&&e.field?this.getFieldDomain(e.field):null;return e.valueExpression||e.sqlExpression||e.sqlWhere?Promise.reject(new t("scene-layer-adapter:not-supported","This Layer does not support calculating statistics when 'valueExpression', 'sqlExpression' or 'sqlWhere' is specified")):r.queryCachedStatistics(i,{signal:e.signal}).then((t=>{const s=t.stats;if(!s.mostFrequentValues)throw new Error;const n=t.labels?.labels,o={},l=[],u="countOF"+i;s.mostFrequentValues.forEach((e=>{const t=new h({attributes:{}});t.attributes[i]=a&&a.name!==r.objectIdField&&(L(a)||d(a))?Number(e.value):e.value,t.attributes[u]=e.count,l.push(t)})),n&&n.forEach((e=>{o[e.value]=e.label}));const m=new ve({features:l});return ie(m,{layer:this,field:e.field,labels:o,view:e.view,signal:e.signal})})).then((t=>fe(t,[s],e.returnAllCodedValues)))}async _getUniqueValuesFromMemory(e,t){const{view:a,field:r,field2:i,field3:s,valueExpression:n,returnAllCodedValues:o}=e,l={field:r,field2:i,field3:s,fieldDelimiter:y,valueExpression:n,domains:t,returnAllCodedValues:o},{featuresJSON:u,graphics:m}=await this._processStatsFromMemoryParams(e);return e.valueExpression&&a&&u&&(l.viewInfoParams=ee(a),l.timeZone=a.timeZone),u?this.workerClient.uniqueValues(l,u):$({attribute:l,features:m})}_getCachedStatisticsForHistogram(e,a){const r=this.layer;return e.valueExpression||e.sqlExpression||e.sqlWhere||e.normalizationType?Promise.reject(new t("scene-layer-adapter:not-supported","This Layer does not support calculating statistics when 'valueExpression' or 'sqlExpression' or 'sqlWhere' or 'normalizationType' is specified")):r.queryCachedStatistics(a&&a.name,{signal:e.signal}).then((t=>{const a=t.stats,{minValue:r,maxValue:i}=e,s=null!=r?r:a.min,n=null!=i?i:a.max,o=e.numBins||10,l=function(e,t=e.minimum,a=e.maximum,r){const i=[];for(let e=0;e<r;e++)i[e]=0;const s=e.counts.length,n=e.minimum,o=e.maximum;for(let l=0;l<s;l++){const u=(l+.5)/s,m=((1-u)*n+u*o-t)/(a-t)*r;m>=0&&m<=r&&(i[m===r?r-1:Math.floor(m)]+=e.counts[l])}const l=[];return i.forEach(((e,t)=>{const a=new h({attributes:{}});a.attributes.EXPR_1=t+1,a.attributes.countOFExpr=e,l.push(a)})),new ve({features:l})}(a.histogram,s,n,o);return pe(l,s,n,o)}))}async _getClassBreaksFromMemory(e){const{view:t,field:a,normalizationField:r,valueExpression:i}=e,{featuresJSON:s,graphics:n}=await this._processStatsFromMemoryParams(e),o={field:a,valueExpression:i,normalizationType:e.normalizationType,normalizationField:r,normalizationTotal:e.normalizationTotal,minValue:e.minValue,maxValue:e.maxValue,standardDeviationInterval:e.standardDeviationInterval,classificationMethod:e.classificationMethod,numClasses:e.numClasses};return e.valueExpression&&t&&s&&(o.viewInfoParams=ee(t),o.timeZone=t.timeZone),"percent-of-total"===e.normalizationType&&null==e.normalizationTotal&&(o.normalizationTotal=await this._getNormalizationTotal(a,s,n)),s?this.workerClient.classBreaks(o,s):Z({attribute:o,features:n})}async _getHistogramFromMemory(e){const{view:t,field:a}=e,{featuresJSON:r,graphics:i}=await this._processStatsFromMemoryParams(e),s={field:a,valueExpression:e.valueExpression,normalizationType:e.normalizationType,normalizationField:e.normalizationField,normalizationTotal:e.normalizationTotal,minValue:e.minValue,maxValue:e.maxValue,standardDeviationInterval:e.standardDeviationInterval,classificationMethod:e.classificationMethod,numBins:e.numBins};return e.valueExpression&&t&&r&&(s.viewInfoParams=ee(t),s.timeZone=t.timeZone),"percent-of-total"===e.normalizationType&&null==e.normalizationTotal&&(s.normalizationTotal=await this._getNormalizationTotal(a,r,i)),r?this.workerClient.histogram(s,r):U({attribute:s,features:i})}getField(e){return this.layer.getField(e??"")}getFieldUsageInfo(e){const t=this.getField(e);if(!t)return null;const a=this.layer.getFieldUsageInfo(t.name);return{supportsLabelingInfo:a.supportsLabelingInfo,supportsPopupTemplate:a.supportsPopupTemplate,supportsRenderer:a.supportsRenderer,supportsLayerQuery:a.supportsLayerQuery,supportsStatistics:!0}}getFieldDomain(e,t){return this._featureLayerAdapter?this._featureLayerAdapter.getFieldDomain(e,t):null}createQuery(){return this.layer.createQuery()}summaryStatistics(e){const a=this.getField(e.field);if(this._featureLayerAdapter)return this._featureLayerAdapter.summaryStatistics(e);if(e.filter)throw new t("scene-layer-adapter:not-supported","filter is not supported");return this._hasCachedStatistics(a?.name)?this._getCachedStatistics(e,a).catch((()=>(g(e.signal),this._getSummaryStatisticsFromMemory(e,a)))):this._getSummaryStatisticsFromMemory(e,a)}async uniqueValues(e){if(this._featureLayerAdapter)return this._featureLayerAdapter.uniqueValues(e);if(e.filter)throw new t("scene-layer-adapter:not-supported","filter is not supported");const a=await ne(e,this),{field:r,field2:i}=e,s=r&&i,n=this.getField(r);return!s&&n&&this._hasCachedStatistics(n.name)?this._getCachedStatisticsForUniqueValues(e,n).catch((()=>(g(e.signal),this._getUniqueValuesFromMemory(e,a)))):this._getUniqueValuesFromMemory(e,a)}histogram(e){const a=this.getField(e.field);if(this._featureLayerAdapter)return this._featureLayerAdapter.histogram(e);if(e.filter)throw new t("scene-layer-adapter:not-supported","filter is not supported");return a&&this._hasCachedStatistics(a.name)?this._getCachedStatisticsForHistogram(e,a).catch((()=>(g(e.signal),this._getHistogramFromMemory(e)))):this._getHistogramFromMemory(e)}classBreaks(e){const a=this.getField(e.field);if(this._featureLayerAdapter)return this._featureLayerAdapter.classBreaks(e);if(e.filter)throw new t("scene-layer-adapter:not-supported","filter is not supported");return this._hasCachedStatistics(a?.name)?Promise.reject(new t("scene-layer-adapter:not-supported","Cached stats not supported")):this._getClassBreaksFromMemory(e)}queryFeatureCount(e){return this._featureLayerAdapter?this._featureLayerAdapter.queryFeatureCount(e):Promise.reject(new t("scene-layer-adapter:not-supported","SceneLayer without associated FeatureLayer does not support count query"))}generateRenderer(e,a){return this._featureLayerAdapter?this._featureLayerAdapter.generateRenderer(e,a):Promise.reject(new t("scene-layer-adapter:not-supported","SceneLayer without associated FeatureLayer does not support generateRenderer operation"))}heatmapStatistics(e){return this._featureLayerAdapter?this._featureLayerAdapter.heatmapStatistics(e):Promise.reject(new t("scene-layer-adapter:not-supported","SceneLayer without associated FeatureLayer does not support heatmapStatistics operation"))}async predominantCategories(e){if(this._featureLayerAdapter)return this._featureLayerAdapter.predominantCategories(e);throw new t("scene-layer-adapter:not-supported","SceneLayer without associated FeatureLayer does not support predominantCategories")}async getSampleFeatures(e,a){if(e.filter)throw new t("scene-layer-adapter:not-supported","filter is not supported");const{view:i,sampleSize:s,requiredFields:n,returnGeometry:o,signal:l}=e,u="json"===a,m=this.createQuery();m.outFields=n,m.returnGeometry=!!o,m.where=null,m.num=s;let p=[];try{if(p=u?await this._fetchFeaturesJSONFromMemory(i,m,n):await this._fetchFeaturesFromMemory(i,m,n),p.length&&null!=s&&s>0&&s<=p.length)return r(p,s,1)}catch(e){g(l)}let c=null;if(this._featureLayerAdapter){const t={...e};delete t.view,c=await this._featureLayerAdapter.getSampleFeatures(t,a)}return c?.length?c:r(p,p.length,1)}load(e){const t=this.layer.load(e).then((async t=>{this.workerClient=xe.getInstance(),await this.workerClient.open(e.signal);const a=t.associatedLayer;if(this.geometryType=t.geometryType,null!=a)return this._featureLayerAdapter=new ke({layer:a}),this._featureLayerAdapter.load(e).then((()=>{this.objectIdField=this._featureLayerAdapter.objectIdField,this.supportsSQLExpression=this._featureLayerAdapter.supportsSQLExpression,this.minScale=this._featureLayerAdapter.minScale,this.maxScale=this._featureLayerAdapter.maxScale,this.fullExtent=this._featureLayerAdapter.fullExtent}));this.objectIdField=t.objectIdField,this.supportsSQLExpression=!1,this.hasQueryEngine=!1,this.fullExtent=t.fullExtent}));return this.addResolvingPromise(t),Promise.resolve(this)}};e([w({constructOnly:!0})],je.prototype,"layer",void 0),je=e([i("esri.smartMapping.support.adapters.SceneLayerAdapter")],je);const Be=je;let Ge=class extends Be{constructor(e){super(e)}getField(e){return this.layer.fieldsIndex.get(e??"")}getFieldUsageInfo(e){const t=this.getField(e);if(!t)return null;const a=this._hasCachedStatistics(t.name);return{supportsLabelingInfo:a,supportsPopupTemplate:a,supportsRenderer:a,supportsLayerQuery:!1,supportsStatistics:a}}getFieldDomain(){return null}load(e){const t=this.layer.load(e).then((()=>{this.geometryType="point",this.objectIdField=null,this.supportsSQLExpression=!1,this.hasQueryEngine=!1}));return this.addResolvingPromise(t),Promise.resolve(this)}};Ge=e([i("esri.smartMapping.support.adapters.PointCloudLayerAdapter")],Ge);const Re=Ge;let De=class extends Ne{async _summaryStatsFromClientQuery(e,t){const{signal:a,view:r}=e,i=X(this,e,t);i.outStatistics=i.outStatistics?.filter((e=>"totalcount_value"!==e.outStatisticFieldName));const s=await this._fetchFeatureSetFromMemory(i,r,a),n=Y(s,d(t)||v(t));return he(n,e.outStatisticTypes)}};De=e([i("esri.smartMapping.support.adapters.StreamLayerAdapter")],De);const Je=De;var $e;!function(e){e[e.CatalogLayer=0]="CatalogLayer",e[e.CatalogFootprintLayer=1]="CatalogFootprintLayer",e[e.CSVLayer=2]="CSVLayer",e[e.FeatureLayer=3]="FeatureLayer",e[e.GeoJSONLayer=4]="GeoJSONLayer",e[e.KnowledgeGraphSublayer=5]="KnowledgeGraphSublayer",e[e.OGCFeatureLayer=6]="OGCFeatureLayer",e[e.OrientedImageryLayer=7]="OrientedImageryLayer",e[e.PointCloudLayer=8]="PointCloudLayer",e[e.SceneLayer=9]="SceneLayer",e[e.StreamLayer=10]="StreamLayer",e[e.SubtypeGroupLayer=11]="SubtypeGroupLayer",e[e.SubtypeSublayer=12]="SubtypeSublayer",e[e.WFSLayer=13]="WFSLayer"}($e||($e={}));const Ue={[$e.CatalogLayer]:{adapter:ke,type:"catalog",label:"CatalogLayer"},[$e.CatalogFootprintLayer]:{adapter:ke,type:"catalog-footprint",label:"CatalogFootprintLayer"},[$e.CSVLayer]:{adapter:Ae,type:"csv",label:"CSVLayer"},[$e.FeatureLayer]:{adapter:ke,type:"feature",label:"FeatureLayer"},[$e.GeoJSONLayer]:{adapter:ke,type:"geojson",label:"GeoJSONLayer"},[$e.KnowledgeGraphSublayer]:{adapter:ke,type:"knowledge-graph-sublayer",label:"KnowledgeGraphSublayer"},[$e.OGCFeatureLayer]:{adapter:Ne,type:"ogc-feature",label:"OGCFeatureLayer"},[$e.OrientedImageryLayer]:{adapter:ke,type:"oriented-imagery",label:"OrientedImageryLayer"},[$e.PointCloudLayer]:{adapter:Re,type:"point-cloud",label:"PointCloudLayer"},[$e.SceneLayer]:{adapter:Be,type:"scene",label:"SceneLayer"},[$e.StreamLayer]:{adapter:Je,type:"stream",label:"StreamLayer"},[$e.SubtypeGroupLayer]:{adapter:ke,type:"subtype-group",label:"SubtypeGroupLayer"},[$e.SubtypeSublayer]:{adapter:ke,type:"subtype-sublayer",label:"SubtypeSublayer"},[$e.WFSLayer]:{adapter:ke,type:"wfs",label:"WFSLayer"}},Ze=[$e.CatalogLayer,$e.CatalogFootprintLayer,$e.CSVLayer,$e.FeatureLayer,$e.GeoJSONLayer,$e.KnowledgeGraphSublayer,$e.OGCFeatureLayer,$e.OrientedImageryLayer,$e.PointCloudLayer,$e.SceneLayer,$e.StreamLayer,$e.SubtypeGroupLayer,$e.SubtypeSublayer,$e.WFSLayer],We=[$e.CatalogFootprintLayer,$e.CSVLayer,$e.FeatureLayer,$e.GeoJSONLayer,$e.KnowledgeGraphSublayer,$e.OGCFeatureLayer,$e.OrientedImageryLayer,$e.SceneLayer,$e.StreamLayer,$e.SubtypeGroupLayer,$e.SubtypeSublayer,$e.WFSLayer],He=[$e.CSVLayer,$e.FeatureLayer,$e.GeoJSONLayer,$e.OGCFeatureLayer,$e.KnowledgeGraphSublayer,$e.OrientedImageryLayer,$e.StreamLayer,$e.WFSLayer];function Ke(e){return e.map((e=>Ue[e].label))}function Xe(e){return e.map((e=>Ue[e].type))}function Ye(e,t=Ze,a){if(e instanceof be)return e;const r=function(e,t=Ze){let a=null;return t.some((t=>{const r=e.type===Ue[t].type;return r&&(a=Ue[t].adapter),r})),a}(e,t);return r?a?new Pe({layer:e}):new r({layer:e}):null}export{$e as L,Xe as a,He as b,Ye as c,Ze as d,We as f,Ke as g};
