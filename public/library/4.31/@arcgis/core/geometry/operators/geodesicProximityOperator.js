/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.31/esri/copyright.txt for details.
*/
import{J as t,H as s,ad as r,n as o}from"../../chunks/unitUtils.js";import{aO as e,g as i,c as n,D as c,f as m}from"../../chunks/converterAPI.js";import"../../chunks/Transformation2D.js";import{t as p}from"../../chunks/proximityResult.js";import"../../core/lang.js";import"../../chunks/jsonMap.js";import"../../config.js";import"../../chunks/Logger.js";import"../../chunks/assets.js";import"../../request.js";import"../../kernel.js";import"../../core/urlUtils.js";import"../../core/Error.js";import"../../core/JSONSupport.js";import"../../chunks/tslib.es6.js";import"../../core/Accessor.js";import"../../core/Handles.js";import"../../chunks/maybe.js";import"../../core/accessorSupport/decorators/subclass.js";import"../../chunks/metadata.js";import"../../chunks/utils.js";import"../../chunks/handleUtils.js";import"../../chunks/tracking.js";import"../../chunks/ensureType.js";import"../../core/accessorSupport/decorators/property.js";import"../../chunks/ObservableBase.js";import"../../core/scheduling.js";import"../../core/promiseUtils.js";import"../../geometry.js";import"../Extent.js";import"../Geometry.js";import"../../chunks/reader.js";import"../SpatialReference.js";import"../../chunks/writer.js";import"../Point.js";import"../../core/accessorSupport/decorators/cast.js";import"../support/webMercatorUtils.js";import"../Multipoint.js";import"../../chunks/zmUtils.js";import"../Polygon.js";import"../../chunks/coordsUtils.js";import"../../chunks/Axis.js";import"../../chunks/extentUtils.js";import"../../chunks/boundsUtils.js";import"../../chunks/aaBoundingRect.js";import"../../chunks/mathUtils.js";import"../Polyline.js";import"../../chunks/typeUtils.js";import"../support/jsonUtils.js";let u;function a(){return!!u&&s()}function j(){return a()}function l(){return async function(){if(!a()){const[s]=await Promise.all([import("../../chunks/OperatorProximityGeodesic.js"),t()]);u=new s.OperatorProximityGeodesic,e(r)}}()}function h(t,s,r={}){let{calculateLeftRightSide:e=!1,maxDeviation:a=NaN,testPolygonInterior:j=!0,unit:l}=r;l&&a&&(a=o(a,l,"meters"));const h=i(t),k=function(t,s,r,o,e,i){return u.getNearestCoordinate(t,s,r,o,e,i)}(m(t),c(s).getXY(),n(h),a,j,e);return l&&k.m_distance&&(k.m_distance=o(k.m_distance,"meters",l)),p(k,t,e)}function k(t,s,r={}){const{unit:e}=r,a=i(t),j=function(t,s,r){return u.getNearestVertex(t,s,r)}(m(t),c(s).getXY(),n(a));return e&&j.m_distance&&(j.m_distance=o(j.m_distance,"meters",e)),p(j,t)}function d(t,s,r,e,a={}){const{unit:j}=a;j&&r&&(r=o(r,j,"meters"));const l=i(t);return function(t,s,r,o,e){return u.getNearestVertices(t,s,r,o,e)}(m(t),c(s).getXY(),n(l),r,e).map((s=>(j&&s.m_distance&&(s.m_distance=o(s.m_distance,"meters",j)),p(s,t))))}function f(){return u.supportsCurves()}export{h as getNearestCoordinate,k as getNearestVertex,d as getNearestVertices,j as isLoaded,l as load,f as supportsCurves};
