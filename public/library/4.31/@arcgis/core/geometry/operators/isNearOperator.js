/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.31/esri/copyright.txt for details.
*/
import{t as s,a as r}from"../../chunks/Transformation2D.js";import{D as t}from"../../chunks/Distance2DCalculator-BX0Ep7eP.js";import{X as o}from"../../chunks/unitUtils.js";import{g as e,f as i}from"../../chunks/converterAPI.js";import"../../chunks/tslib.es6.js";import"../../core/lang.js";import"../../chunks/jsonMap.js";import"../../config.js";import"../../chunks/Logger.js";import"../../chunks/assets.js";import"../../request.js";import"../../kernel.js";import"../../core/urlUtils.js";import"../../core/Error.js";import"../../core/JSONSupport.js";import"../../core/Accessor.js";import"../../core/Handles.js";import"../../chunks/maybe.js";import"../../core/accessorSupport/decorators/subclass.js";import"../../chunks/metadata.js";import"../../chunks/utils.js";import"../../chunks/handleUtils.js";import"../../chunks/tracking.js";import"../../chunks/ensureType.js";import"../../core/accessorSupport/decorators/property.js";import"../../chunks/ObservableBase.js";import"../../core/scheduling.js";import"../../core/promiseUtils.js";import"../../geometry.js";import"../Extent.js";import"../Geometry.js";import"../../chunks/reader.js";import"../SpatialReference.js";import"../../chunks/writer.js";import"../Point.js";import"../../core/accessorSupport/decorators/cast.js";import"../support/webMercatorUtils.js";import"../Multipoint.js";import"../../chunks/zmUtils.js";import"../Polygon.js";import"../../chunks/coordsUtils.js";import"../../chunks/Axis.js";import"../../chunks/extentUtils.js";import"../../chunks/boundsUtils.js";import"../../chunks/aaBoundingRect.js";import"../../chunks/mathUtils.js";import"../Polyline.js";import"../../chunks/typeUtils.js";import"../support/jsonUtils.js";const p=new class{getOperatorType(){return 10}accelerateGeometry(s,r,t){return!1}canAccelerateGeometry(s){return!1}supportsCurves(){return!0}execute(o,e,i,p){if(o.isEmpty()||e.isEmpty())return!1;i<0&&s("distance"),r(o),r(e);const c=o,n=e;return Number.isNaN(i)&&(i=Number.POSITIVE_INFINITY),new t(i,p).isNear(c,n)}};function c(s,r,t,c={}){const{unit:n}=c;if(n){const r=e(s);t=o(t,n,r)}return p.execute(i(s),i(r),t,null)}function n(){return p.supportsCurves()}export{c as execute,n as supportsCurves};
