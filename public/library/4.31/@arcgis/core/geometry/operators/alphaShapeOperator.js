/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.31/esri/copyright.txt for details.
*/
import{G as t,a as e,aZ as i,a_ as s,a$ as n,S as o,g as r,b0 as h,f as g}from"../../chunks/converterAPI.js";import{p as d,P as c,h as a,C as l,a as u,k as m,G as p,t as f,g as E,J as x,u as P,s as _,o as F,L as k}from"../../chunks/Transformation2D.js";import"../../chunks/tslib.es6.js";import"../../geometry.js";import"../../chunks/ensureType.js";import"../../core/lang.js";import"../../chunks/Logger.js";import"../../config.js";import"../Extent.js";import"../../core/accessorSupport/decorators/property.js";import"../../chunks/utils.js";import"../../chunks/handleUtils.js";import"../../chunks/metadata.js";import"../../core/Error.js";import"../../core/accessorSupport/decorators/subclass.js";import"../../chunks/tracking.js";import"../Geometry.js";import"../../core/JSONSupport.js";import"../../core/Accessor.js";import"../../core/Handles.js";import"../../chunks/maybe.js";import"../../chunks/ObservableBase.js";import"../../core/scheduling.js";import"../../core/promiseUtils.js";import"../../chunks/reader.js";import"../SpatialReference.js";import"../../chunks/unitUtils.js";import"../../chunks/jsonMap.js";import"../../chunks/assets.js";import"../../request.js";import"../../kernel.js";import"../../core/urlUtils.js";import"../../chunks/writer.js";import"../Point.js";import"../../core/accessorSupport/decorators/cast.js";import"../support/webMercatorUtils.js";import"../Multipoint.js";import"../../chunks/zmUtils.js";import"../Polygon.js";import"../../chunks/coordsUtils.js";import"../../chunks/Axis.js";import"../../chunks/extentUtils.js";import"../../chunks/boundsUtils.js";import"../../chunks/aaBoundingRect.js";import"../../chunks/mathUtils.js";import"../Polyline.js";import"../../chunks/typeUtils.js";import"../support/jsonUtils.js";function w(t,e,i,s,o,r){const h=s-e;if(h<=r)return n(t,e,i,s,o),i;const g=function(t,e,i,s,n){const o=[];!function(t,e,i){const s=Math.trunc(e/2);let n=BigInt(s);const o=BigInt(e);for(let e=0;e<i;++e)t.push(Number(n%o)),n=6364136223846793005n*n+1442695040888963407n&0x7fffffffffffffffn,n=BigInt.asUintN(64,n);k(t);const r=x(t,((t,e)=>t===e));t.length=r}(o,i-e,n);const r=[];for(let i=0,s=o.length;i<s;i++){const s=o[i];r.push(P(t[e+s],s))}const h=Math.trunc(r.length/2);return r.sort(((t,e)=>s(t.first,e.first)?-1:1)),e+r[h].second}(t,e,s,o,Math.min(Math.max(h>>1,3),100)),d=t[g];t[e]=_(t[g],t[g]=t[e]);let c=e+1,a=!1;for(let i=e+1;i!==s;++i)o(t[i],d)&&(t[c]=_(t[i],t[i]=t[c]),++c,a=!0);if(!a)for(let s=e+1;s<i;++s)o(d,t[s])||(s!==c&&(t[c]=_(t[s],t[s]=t[c])),++c);return--c,t[c]=_(t[e],t[e]=t[c]),c}function y(){return{p:new c,userData:Number.NaN,edge:null}}class b{constructor(){this.info=0,this.mask=!1,this.p=null,this.a=[null,null],this.twin=null}nextFreeEdge(){return this.twin}setIndex(t){this.info=t,this.mask=!1}getIndex(){return this.info}setMask(){this.mask=!0}getMask(){return this.mask}}function T(t,e){return{first:t,second:e}}function C(t,e){t.first=e.first,t.second=e.second}function j(){return this.i1-this.i0}function D(){return{i0:Number.NaN,i1:Number.NaN,nextFreeEdgeIndex:[-1],box:[T(null,null),T(null,null)],size:j}}function I(){return{p:[new c,new c],points:[null,null]}}class X{constructor(){this.m_nextFreePairEdge=T(null,null),this.m_points=[],this.m_pointZero=null,this.m_edges=[],this.m_voronoiToEdge=[],this.m_nextFreeEdge=0}clear(){this.m_nextFreePairEdge=T(null,null),this.m_points.length=0,this.m_pointZero=null,this.m_edges.length=0,this.m_voronoiToEdge.length=0,this.m_nextFreeEdge=0}reservePoints(t){E(t>1)}prepare(t){{const e=y();e.p.x=Number.POSITIVE_INFINITY,e.p.y=Number.POSITIVE_INFINITY,e.userData=t,this.m_points.push(e)}}addVertex(t,e){const i=y();i.p.assign(t),i.userData=e,i.edge=null,this.m_points.push(i)}removeDuplicates(){const t=this.m_points.shift();this.m_points.sort(((t,e)=>t.p.compareX(e.p)));const e=x(this.m_points,((t,e)=>t.p.equals(e.p))),i=e!==this.m_points.length;return this.m_points.length=e,this.m_points.unshift(t),i}removeDuplicatesEx(t){return E(0),!1}boundVoronoiCells(t,e){const i=this.m_points.length;if(i<2)return!1;const s=[this.m_points[1].p.clone(),this.m_points[1].p.clone()];for(let t=2;t<i;t++){const e=this.m_points[t].p;e.x<s[0].x&&(s[0].x=e.x),s[1].x<e.x&&(s[1].x=e.x),e.y<s[0].y&&(s[0].y=e.y),s[1].y<e.y&&(s[1].y=e.y)}const n=new c;n.x=.5*(s[0].x+s[1].x),n.y=.5*(s[0].y+s[1].y);let o=0;for(let t=1;t<i;t++){const e=this.m_points[t].p,i=c.sqrDistanceCoords(e.x,e.y,n.x,n.y);o<i&&(o=i)}const r=Math.sqrt(o),h=Math.max(r+2*t,1.5*r);{const t=.8660254037844386,i=.5;let s=1,o=0;for(let r=0;r<12;r++){const r=new c;r.x=n.x+h*s,r.y=n.y+h*o,this.addVertex(r,e);const g=s*i+o*t;s=s*t-o*i,o=g}}return!0}construct(){const t=D();return!!this.constructTask(t)&&(this.solveTask(t),!0)}constructTask(t){if(this.m_pointZero=this.createZeroHandle(),E(void 0!==this.m_pointZero),this.m_points.length<3)return!1;const e=6*(this.m_points.length-2);this.m_edges=d(b,e);for(let t=0;t<e;t++)this.m_edges[t].setIndex(t);return t.i0=1,t.i1=this.m_points.length,t.nextFreeEdgeIndex[0]=0,!0}splitTask(t,e,i,s){const n=t,o=e,r=i,h=s;n.k=this.findMaxSide(h.i0,h.i1);let g=h.i0+h.i1>>1;g=0===n.k?w(this.m_points,h.i0,g,h.i1,((t,e)=>t.p[0]!==e.p[0]?t.p[0]<e.p[0]:t.p[1]<e.p[1]),1250):w(this.m_points,h.i0,g,h.i1,((t,e)=>t.p[1]!==e.p[1]?t.p[1]<e.p[1]:t.p[0]<e.p[0]),1250),o.i0=h.i0,o.i1=g,o.nextFreeEdgeIndex[0]=h.nextFreeEdgeIndex[0],h.nextFreeEdgeIndex[0]+=6*(o.i1-o.i0-1)+2,r.i0=g,r.i1=h.i1,r.nextFreeEdgeIndex[0]=h.nextFreeEdgeIndex[0],h.nextFreeEdgeIndex[0]+=6*(r.i1-r.i0-1)+2,n.pTask=h,n.pTask0=o,n.pTask1=r}solveMergeTask(t){const e=this.newPairEdgeEx(t.pTask.nextFreeEdgeIndex,!1);if(t.pTask.box[t.k]=T(t.pTask0.box[t.k].first,t.pTask1.box[t.k].second),t.pTask.box[1-t.k]=T(N(this.getPointXYFromEdge(t.pTask0.box[1-t.k].first),this.getPointXYFromEdge(t.pTask1.box[1-t.k].first),1-t.k)?t.pTask0.box[1-t.k].first:t.pTask1.box[1-t.k].first,N(this.getPointXYFromEdge(t.pTask0.box[1-t.k].second),this.getPointXYFromEdge(t.pTask1.box[1-t.k].second),1-t.k)?t.pTask1.box[1-t.k].second:t.pTask0.box[1-t.k].second),t.pTask.i0+2===t.pTask.i1){const i=t.pTask0.box[t.k].second,s=i.twin,n=t.pTask1.box[t.k].first,o=n.twin;return this.joinEdges2(s,o),this.joinEdges2(o,s),void this.join(i,n,0,1,e)}const i=[new Array(2),new Array(2)];i[0][0]=i[1][0]=T(t.pTask0.box[t.k].second,t.pTask0.box[t.k].second.twin),i[0][1]=i[1][1]=T(t.pTask1.box[t.k].first,t.pTask1.box[t.k].first.twin);const s=[!1,!1];if(t.pTask0.i0+1===t.pTask0.i1?(this.findEdgeSide(i[0],s,1,0),this.findEdgeSide(i[1],s,1,1)):(this.findEdge(i[0],s,0),this.findEdge(i[1],s,1)),s[0]||s[1]){if(s[0]){const e=this.newPairEdgeEx(t.pTask0.nextFreeEdgeIndex,!1);this.insertEdge(i[0][0].first,e.first,0),this.insertEdge(i[0][0].second,e.second,1)}if(s[1]){const e=this.newPairEdgeEx(t.pTask1.nextFreeEdgeIndex,!1);this.insertEdge(i[0][1].first,e.first,1),this.insertEdge(i[0][1].second,e.second,0)}}else this.getNextDEdge(i[0][0].first,0)!==i[0][0].first&&(i[1][0]=this.newPairEdgeEx(t.pTask0.nextFreeEdgeIndex,!1),this.insertEdge(i[0][0].first,i[1][0].first,0),this.insertEdge(i[0][0].second,i[1][0].second,1)),this.getNextDEdge(i[0][1].first,0)!==i[0][1].first&&(i[1][1]=this.newPairEdgeEx(t.pTask1.nextFreeEdgeIndex,!1),this.insertEdge(i[0][1].first,i[1][1].first,1),this.insertEdge(i[0][1].second,i[1][1].second,0));this.merge(i[1][0],i[0][0],i[0][1],i[1][1],e)}solveTask(t){const e=t;switch(e.i1-e.i0){case 1:{this.insertPoint(e.i0,e.nextFreeEdgeIndex);const t=this.m_points[e.i0].edge;e.box[0]=e.box[1]=P(t,t)}break;case 2:{const t=e.i0,i=t+1;this.insertPoint(t,e.nextFreeEdgeIndex),this.insertPoint(i,e.nextFreeEdgeIndex);const s=this.m_points[t],n=this.m_points[i],o=s.edge,r=n.edge,h=o.twin,g=r.twin;this.joinEdges2(h,g),this.joinEdges2(g,h);const d=this.newPairEdgeEx(e.nextFreeEdgeIndex,!1);this.join(o,r,0,1,d);for(let t=0;t<2;t++)e.box[t]=N(this.getPointXY(s),this.getPointXY(n),t)?T(o,r):T(r,o)}break;case 3:{const t=[e.i0,e.i0+1,e.i0+2];this.insertPoint(t[0],e.nextFreeEdgeIndex),this.insertPoint(t[1],e.nextFreeEdgeIndex),this.insertPoint(t[2],e.nextFreeEdgeIndex);const i=[this.m_points[t[0]],this.m_points[t[1]],this.m_points[t[2]]],s=this.caseFromCompare(i[0].p,i[1].p,i[2].p),n=[i[0].edge,i[1].edge,i[2].edge],o=X.c_aTableDelaunayTriangulationSolution[s],r=v(19*v(1+(7&o))),h=v(19*v(1+(o>>5)));let g=v(o<<3)>>6;const d=3&r,c=r>>6,a=3&h,l=h>>6;e.box[0]=T(n[d],n[c]),e.box[1]=T(n[a],n[l]);const u=[n[0].twin,n[1].twin,n[2].twin],m=[this.newPairEdgeEx(e.nextFreeEdgeIndex,!1),this.newPairEdgeEx(e.nextFreeEdgeIndex,!1),this.newPairEdgeEx(e.nextFreeEdgeIndex,!1)];switch(3===g&&(g=this.orientation(i[0].p,i[1].p,i[2].p)+1),g){case 0:this.joinEdges2(u[0],u[2]),this.joinEdges2(u[2],u[1]),this.joinEdges2(u[1],u[0]),this.join(n[0],n[2],0,1,m[0]),this.join(n[2],n[1],0,1,m[1]),this.join(n[1],n[0],0,1,m[2]);break;case 1:{const t=[0,1,2];t[3-(d+c)]=_(t[1],t[1]=t[3-(d+c)]),this.joinEdges2(u[t[0]],u[t[1]]),this.joinEdges2(u[t[1]],u[t[2]]),this.joinEdges2(u[t[2]],u[t[0]]),this.join(n[t[0]],n[t[1]],0,1,m[0]),this.join(n[t[1]],n[t[2]],0,1,m[1]),this.join(m[1].first,u[t[2]],0,1,m[2])}break;case 2:this.joinEdges2(u[0],u[1]),this.joinEdges2(u[1],u[2]),this.joinEdges2(u[2],u[0]),this.join(n[0],n[1],0,1,m[0]),this.join(n[1],n[2],0,1,m[1]),this.join(n[2],n[0],0,1,m[2])}}break;default:{const e={k:0,pTask:null,pTask0:null,pTask1:null},i=D(),s=D();this.splitTask(e,i,s,t),this.solveTask(i),this.solveTask(s),this.solveMergeTask(e)}}}constructForConvexHull(){return E(0),!1}getOutsideHull(){const t=[],e=this.m_points[0].edge;let i=e;do{t.push(this.getPointFromEdge(this.getTwinEdge(i))),i=this.getNextDEdge(i,0)}while(i!==e);return t}getConvexHull(){const t=[],e=this.m_points[0].edge;let i=e;do{const e=this.getPointFromEdge(this.getTwinEdge(i));t.length<2||!this.insideLine(this.getPointXY(t.at(-2)),this.getPointXY(t.at(-1)),this.getPointXY(e))?t.push(e):t[t.length-1]=e,i=this.getNextDEdge(i,0)}while(i!==e);return 2<t.length&&this.insideLine(this.getPointXY(t[0]),this.getPointXY(t.at(-1)),this.getPointXY(t.at(-2)))&&t.pop(),2<t.length&&this.insideLine(this.getPointXY(t[1]),this.getPointXY(t[0]),this.getPointXY(t.at(-1)))&&(t[0]=t.at(-1),t.pop()),t}getVoronoiPolygon(t,e){t.length=0;const i=this.getEdgeFromPoint(e);let s=i;for(;;){const e=this.calculateCircleCenter(s);t.push(e);const n=this.getNextDEdge(s,1);if(n===i)break;s=n}}getNearestPoint(t){this.isInfinitePointFromPoint(t)&&f("Not supported for the infinite point");const e=this.getPointXY(t);let i=this.m_pointZero,s=Number.MAX_VALUE;const n=this.getEdgeFromPoint(t);let o=n;do{const t=this.getPointFromEdge(this.getTwinEdge(o));if(!this.isInfinitePointFromPoint(t)){const n=c.sqrDistance(e,this.getPointXY(t));n<s&&(i=t,s=n)}o=this.getCounterClockwiseEdge(o)}while(o!==n);return i}addConstraint(t,e){const i=[null],s=[null];if(!this.constraintFindFirstEdge(i,s,t,e))return T(s[0],i[0]);i[0]=this.getTwinEdge(i[0]);const n=this.getPointXY(t),o=this.getPointXY(e),r=[new Array(0),new Array(0)],h=i[0];for(;;){const t=this.getClockwiseEdge(s[0]);t.getMask()&&f("add_constraint");const h=T(t,this.getTwinEdge(t));this.deleteTwinEdges(h,!0);const g=this.getCounterClockwiseEdge(this.getTwinEdge(i[0])),d=this.getTwinEdge(this.getClockwiseEdge(s[0])),c=this.getPointFromEdge(d);if(c===e){r[0].push(i[0]),i[0]=g,r[1].push(s[0]),s[0]=d;break}const a=this.orientation(n,o,this.getPointXY(c));0===a&&f("add_constraint - point on constraint"),0<a?(r[0].push(i[0]),i[0]=g):(r[1].push(s[0]),s[0]=d)}r[0].push(i[0]),r[1].push(s[0]);const g=this.newPairEdge();g.first.setMask(),g.second.setMask(),this.join(s[0],h,1,1,g),this.triangulateConstraint(r[0],1,r[0].length-1,g),r[1].reverse();const d=T(g.second,g.first);return this.triangulateConstraint(r[1],1,r[1].length-1,d),d}verify(){for(let t=0,e=this.m_edges.length;t<e;t++){const e=this.m_edges[t];if(!e.getMask()&&!this.testEdge(e))return!1}return!0}getDelaunayTriangleCount(){return this.m_points.length-2<<1}getSmallestEnclosingCircle(){return E(0),{}}getVoronoiSegments(t=Number.MAX_VALUE){const e=[];for(let i=0,s=this.m_edges.length;i<s;i+=2){const s=T(null,null);if(s.first=this.m_edges[i],s.second=s.first.twin,this.isInfinitePointFromEdge(s.first)&&(s.second=_(s.first,s.first=s.second)),this.isInfinitePointFromEdge(s.second)){const i=d(c,3);i[0]=this.calculateCircleCenter(this.getNextDEdge(s.first,0).twin,1),i[2]=this.calculateCircleCenter(this.getNextDEdge(s.first,1),1);const n=d(c,2);n[0].assign(i[0]),n[1].assign(i[2]),n[0].rightPerpendicularThis(),n[1].leftPerpendicularThis(),i[1]=i[0].add(n[0]).add(i[2].add(n[1])),i[1].normalize();for(const e of i)e.mulThis(t);const o=I();o.points[0]=s.first.p,o.points[1]=s.second.p;for(let t=0;t<i.length-1;t++){for(let e=0;e<2;e++)o.p[e]=i[t+e];o.p[0].equals(o.p[1])||e.push(o)}}else if(this.isInfinitePointFromEdge(this.getNextDEdge(s.first,0).twin)&&this.isInfinitePointFromEdge(this.getNextDEdge(s.first,1).twin)){const t=d(c,3);t[0]=this.calculateCircleCenter(s.first),t[1]=this.getPointXY(this.getPointFromEdge(s.first)).add(this.getPointXY(this.getPointFromEdge(s.second))).mul(.5),t[2]=this.calculateCircleCenter(s.second);const i=I();i.points[0]=s.first.p,i.points[1]=s.second.p;for(let s=0;s<t.length-1;s++){for(let e=0;e<2;e++)i.p[e]=t[s+e];i.p[0].equals(i.p[1])||e.push(i)}}else{const t=I();t.p[0]=this.calculateCircleCenter(s.first),t.p[1]=this.calculateCircleCenter(s.second),t.points[0]=s.first.p,t.points[1]=s.second.p,t.p[0].equals(t.p[1])||e.push(t)}}return e}startDelaunayTriangles(){return-1}nextDelaunayTriangle(t,e){for(;;){if(++e[0],e[0]===this.m_edges.length)return!1;const i=this.m_edges[e[0]];if(t.p[0]=this.getPointFromEdge(i),this.isInfinitePointFromPoint(t.p[0]))continue;const s=this.getTwinEdge(i);if(t.p[1]=this.getPointFromEdge(s),this.isInfinitePointFromPoint(t.p[1]))continue;if(this.getPointXY(t.p[1]).lt(this.getPointXY(t.p[0])))continue;const n=this.getTwinEdge(this.getNextDEdge(i,1));if(t.p[2]=this.getPointFromEdge(n),!this.isInfinitePointFromPoint(t.p[2])&&!this.getPointXY(t.p[2]).lt(this.getPointXY(t.p[0])))return!0}}getPointCount(){return this.m_points.length-1}getPoint(t){return this.m_points[t+1]}getInfinitePoint(){return this.m_pointZero}isInfinitePointFromPoint(t){return t===this.m_pointZero}getPointXY(t){return t.p}getPointIndex(t){return t.userData}setPointIndex(t,e){t.userData=e}getEdgeFromPoint(t){return t.edge}isInfinitePointFromEdge(t){return t.p===this.m_pointZero}getEdgeCount(){return this.m_edges.length}getEdge(t){return this.m_edges[t]}getEdgeIndex(t){return t.getIndex()}getPointFromEdge(t){return t.p}getPointXYFromEdge(t){return t.p.p}getCounterClockwiseEdge(t){return t.a[0]}getClockwiseEdge(t){return t.a[1]}getTwinEdge(t){return t.twin}getPreviousEdge(t){return this.getTwinEdge(this.getCounterClockwiseEdge(t))}getNextEdge(t){return this.getClockwiseEdge(this.getTwinEdge(t))}getPairEdgeFromPoint(t){return E(0),{}}getNextDEdge(t,e=1){return t.a[e]}newPairEdge(){const t=T(this.m_nextFreePairEdge.first,this.m_nextFreePairEdge.second);return this.m_nextFreePairEdge.first=this.m_nextFreePairEdge.first.nextFreeEdge(),this.m_nextFreePairEdge.second=this.m_nextFreePairEdge.second.nextFreeEdge(),t.first.twin=t.second,t.second.twin=t.first,t}newPairEdgeEx(t,e){let i;if(e&&null!==this.m_nextFreePairEdge.first)i=T(this.m_nextFreePairEdge.first,this.m_nextFreePairEdge.second),this.m_nextFreePairEdge.first=this.m_nextFreePairEdge.first.nextFreeEdge(),this.m_nextFreePairEdge.second=this.m_nextFreePairEdge.second.nextFreeEdge();else{const e=t[0]++,s=t[0]++;i=T(this.m_edges[e],this.m_edges[s])}return i.first.twin=i.second,i.second.twin=i.first,i}insertEdge(t,e,i){e.p=t.p;const s=t.a[i],n=e.a;n[i]=s,n[1-i]=t,t.a[i]=e,s.a[1-i]=e}insertPoint(t,e){const i=this.m_points[t],s=this.newPairEdgeEx(e,!1),n=s.first,o=s.second;i.edge=s.first,n.p=this.m_points[t],n.a[0]=s.first,n.a[1]=s.first,o.p=this.m_pointZero,o.a[0]=s.second,o.a[1]=s.second,null===this.m_points[0].edge&&(this.m_points[0].edge=s.second)}deleteTwinEdges(t,e){this.deleteEdge(t.first),this.deleteEdge(t.second),e&&(t.first.twin=this.m_nextFreePairEdge.first,t.second.twin=this.m_nextFreePairEdge.second,this.m_nextFreePairEdge=t)}join(t,e,i,s,n){this.insertEdge(t,n.first,i),this.insertEdge(e,n.second,s)}joinEdges2(t,e){t.a[1]=e,e.a[0]=t}joinEdges4(t,e,i,s){E(0)}checkEdge(t,e,i,s,n){for(;;){const o=T(null,null);if(o.first=this.getNextDEdge(t.first,s),o.second=o.first.twin,this.isInfinitePointFromEdge(o.second))return t;const r=this.getPointXYFromEdge(t.second),h=this.getPointXYFromEdge(o.second);if(this.inCircle(e,i,r,h)<=0)return t;if(this.deleteTwinEdges(t,n),!n){const e=this.getNextDEdge(t.second,s).twin;this.join(o.second,e,s,s,t)}t=o}}calculateCircleCenter(t,e=Number.MAX_VALUE){const i=this.getPointXYFromEdge(t),s=this.getPointXYFromEdge(t.twin),n=this.getNextDEdge(t,0);if(this.isInfinitePointFromEdge(n.twin)){const t=new c;if(Number.isNaN(e))t.setNAN();else{const n=s.sub(i);n.leftPerpendicularThis(),t.assign(n),t.divThis(Math.max(Math.abs(t.x),Math.abs(t.y))),t.normalize(),t.mulThis(e)}return t}const o=this.getPointXYFromEdge(n.twin);return this.calculateCircleCenterFromThreePoints(i,s,o)}createZeroHandle(){return this.m_points[0]}deleteEdge(t){const e=t,i=e.p;i.edge===t&&(i.edge=e.a[0]),e.a[0].a[1]=e.a[1],e.a[1].a[0]=e.a[0]}testEdge(t){if(this.isInfinitePointFromEdge(t))return!0;const e=t.twin;if(this.isInfinitePointFromEdge(e))return!0;const i=this.getNextDEdge(t,0).twin,s=this.getNextDEdge(e,0).twin;if(this.isInfinitePointFromEdge(i)||this.isInfinitePointFromEdge(s))return!0;const n=this.getPointXYFromEdge(t),o=this.getPointXYFromEdge(e),r=this.getPointXYFromEdge(i),h=this.getPointXYFromEdge(s);return!(this.orientation(n,o,r)<=0)&&!(0<=this.orientation(n,o,h))&&this.inCircle(n,o,r,h)<=0}findMaxSide(t,e){const i=[this.m_points[t].p.clone(),this.m_points[t].p.clone()];for(t++;t!==e;t++){const e=this.m_points[t].p;e.x<i[0].x&&(i[0].x=e.x),i[1].x<e.x&&(i[1].x=e.x),e.y<i[0].y&&(i[0].y=e.y),i[1].y<e.y&&(i[1].y=e.y)}return i[1].x-i[0].x<i[1].y-i[0].y?1:0}findEdge(t,e,i){let s=!1,n=0;for(;;){const o=T(null,null);if(o.second=this.getNextDEdge(t[n].second,i^n),o.first=o.second.twin,0===i&&this.orientation(this.getPointXYFromEdge(t[0].first),this.getPointXYFromEdge(t[1].first),this.getPointXYFromEdge(o.first))<0||1===i&&0<this.orientation(this.getPointXYFromEdge(t[0].first),this.getPointXYFromEdge(t[1].first),this.getPointXYFromEdge(o.first)))t[n]=o,e[n]=!0,s=!1;else{if(s)return;n^=1,s=!0}}}findEdgeSide(t,e,i,s){for(;;){const n=T(null,null);if(n.second=this.getNextDEdge(t[i].second,s^i),n.first=n.second.twin,!(0===s&&this.orientation(this.getPointXYFromEdge(t[0].first),this.getPointXYFromEdge(t[1].first),this.getPointXYFromEdge(n.first))<0||1===s&&0<this.orientation(this.getPointXYFromEdge(t[0].first),this.getPointXYFromEdge(t[1].first),this.getPointXYFromEdge(n.first))))return;t[i]=n,e[i]=!0}}merge(t,e,i,s,n){const o={...t},r={...s},h={...n};let g={...e},d={...i};const c=g.second,a=d.second;for(;;){if(this.join(g.first,d.first,0,1,h),g.first=this.getNextDEdge(h.first,0),d.first=this.getNextDEdge(h.second,1),g.first===o.first&&d.first===r.first){this.joinEdges2(c,a),this.joinEdges2(r.second,o.second);break}g.second=g.first.twin,d.second=d.first.twin;const t=this.getPointXYFromEdge(h.first),e=this.getPointXYFromEdge(h.second);if(g.first===o.first){let i=T(null,null);i.first=this.getNextDEdge(d.first,1),i.second=i.first.twin,i=this.checkEdge(i,t,e,1,!1),C(g,h),C(h,d),d=T(i.second,i.first)}else if(d.first===r.first){let i=T(null,null);i.first=this.getNextDEdge(g.first,0),i.second=i.first.twin,i=this.checkEdge(i,t,e,0,!1),d=T(h.second,h.first),C(h,g),g=T(i.second,i.first)}else{let i=T(null,null);i.first=this.getNextDEdge(g.first,0),i.second=i.first.twin,i=this.checkEdge(i,t,e,0,!1);let s=T(null,null);s.first=this.getNextDEdge(d.first,1),s.second=s.first.twin,s=this.checkEdge(s,t,e,1,!1);const n=this.getPointXYFromEdge(i.second),o=this.getPointXYFromEdge(s.second);let r=this.inCircle(t,e,n,o);0===r&&(r=this.orientation(t,e,o)),0<r?(C(g,h),C(h,d),d=T(s.second,s.first)):(d=T(h.second,h.first),C(h,g),g=T(i.second,i.first))}this.deleteTwinEdges(h,!1)}}mergeForConvexHull(t,e,i,s){E(0)}constructForConvexHullRecursive(t,e){E(0)}findEdgeClockwise(t,e,i,s,n,o){for(t[0]=s;;){e[0]=t[0],++e[0]===i.length&&(e[0]=0);const s=this.orientation(n,o,this.getPointXYFromEdge(i[e[0]]));if(s<=0)return s<0;t[0]=e[0]}}findEdgeCounterClockwise(t,e,i,s,n,o){for(e[0]=s;;){t[0]=0!==e[0]?e[0]:i.length,t[0]--;const s=this.orientation(n,o,this.getPointXYFromEdge(i[t[0]]));if(0<=s)return 0<s;e[0]=t[0]}}constraintFindFirstEdge(t,e,i,n){const o=[];{const s=this.getEdgeFromPoint(i);let r=s;do{const i=this.getTwinEdge(r);if(this.getPointFromEdge(i)===n)return t[0]=i,e[0]=r,t[0].setMask(),e[0].setMask(),!1;o.push(i),r=this.getClockwiseEdge(r)}while(r!==s)}o.length<3&&f("add_constraint");let r=-1;for(let t=0,e=o.length;t<e;t++)this.isInfinitePointFromEdge(o[t])&&(-1!==r&&f("add_constraint"),r=t);const h=this.getPointXY(i),g=this.getPointXY(n);let d,c;if(-1!==r)for(s(o,0,r+1,o.length),o.pop(),0===this.orientation(h,g,this.getPointXYFromEdge(o[0]))&&f("add_constraint - point on constraint"),0===this.orientation(h,g,this.getPointXYFromEdge(o.at(-1)))&&f("add_constraint - point on constraint"),d=0,c=o.length-1;d+1!==c;){const t=d+c>>1,e=this.orientation(h,g,this.getPointXYFromEdge(o[t]));0===e&&f("add_constraint - point on constraint"),0<e?d=t:c=t}else{let t=0,e=this.orientation(h,g,this.getPointXYFromEdge(o[t]));if(0!==e)if(0<e){const e=[0],i=[0];this.findEdgeClockwise(e,i,o,t,h,g)||f("add_constraint"),d=e[0],c=i[0]}else{const e=[0],i=[0];this.findEdgeCounterClockwise(e,i,o,t,h,g)||f("add_constraint"),d=e[0],c=i[0]}else{t++,e=this.orientation(h,g,this.getPointXYFromEdge(o[t])),e<=0&&f("add_constraint");const i=[0],s=[0];this.findEdgeClockwise(i,s,o,t,h,g)||f("add_constraint"),d=i[0],c=s[0]}}return t[0]=o[d],e[0]=o[c],!0}triangulateConstraint(t,e,i,s){if(e===i)return;let n=i;for(let o=e;o!==i;++o)this.inCircle(this.getPointXYFromEdge(s.first),this.getPointXYFromEdge(s.second),this.getPointXYFromEdge(t[n]),this.getPointXYFromEdge(t[o]))<0&&(n=o);if(n!==i){const e=this.newPairEdge();this.join(s.first,t[n],1,1,e),t[n]=e.second,this.triangulateConstraint(t,n+1,i,e)}if(n!==e){const i=this.newPairEdge();this.join(t[n],s.second,1,0,i),this.triangulateConstraint(t,e,n-1,i)}}insideLine(t,e,i){return 0===this.orientation(t,e,i)&&(e.x<t.x!=e.x<i.x||e.y<t.y!=e.y<i.y)}orientation(t,e,i){return c.orientationRobust(t,e,i)}inCircle(t,e,i,s){return c.inCircleRobust(t,e,i,s)}calculateCircleCenterFromThreePoints(t,e,i){return e.lt(t)&&(e=_(t,t=e)),i.lt(e)&&(i=_(e,e=i)),e.lt(t)&&(e=_(t,t=e)),c.calculateCircleCenterFromThreePoints(t,e,i)}compare(t,e){return 3*((Y(t[0]<e[0])<<1)+Y(t[0]>e[0]))+(Y(t[1]<e[1])<<1)+Y(t[1]>e[1])-1}caseFromCompare(t,e,i){return(this.compare(t,e)<<6)+(this.compare(t,i)<<3)+this.compare(e,i)}}function Y(t){return t?1:0}function N(t,e,i){return t[i]!==e[i]?t[i]<e[i]:t[1-i]<e[1-i]}function v(t){return 255&t}X.c_aTableDelaunayTriangulationSolution=Uint8Array.from([41,74,0,0,0,0,0,0,0,206,0,0,0,0,0,0,0,0,0,0,65,0,0,0,0,0,33,33,65,0,0,0,0,0,0,0,193,0,0,0,0,0,0,0,0,0,0,214,0,0,0,0,0,86,54,86,0,0,0,0,0,0,0,214,173,0,0,0,0,0,0,0,107,239,0,0,0,0,0,0,0,0,0,181,0,0,0,0,0,0,0,181,0,0,0,0,0,0,117,117,245,0,0,0,0,0,0,0,0,0,103,0,0,0,0,0,0,0,167,0,0,0,0,0,0,231,103,231,0,0,0,0,0,0,50,0,0,0,0,0,0,0,0,198,0,0,41,0,0,74,0,0,49,0,0,49,0,0,50,0,0,194,0,0,193,0,0,194,0,0,0,0,0,206,0,0,0,0,0,0,0,0,54,0,0,0,0,0,0,0,0,198,0,0,0,0,0,82,50,82,0,0,0,0,0,0,0,198,0,66,0,0,65,0,0,66,49,66,33,57,65,82,50,90,0,194,0,0,193,0,0,194,0,0,0,0,0,0,0,214,0,0,0,0,0,86,54,86,0,0,0,0,0,0,0,222,0,0,0,0,0,0,178,0,0,0,0,0,0,230,102,230,177,0,0,177,0,0,178,0,177,0,0,177,0,0,178,0,113,226,113,113,249,226,122,226,0,0,0,0,0,0,102,0,0,0,0,0,0,0,190,0,0,0,0,0,0,230,102,230,0,0,0,165,0,0,0,0,0,0,0,0,243,0,0,0,0,0,173,0,0,0,0,0,0,0,0,165,0,0,0,0,0,0,0,0,245,0,0,0,0,0,107,0,0,239,0,0,163,0,0,163,0,0,167,0,0,247,0,0,243,0,0,247,0,0,37,37,69,0,0,0,0,0,0,0,211,0,0,0,0,0,0,0,69,0,0,0,0,0,37,37,69,0,0,0,0,0,0,0,221,0,0,0,0,215,0,0,211,0,0,215,35,87,35,35,91,87,63,87,0,215,0,0,211,0,0,215,0,0,0,165,0,0,0,0,0,0,115,115,243,0,0,0,0,0,0,181,0,0,0,0,0,0,0,189,0,0,0,0,0,0,117,117,245,0,0,0,99,0,0,99,0,0,103,0,163,0,0,163,0,0,167,0,99,247,115,123,243,231,103,255]);class A{constructor(t){this.m_numberOfSets=t,this.m_elements=Array.from({length:t},((t,e)=>e)),this.m_sizes=F(t,1)}getNumberOfSets(){return this.m_numberOfSets}connected(t,e){return this.findRoot(t)===this.findRoot(e)}connect(t,e){const i=this.findRoot(t),s=this.findRoot(e);return i!==s&&(this.m_sizes[i]<this.m_sizes[s]?(this.m_sizes[s]+=this.m_sizes[i],this.m_elements[i]=s):(this.m_sizes[i]+=this.m_sizes[s],this.m_elements[s]=i),--this.m_numberOfSets,!0)}connectRange(t,e,i){if(e!==i)for(let s=e;s<i;++s)this.connect(t[e],t[s])}size(){return this.m_elements.length}size1(t){return E(0),0}findRoot(t){let e=t;if(this.m_elements[e]!==e)do{this.m_elements[e]=this.m_elements[this.m_elements[e]],e=this.m_elements[e]}while(this.m_elements[e]!==e);return e}}class S extends t{alphaShapeConstruct(t,i){const s=t.getEdgeCount(),n=new e({vd:this.m_vertexDescription});if(!n)throw new Error("alphaShapeConstruct");for(let e=0;e<s;++e){if(2!==i[e])continue;const s=T(null,null);if(s.first=t.getEdge(e),s.second=t.getTwinEdge(s.first),1!==i[t.getEdgeIndex(s.second)])continue;t.getPointXYFromEdge(s.first),n.startPath(t.getPointXYFromEdge(s.first));let o=e,r=s.second;for(;;){for(i[o]=3,r=t.getCounterClockwiseEdge(r);1===i[t.getEdgeIndex(r)];)r=t.getCounterClockwiseEdge(r);if(r===s.first)break;n.lineTo(t.getPointXYFromEdge(r)),o=t.getEdgeIndex(r),r=t.getTwinEdge(r)}}return n}alphaShape(t,e){const i=t.getEdgeCount(),s=new Uint8Array(i);for(let n=0;n<i;++n){if(0!==s[n])continue;const i={p:[null,null,null]},o=t.getEdge(n);i.p[0]=t.getPointFromEdge(o);const r=t.getClockwiseEdge(t.getTwinEdge(o));i.p[1]=t.getPointFromEdge(r);const h=t.getEdgeIndex(r),g=t.getClockwiseEdge(t.getTwinEdge(r));i.p[2]=t.getPointFromEdge(g);const a=t.getEdgeIndex(g);let l=1;for(let e=0;e<3;++e)if(t.isInfinitePointFromPoint(i.p[e])){l=2;break}if(1===l){const s=d(c,3);for(let e=0;e<3;++e)s[e]=t.getPointXY(i.p[e]);const n=c.sqrDistance(s[0],s[1]),o=c.sqrDistance(s[1],s[2]),r=c.sqrDistance(s[2],s[0]),h=2*s[1].sub(s[0]).crossProduct(s[2].sub(s[0]));e<n*o*r/(h*h)&&(l=2)}s[n]=s[h]=s[a]=l}return this.alphaShapeConstruct(t,s)}alphaShapeAlphaOut(t,e){const i=t.getEdgeCount(),s=new Uint8Array(i),n=[],o=new A(t.getPointCount());for(let e=0;e<i;++e){if(0!==s[e])continue;const i={p:[null,null,null]},o=t.getEdge(e);i.p[0]=t.getPointFromEdge(o);const r=t.getClockwiseEdge(t.getTwinEdge(o));i.p[1]=t.getPointFromEdge(r);const h=t.getEdgeIndex(r),g=t.getClockwiseEdge(t.getTwinEdge(r));i.p[2]=t.getPointFromEdge(g);const d=t.getEdgeIndex(g);let a=1;for(let e=0;e<3;++e)if(t.isInfinitePointFromPoint(i.p[e])){a=2;break}if(1===a){const s=new Array(3);for(let e=0;e<3;++e)s[e]=t.getPointXY(i.p[e]);const o=c.sqrDistance(s[0],s[1]),r=c.sqrDistance(s[1],s[2]),g=c.sqrDistance(s[2],s[0]),l=s[1].sub(s[0]).crossProduct(s[2].sub(s[0])),u=P(Number.NaN,P([0,0,0],[0,0,0]));u.first=o*r*g/(l*l),u.second.first[0]=e,u.second.first[1]=h,u.second.first[2]=d,u.second.second[0]=t.getPointIndex(i.p[0]),u.second.second[1]=t.getPointIndex(i.p[1]),u.second.second[2]=t.getPointIndex(i.p[2]),n.push(u),a=2}s[e]=s[h]=s[d]=a}n.sort(((t,e)=>function(t,e){if(t.first!==e.first)return t.first-e.first;let i=t.second.first,s=e.second.first;for(let t=0;t<3;++t)if(i[t]!==s[t])return i[t]-s[t];i=t.second.second,s=e.second.second;for(let t=0;t<3;++t)if(i[t]!==s[t])return i[t]-s[t];return 0}(t,e)));let r=0;for(const t of n){if(1===o.getNumberOfSets()&&t.first!==r)break;s[t.second.first[0]]=s[t.second.first[1]]=s[t.second.first[2]]=1;const e=[t.second.second[0],t.second.second[1],t.second.second[2]];o.connectRange(e,0,3),r=t.first}return e&&(e[0]=.25*r),this.alphaShapeConstruct(t,s)}constructor(t,e,i,s){super(),this.m_multiPointForAttributes=null,this.m_inputGeometryCursor=null,this.m_index=-1,this.m_nDelaunayPoints=0,this.m_cDelaunay=new X,this.m_vertexDescription=null,this.m_progressTracker=s,this.m_alpha=Number.isNaN(e)||!Number.isFinite(e)||e<0?-1:e<Number.MIN_VALUE?0:e,this.m_bMerge=i,this.m_bDone=!1,this.m_inputGeometryCursor=t,this.prepareDelaunay()}prepareDelaunay(){this.m_nDelaunayPoints=0,this.m_cDelaunay.clear(),0!==this.m_alpha&&this.m_cDelaunay.prepare(a())}next(){if(this.m_bMerge){if(!this.m_bDone){const t=this.calculateAlphaShapeMerging(this.m_inputGeometryCursor,this.m_progressTracker);return this.m_bDone=!0,t}return null}if(!this.m_bDone){const t=this.m_inputGeometryCursor.next();if(null!==t)return l(t),u(t),this.m_index=this.m_inputGeometryCursor.getGeometryID(),this.calculateAlphaShape(t,this.m_progressTracker);this.m_bDone=!0}return null}tock(){return!0}getRank(){return 1}getGeometryID(){return this.m_index}calculateAlphaShapeMerging(t,e){let i;for(;i=t.next();)l(i),u(i),this.addGeometry(i);return this.buildAlphaShape()}calculateAlphaShape(t,i){return t.isEmpty()?new e({vd:t.getDescription()}):(this.prepareDelaunay(),this.addGeometry(t),this.buildAlphaShape())}buildAlphaShape(t=null){if(t&&(t[0]=this.m_alpha),0===this.m_alpha)return this.m_vertexDescription?new e({vd:this.m_vertexDescription}):new e;if(this.m_cDelaunay.removeDuplicates())for(let t=0,e=this.m_cDelaunay.getPointCount();t<e;++t)this.m_cDelaunay.setPointIndex(this.m_cDelaunay.getPoint(t),t);return this.m_cDelaunay.construct()?this.m_alpha<0?this.alphaShapeAlphaOut(this.m_cDelaunay,t):this.alphaShape(this.m_cDelaunay,this.m_alpha):this.m_vertexDescription?new e({vd:this.m_vertexDescription}):new e}addGeometry(t){if(l(t),u(t),0===this.m_alpha)return;if(this.m_vertexDescription&&this.m_bMerge||(this.m_vertexDescription=t.getDescription(),this.m_vertexDescription.getAttributeCount()>1?this.m_multiPointForAttributes=new i({vd:this.m_vertexDescription}):this.m_multiPointForAttributes=null),t.isEmpty())return;const e=t.getGeometryType();if(m(e)){const e=t,i=new c;for(let t=0,s=e.getPointCount();t<s;t++)e.queryXY(t,i),this.m_cDelaunay.addVertex(i,this.m_nDelaunayPoints++);this.m_multiPointForAttributes&&this.m_multiPointForAttributes.addPoints(e,0,-1)}else if(e===p.enumPoint){const e=t,i=e.getXY();this.m_cDelaunay.addVertex(i,this.m_nDelaunayPoints++),this.m_multiPointForAttributes&&this.m_multiPointForAttributes.add(e)}else f("bad geometry type")}}const M=new class{getOperatorType(){return 10112}accelerateGeometry(t,e,i){return!1}canAccelerateGeometry(t){return!1}supportsCurves(){return!1}executeMany(t,e,i,s){return new S(t,e,i,s)}execute(t,e,i,s=null){const n=new S(null,e,!1,i);return n.addGeometry(t),n.buildAlphaShape(s)}};function U(t,e){const i=r(t),s=[0],n=h(function(t,e,i){return M.execute(t,e,null,i)}(g(t),e,s),i);return{alphaShape:n,calculatedAlpha:s[0]}}function G(t,e,i={}){const{merge:s=!1}=i,n=t.map(g),d=r(t);return function(t,e,i){const s=M.executeMany(new o(t),e,i,null);return Array.from(s)}(n,e,s).map((t=>h(t,d)))}function q(){return M.supportsCurves()}export{U as execute,G as executeMany,q as supportsCurves};
