/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.31/esri/copyright.txt for details.
*/
import{J as s,H as r,ad as t,n as o}from"../../chunks/unitUtils.js";import{aO as i,g as e,c as n,f as c}from"../../chunks/converterAPI.js";import"../../chunks/Transformation2D.js";import{g as p}from"../../chunks/geodeticCurveType.js";import"../../core/lang.js";import"../../chunks/jsonMap.js";import"../../config.js";import"../../chunks/Logger.js";import"../../chunks/assets.js";import"../../request.js";import"../../kernel.js";import"../../core/urlUtils.js";import"../../core/Error.js";import"../../core/JSONSupport.js";import"../../chunks/tslib.es6.js";import"../../core/Accessor.js";import"../../core/Handles.js";import"../../chunks/maybe.js";import"../../core/accessorSupport/decorators/subclass.js";import"../../chunks/metadata.js";import"../../chunks/utils.js";import"../../chunks/handleUtils.js";import"../../chunks/tracking.js";import"../../chunks/ensureType.js";import"../../core/accessorSupport/decorators/property.js";import"../../chunks/ObservableBase.js";import"../../core/scheduling.js";import"../../core/promiseUtils.js";import"../../geometry.js";import"../Extent.js";import"../Geometry.js";import"../../chunks/reader.js";import"../SpatialReference.js";import"../../chunks/writer.js";import"../Point.js";import"../../core/accessorSupport/decorators/cast.js";import"../support/webMercatorUtils.js";import"../Multipoint.js";import"../../chunks/zmUtils.js";import"../Polygon.js";import"../../chunks/coordsUtils.js";import"../../chunks/Axis.js";import"../../chunks/extentUtils.js";import"../../chunks/boundsUtils.js";import"../../chunks/aaBoundingRect.js";import"../../chunks/mathUtils.js";import"../Polyline.js";import"../../chunks/typeUtils.js";import"../support/jsonUtils.js";let m;function u(){return!!m&&r()}function j(){return u()}function a(){return async function(){if(!u()){const[r]=await Promise.all([import("../../chunks/OperatorGeodeticDistance.js"),s()]);m=new r.OperatorGeodeticDistance,i(t)}}()}function l(s,r,t={}){const{curveType:i="geodesic",unit:u}=t,j=e(s);let a=function(s,r,t,o){return m.execute(s,r,t,o,null)}(c(s),c(r),n(j),p[i]);return a&&u&&(a=o(a,"meters",u)),a}function h(){return m.supportsCurves()}export{l as execute,j as isLoaded,a as load,h as supportsCurves};
