/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.31/esri/copyright.txt for details.
*/
import{_ as e}from"../../../chunks/tslib.es6.js";import t from"../../../core/Accessor.js";import"../../../core/lang.js";import{d as s}from"../../../chunks/maybe.js";import{property as i}from"../../../core/accessorSupport/decorators/property.js";import{L as r}from"../../../chunks/Logger.js";import{subclass as n}from"../../../core/accessorSupport/decorators/subclass.js";import{d as o}from"../../../chunks/defaultUnit.js";import{A as a}from"../../../chunks/AnalysisView3D.js";import{M as h}from"../../../chunks/interfaces4.js";import{watch as l,sync as c,syncAndInitial as u,initial as p}from"../../../core/reactiveUtils.js";import{d,o as m}from"../../../chunks/mathUtils.js";import{d as g,t as _,b as f}from"../../../chunks/quantityUtils.js";import{al as y,V as v,t as j,n as k,a9 as w,a8 as L,a6 as S,a4 as M}from"../../../chunks/unitUtils.js";import{g as b,u as P,m as C}from"../../../chunks/vec2.js";import{c as V,f as A}from"../../../chunks/vec2f64.js";import{i as x,g as D,a as G,n as U,o as R,c as T,y as O,d as I,s as E}from"../../../chunks/vec3.js";import{c as z}from"../../../chunks/vec3f64.js";import{c as F,f as W}from"../../../chunks/vec4f64.js";import{canProjectWithoutEngine as q,tryProjectWithZConversion as B}from"../../../geometry/projection.js";import{g as H}from"../../../chunks/spatialReferenceEllipsoidUtils.js";import{p as N}from"../../../chunks/projectVectorToVector.js";import{p as Q}from"../../../chunks/projectPointToVector.js";import{A as $}from"../../../chunks/Axis.js";import{c as J}from"../../../chunks/Indices.js";import{s as K}from"../../../geometry/Extent.js";import{b as X}from"../../../chunks/sphere.js";import{a as Z}from"../../../chunks/triangle.js";import{b as Y,f as ee,t as te,p as se,a as ie}from"../../../chunks/measurementUtils.js";import{g as re}from"../../../chunks/ElevationProvider.js";import{m as ne,c as oe,t as ae}from"../../../chunks/mathUtils2.js";import{t as he}from"../../../chunks/euclideanAreaMeasurementUtils.js";import{c as le,f as ce}from"../../../chunks/euclideanLengthMeasurementUtils.js";import{b as ue,g as pe}from"../../../chunks/geodesicLengthMeasurementUtils.js";import{s as de}from"../../../chunks/geodesicMeasurementUtils.js";import me from"../../../core/Evented.js";import ge from"../../../geometry/Point.js";import{e as _e,l as fe}from"../../../chunks/aaBoundingRect.js";import{l as ye,L as ve}from"../../../chunks/LineVisualElement.js";import{E as je,a as ke,c as we,C as Le}from"../../../chunks/EditGeometryOperations.js";import"../../../intl.js";import{u as Se,j as Me,e as be,B as Pe,m as Ce}from"../../../chunks/colorUtils2.js";import{a as Ve}from"../../../chunks/quantityFormatUtils.js";import{y as Ae,b as xe}from"../../../chunks/mat4.js";import{c as De}from"../../../chunks/mat4f64.js";import{L as Ge,G as Ue,E as Re}from"../../../chunks/Segment.js";import{e as Te,c as Oe}from"../../../chunks/vec4.js";import{O as Ie}from"../../../chunks/Object3DVisualElement.js";import{A as Ee}from"../../../chunks/Attribute.js";import{S as ze,j as Fe,t as We,o as qe,d as Be,b as He,F as Ne,C as Qe,k as $e,l as Je,E as Ke,m as Xe,p as Ze,q as Ye,r as et,I as tt,J as st,K as it,i as rt,a as nt,G as ot}from"../../../chunks/StencilUtils.js";import{b as at,R as ht}from"../../../chunks/Material.js";import{V as lt}from"../../../chunks/VertexAttribute.js";import{S as ct,i as ut}from"../../../chunks/Matrix4PassUniform.js";import{a as pt}from"../../../chunks/AlphaCutoff.js";import{D as dt}from"../../../chunks/RayIntersections.js";import{P as mt}from"../../../chunks/DefaultLayouts.js";import{T as gt}from"../../../chunks/TriangleMaterial.js";import{g as _t}from"../../../chunks/interfaces3.js";import{m as ft,d as yt}from"../../../chunks/renderState.js";import{p as vt}from"../../../chunks/ShaderTechniqueConfiguration.js";import{c as jt}from"../../../chunks/lineStippleUtils.js";import{o as kt}from"../../../chunks/locale.js";import{f as wt}from"../../../chunks/messages.js";import"../../../core/Handles.js";import"../../../chunks/metadata.js";import"../../../chunks/utils.js";import"../../../chunks/handleUtils.js";import"../../../chunks/ObservableBase.js";import"../../../chunks/tracking.js";import"../../../core/scheduling.js";import"../../../core/promiseUtils.js";import"../../../core/Error.js";import"../../../config.js";import"../../../chunks/ensureType.js";import"../../../chunks/getDefaultUnitForView.js";import"../../../portal/Portal.js";import"../../../kernel.js";import"../../../core/urlUtils.js";import"../../../core/JSONSupport.js";import"../../../request.js";import"../../../core/Loadable.js";import"../../../core/Promise.js";import"../../../chunks/reader.js";import"../../../portal/PortalGroup.js";import"../../../portal/PortalQueryParams.js";import"../../../chunks/jsonMap.js";import"../../../geometry/SpatialReference.js";import"../../../chunks/writer.js";import"../../../chunks/assets.js";import"../../../geometry/support/webMercatorUtils.js";import"../../../geometry/Geometry.js";import"../../../core/accessorSupport/decorators/cast.js";import"../../../portal/PortalQueryResult.js";import"../../../portal/PortalUser.js";import"../../../portal/PortalFolder.js";import"../../../chunks/asyncUtils.js";import"../../../core/Collection.js";import"../../../chunks/shared.js";import"../../../chunks/SimpleObservable.js";import"../../../chunks/common.js";import"../../../geometry/Multipoint.js";import"../../../chunks/zmUtils.js";import"../../../geometry/Polygon.js";import"../../../chunks/coordsUtils.js";import"../../../chunks/extentUtils.js";import"../../../chunks/boundsUtils.js";import"../../../geometry/Polyline.js";import"../../../chunks/projectBuffer.js";import"../../../chunks/geodesicConstants.js";import"../../../geometry/support/GeographicTransformation.js";import"../../../geometry/support/GeographicTransformationStep.js";import"../../../chunks/zscale.js";import"../../../chunks/dehydratedPoint.js";import"../../../chunks/ray.js";import"../../../chunks/mat3.js";import"../../../chunks/mat3f64.js";import"../../../chunks/plane.js";import"../../../chunks/quatf64.js";import"../../../chunks/lineSegment.js";import"../../../chunks/geodesicAreaMeasurementUtils.js";import"../../../geometry/geometryEngine.js";import"../../../geometry.js";import"../../../chunks/typeUtils.js";import"../../../geometry/support/jsonUtils.js";import"../../../chunks/geometryEngineBase.js";import"../../../chunks/_commonjsHelpers.js";import"../../../chunks/hydrated.js";import"../../../geometry/support/geodesicUtils.js";import"../../../chunks/dehydratedFeatureUtils.js";import"../../../chunks/earcut.js";import"../../../chunks/line.js";import"../../../chunks/aaBoundingBox.js";import"../../../chunks/ViewingMode.js";import"../../../chunks/RibbonLineMaterial.js";import"../../../chunks/basicInterfaces.js";import"../../../chunks/Util.js";import"../../../chunks/sdfPrimitives.js";import"../../../chunks/doublePrecisionUtils.js";import"../../../chunks/floatRGBA.js";import"../../../chunks/enums.js";import"../../../chunks/Octree.js";import"../../../chunks/frustum.js";import"../../../chunks/screenUtils.js";import"../../../chunks/InterleavedLayout.js";import"../../../chunks/BufferView.js";import"../../../chunks/types.js";import"../../../chunks/RgbaFloatEncoding.glsl.js";import"../../../chunks/Texture.js";import"../../../chunks/GLObjectType.js";import"../../../chunks/compilerUtils.js";import"../../../chunks/geometry2dUtils.js";import"../../../chunks/date.js";import"../../../chunks/datetime.js";import"../../../chunks/number.js";import"../../../chunks/substitute.js";import"../../../Color.js";import"../../../chunks/colorUtils.js";import"../../../chunks/Cyclical.js";import"../../../chunks/unitFormatUtils.js";import"../../../chunks/ByteSizeUnit.js";import"../../../chunks/viewUtils.js";import"../../../chunks/elevationInfoUtils.js";import"../../../chunks/unitConversionUtils.js";import"../../../chunks/lengthUtils.js";import"../../../chunks/VisualElement.js";import"../../../chunks/projector.js";import"../../../chunks/widgetUtils.js";import"../../../chunks/TextOverlayItem.js";import"../../../chunks/BindType.js";import"../../../chunks/debugFlags2.js";import"../../../chunks/requestImageUtils.js";import"../../../chunks/boundedPlane.js";function Lt(e,t,s,i,r){x(St,e),D(Mt,e,t),N(St,s,St,r),N(Mt,s,Mt,r),G(i,Mt,St),U(i,i)}const St=z(),Mt=z();class bt{get numVertices(){return this._length}get hasStagedVertex(){return this._hasCursorPoint}constructor(e){this.validMeasurement=!1,this.positionsWorld=[],this.positionsRender=[],this.positionsFittedWorld=[],this.positionsFittedRender=[],this.positionsGeodesic=[],this.positionsSpherical=[],this.positionsStereographic=[],this.pathSegmentLengths=[],this.geodesicPathSegmentLengths=[],this.perimeterSegmentLengths=[],this.intersectingSegments=new Set,this.geodesicIntersectingSegments=new Set,this.triangleIndices=null,this.geodesicTriangleIndices=null,this.areaCentroidWorldCoords=z(),this.areaCentroidRenderCoords=z(),this.geodesicAreaCentroidRenderCoords=z(),this.fittingMode=null,this.area=null,this.geodesicArea=null,this.pathLength=null,this.geodesicPathLength=null,this.perimeterLength=null,this._length=0,this._centroidRenderCoords=z(),this._planeWorldCoords=F(),this._worldUp=z(),this._worldTangent=z(),this._frame=[z(),z(),z()],this._pathVersion=-1,this._hasCursorPoint=!1,this._mode=null,this._tempU=z(),this._tempV=z(),this._tempVec3=z(),this._tempSphere=X(),this._sceneView=e;const t=le(e.spatialReference);this._measurementSR=t,this._lengthMeasurementUnit=y(t)??"meters",this._areaMeasurementUnit=v(t)??"square-meters"}update(e,t,s,i,r,n){const o=null!=t,a=this._pathVersion===e.version,h=this._hasCursorPoint===o,l=this._mode===r;return!(a&&!n&&h&&l&&e.isValidPolygon||(this._pathVersion=e.version,this._hasCursorPoint=o,this._updateCursorSegmentLength(e,t),this._update(e,t,s,i,r),0))}_update(e,t,s,i,r){const n=this._sceneView.renderSpatialReference,o=this._measurementSR,a=s.spatialReference;let h=e.numVertices;const l=!(null==t||t.equals(e.lastPoint)||h>2&&t.equals(e.firstPoint));l&&(h+=1);const c=!e.polygonIsClosed&&h>2,u=e.polygonIsClosed||c;this._resize(h);const p=H(a),d=null!=a&&de(a)?a:null,m=null!=d&&q(a,p),{positionsGeodesic:_,positionsWorld:f,positionsRender:y,positionsSpherical:v}=this,j=(e,t)=>{!function(e,t){t.hasZ||(t.z=re(e,t,"ground")??0)}(s.elevationProvider,e),Q(e,f[t],o),Q(e,y[t],n),m&&(Q(e,_[t],d),Q(e,v[t],p),U(v[t],v[t]))};e.forEachVertexPosition(((e,t)=>j(e,t))),l&&j(t,h-1);const k=this._updatePathLengths(u);if(this.pathLength=this._length>1?g(k,this._lengthMeasurementUnit):null,m){const e=this._updateGeodesicPathLengths(u,d);this.geodesicPathLength=null!=e&&this._length>1?e:null}else this.geodesicPathLength=null;if(this._updateMode(r),!u)return this.area=null,this.geodesicArea=null,this.perimeterLength=null,this.triangleIndices=null,this.geodesicTriangleIndices=null,this.intersectingSegments.clear(),this.geodesicIntersectingSegments.clear(),void(this.validMeasurement=!1);this._updateAreaAndPerimeterLength(s,n,o,i),m&&this._updateGeodesicArea(s,d),this.validMeasurement=!0}getData(){return{validMeasurement:this.validMeasurement,numVertices:this.numVertices,hasStagedVertex:this.hasStagedVertex,positionsRender:this.positionsRender,positionsFittedWorld:this.positionsFittedWorld,positionsFittedRender:this.positionsFittedRender,intersectingSegments:this.intersectingSegments,geodesicIntersectingSegments:this.geodesicIntersectingSegments,triangleIndices:this.triangleIndices,geodesicTriangleIndices:this.geodesicTriangleIndices,areaCentroidRenderCoords:this.areaCentroidRenderCoords,geodesicAreaCentroidRenderCoords:this.geodesicAreaCentroidRenderCoords,area:this.area,geodesicArea:this.geodesicArea,pathLength:this.pathLength,geodesicPathLength:this.geodesicPathLength,perimeterLength:this.perimeterLength,actualMeasurementMode:this.actualMeasurementMode}}_resize(e){for(e<this._length&&(this.positionsWorld.length=e,this.positionsRender.length=e,this.positionsFittedWorld.length=e,this.positionsFittedRender.length=e,this.positionsGeodesic.length=e,this.positionsSpherical.length=e,this.positionsStereographic.length=e,this.pathSegmentLengths.length=e,this.geodesicPathSegmentLengths.length=e,this.perimeterSegmentLengths.length=e,this._length=e);this._length<e;)this.positionsWorld.push(z()),this.positionsRender.push(z()),this.positionsFittedWorld.push(V()),this.positionsFittedRender.push(z()),this.positionsGeodesic.push(z()),this.positionsSpherical.push(z()),this.positionsStereographic.push(V()),this.pathSegmentLengths.push(0),this.geodesicPathSegmentLengths.push(0),this.perimeterSegmentLengths.push(0),++this._length}_updatePathLengths(e){const t=this.positionsWorld,s=this.pathSegmentLengths;let i=0;const r=this._length;for(let n=0;n<r;++n){const o=s[n]=R(t[n],t[(n+1)%r]);(n<r-1||e)&&(i+=o)}return i}_updateGeodesicPathLengths(e,t){const s=this.positionsGeodesic,i=this.geodesicPathSegmentLengths;let r=0;const n=this._length;for(let o=0;o<n;++o){const a=ue(s[o],s[(o+1)%n],t);if(null==a)return null;const h=_(a,"meters").value,l=i[o]=h;(o<n-1||e)&&(r+=l)}return g(r,"meters")}_updateAreaAndPerimeterLength(e,t,s,i){const r=e.renderCoordsHelper,n=this.positionsWorld,o=this.positionsRender,a=this.positionsFittedWorld,h=this.positionsFittedRender,l=this._planeWorldCoords,c=this._centroidRenderCoords;ne(o,c),r.worldUpAtPosition(c,this._worldUp),r.worldBasisAtPosition(c,$.X,this._worldTangent),Lt(c,this._worldUp,t,this._worldUp,s),Lt(c,this._worldTangent,t,this._worldTangent,s),n.length>2&&Y(n,l),this.fittingMode=this._selectFittingMode(l,n,this._worldUp,i);let u=0;if("horizontal"===this.fittingMode){let e=-1/0;o.forEach(((t,s)=>{const i=r.getAltitude(o[s]);i>e&&(e=i,u=s)}))}const p=n[u];let d=l,m=this._worldTangent;"horizontal"===this.fittingMode?d=this._worldUp:"vertical"===this.fittingMode&&(d=this._tempVec3,m=this._worldUp,oe(l,this._worldUp,d)),x(this._frame[2],d),oe(m,d,this._frame[0]),T(this._frame[1],this._frame[0],this._frame[2]),O(this._frame[1],this._frame[1]);const g=this._tempVec3,_=this._tempU,f=this._tempV;for(let e=0;e<this._length;++e){const i=a[e],r=h[e];G(g,n[e],p),b(i,I(this._frame[0],g),I(this._frame[1],g)),E(_,this._frame[0],i[0]),E(f,this._frame[1],i[1]),D(g,_,f),D(g,g,p),N(g,s,r,t)}this.perimeterLength=this._length>0?this._updatePerimeterLengths():null,ne(h,this.areaCentroidRenderCoords),N(this.areaCentroidRenderCoords,t,this.areaCentroidWorldCoords,s),this._updateIntersectingSegments(),this.area=0===this.intersectingSegments.size?this._computeArea():null}_updateGeodesicArea(e,t){const{renderCoordsHelper:s,spatialReference:i}=e,{positionsSpherical:r,positionsStereographic:n}=this,o=this._tempVec3,a=ee(r,o);if(!a)return void(this.geodesicArea=null);const h=this._tempU,l=this._tempV;ae(o,h,l);for(let e=0;e<this._length;++e){const t=I(r[e],h),s=I(r[e],l),i=I(r[e],o);b(n[e],t/i,s/i)}E(o,o,j(i).radius),s.toRenderCoords(o,H(i),this.geodesicAreaCentroidRenderCoords),this._updateGeodesicIntersectingSegments(),this.geodesicArea=a&&0===this.geodesicIntersectingSegments.size?this._computeGeodesicArea(t):null}_updatePerimeterLengths(){const e=this.positionsFittedWorld,t=this.perimeterSegmentLengths;let s=0;for(let i=0;i<this._length;++i)s+=t[i]=P(e[i],e[(i+1)%this._length]);return g(s,this._lengthMeasurementUnit)}_updateIntersectingSegments(){const e=this.positionsFittedWorld,t=this.intersectingSegments;t.clear();for(let s=0;s<this._length;++s)for(let i=s+2;i<this._length;++i){if((i+1)%this._length===s)continue;const r=e[s],n=e[(s+1)%this._length],o=e[i],a=e[(i+1)%this._length];K(r,n,o,a)&&(t.add(s),t.add(i))}}_computeArea(){const e=this.positionsFittedWorld,t=this.triangleIndices=J(he(e));let s=0;for(let i=0;i<t.length;i+=3)s+=Z(e[t[i]],e[t[i+1]],e[t[i+2]]);return f(s,this._areaMeasurementUnit)}_updateGeodesicIntersectingSegments(){const e=this.positionsStereographic,t=this.geodesicIntersectingSegments;t.clear();for(let s=0;s<this._length;++s)for(let i=s+2;i<this._length;++i){if((i+1)%this._length===s)continue;const r=e[s],n=e[(s+1)%this._length],o=e[i],a=e[(i+1)%this._length];K(r,n,o,a)&&(t.add(s),t.add(i))}}_computeGeodesicArea(e){const t=this.positionsGeodesic,s=this.positionsStereographic,i=this.geodesicTriangleIndices=J(he(s));let r=0;for(let s=0;s<i.length;s+=3){const n=te(t[i[s]],t[i[s+1]],t[i[s+2]],e);if(null==n)return null;r+=_(n,"square-meters").value}return f(r,"square-meters")}_selectFittingMode(e,t,s,i){const r=t.map((t=>Math.abs(se(e,t)))).reduce(((e,t)=>Math.max(e,t)),0);ie(t,this._tempSphere);const n=r/(2*this._tempSphere[3]),o=n<i.maxRelativeErrorCoplanar,a=n<i.maxRelativeErrorAlmostCoplanar;let h="horizontal";return o?h="oblique":a&&(h=Math.abs(I(s,e))>Math.cos(d(i.verticalAngleThreshold))?"horizontal":"vertical"),h}_updateCursorSegmentLength(e,t){const s=e.lastPoint;e.isValidPolygon||null==s||null==t?(this.geodesicStagedSegmentLength=null,this.stagedSegmentLength=null):(this.geodesicStagedSegmentLength=pe(s,t),this.stagedSegmentLength=ce(s,t)?.direct)}_updateMode(e){if(e===h.Auto){this.actualMeasurementMode="euclidean";let e=0;null!=this.geodesicPathLength&&(e+=this.geodesicPathLength.value),e>Pt&&(this.actualMeasurementMode="geodesic")}else this.actualMeasurementMode=e===h.Euclidean?"euclidean":"geodesic";null==this.geodesicPathLength&&(this.actualMeasurementMode="euclidean"),this._mode=e}}const Pt=1e5;let Ct=class extends t{constructor(e){super(e)}initialize(){this._measurementDataManager=new bt(this.view),this.addHandles([this.analysisViewData.path.on("change",(()=>this._update())),l((()=>this.analysisViewData.stagedPoint),(()=>this._update()),c),l((()=>this.analysisViewData.mode),(()=>this._update()),c)]),this._update()}_update(e=!1){const{analysisViewData:t,view:s}=this;this._measurementDataManager.update(t.path,t.stagedPoint,s,{maxRelativeErrorCoplanar:.005,maxRelativeErrorAlmostCoplanar:.01,verticalAngleThreshold:80},t.mode,e)&&(t.measurementData=this._measurementDataManager.getData())}};e([i({constructOnly:!0})],Ct.prototype,"view",void 0),e([i({constructOnly:!0})],Ct.prototype,"analysis",void 0),e([i({constructOnly:!0})],Ct.prototype,"analysisViewData",void 0),Ct=e([n("esri.views.3d.analysis.AreaMeasurement.support.AreaMeasurementController")],Ct);let Vt=class extends me.EventedAccessor{constructor(e={}){super(e),this._version=0,this._internalGeometryChange=!1,this._extent=_e()}set areaMeasurement(e){this._set("areaMeasurement",e),null!=e&&null!=this.view&&this._initialize(e,this.view)}set view(e){this._set("view",e),null!=e&&null!=this.areaMeasurement&&this._initialize(this.areaMeasurement,e)}get constructed(){return null!=this.areaMeasurement&&null!=this.view}get version(){return this._version}get isEmptyPolygon(){return!this.constructed||0===this._editGeometry.components.length}get isValidPolygon(){return this.constructed&&this.polygonIsClosed}get extent(){if(this.constructed&&this._editGeometry.components.length>0&&this._editGeometry.components[0].vertices.length>0){const e=_e(this._extent);return this.forEachVertex((t=>{fe(e,t.pos)})),e}return null}get spatialReference(){return this.constructed?this._editGeometry.coordinateHelper.spatialReference:null}_initialize(e,t){this.removeAllHandles(),this.addHandles(l((()=>e.geometry),(()=>{this._updateEditGeometryFromModelGeometry(e,t)}),u)),this._makeDirty(!0)}_makeDirty(e=!1){this.notifyChange("polygonIsClosed"),this.notifyChange("isValidPolygon"),this.notifyChange("initialized"),this.notifyChange("extent"),e&&this.notifyChange("numVertices")}_updateEditGeometryFromModelGeometry(e,t){if(this._version++,this._internalGeometryChange)return;this.removeHandles("EditGeometry");let s=e.geometry;if(null!=s){const i=B(s,t.spatialReference);null==i&&ye(e,s.spatialReference,r.getLogger(this)),s=i}this._editGeometryOperations=null!=s?je.fromGeometry(s,t.state.viewingMode):new je(new ke("polygon",we(!0,!1,t.spatialReference)),t.state.viewingMode),this._makeDirty(!0),this.emit("change"),this.addHandles(this._editGeometry.on("change",(t=>{this._makeDirty(null!=t.addedVertices||null!=t.removedVertices),this._internalGeometryChange=!0,e.geometry=this.numVertices>0?this._editGeometry.geometry:null,this._internalGeometryChange=!1})),"EditGeometry")}get _editGeometry(){return this._editGeometryOperations.data}get vertices(){const e=[];return this.forEachVertex((t=>{e.push(t)})),e}get numVertices(){return this.constructed&&this._editGeometry.components.length>0?this._editGeometry.components[0].vertices.length:0}get polygonIsClosed(){return this._editGeometry.components.length>0&&this._editGeometry.components[0].isClosed()}get firstPoint(){if(this.constructed&&this._editGeometry.components.length>0){const e=this._editGeometry.components[0].getFirstVertex();if(null!=e)return this._editGeometry.coordinateHelper.vectorToPoint(e.pos)}return null}get lastPoint(){if(this.constructed&&this._editGeometry.components.length>0){const e=this._editGeometry.components[0].getLastVertex();if(null!=e)return this._editGeometry.coordinateHelper.vectorToPoint(e.pos)}return null}getVertex(e){if(!this.constructed||0===this._editGeometry.components.length||0===this._editGeometry.components[0].vertices.length)return null;const t=this._editGeometry.components[0].vertices[0];let s=t;do{if(s.index===e)return s;s=s.rightEdge.rightVertex}while(s!==t&&null!=s);return null}getVertexPositionAsPoint(e){return this._editGeometry.coordinateHelper.vectorToPoint(e.pos)}getVertexPositionAsPointFromIndex(e){return this._editGeometry.coordinateHelper.vectorToPoint(this.getVertex(e).pos)}forEachVertex(e){this.constructed&&this._editGeometry.components.length>0&&this._editGeometry.components[0].iterateVertices(e)}forEachVertexPosition(e){const t=this._editGeometry.coordinateHelper;this.forEachVertex(((s,i)=>{t.vectorToPoint(s.pos,At),e(At,i)}))}clear(){null!=this.areaMeasurement&&(this.areaMeasurement.geometry=null)}add(e){if(!this.constructed)return null;if(0===this._editGeometry.components.length){const e=this.view;this._editGeometry.components.push(new Le(e.spatialReference,e.state.viewingMode))}const t=this._editGeometryOperations.appendVertex(this._editGeometry.coordinateHelper.pointToVector(e));return this.emit("change"),t}close(){if(!this.constructed||0===this._editGeometry.components.length)return null;const e=this._editGeometryOperations.closeComponent(this._editGeometry.components[0]);return this.emit("change"),e}ensureContains(e,t=""){let s=!1;if(this._editGeometry.components.forEach((t=>{t.iterateVertices((t=>{t===e&&(s=!0)}))})),!s)throw new Error(`vertex doesnt exist ${t}`);return s}setVertexPosition(e,t){if(!this.constructed)return null;const s=this._editGeometryOperations.setVertexPosition(e,this._editGeometry.coordinateHelper.pointToVector(t));return this.emit("change"),s}equals(e){if(this.numVertices!==e.numVertices)return!1;let t=!0;return this.forEachVertexPosition(((s,i)=>{const r=e.getVertexPositionAsPointFromIndex(i);s.equals(r)||(t=!1)})),!!t}};e([i({value:null})],Vt.prototype,"areaMeasurement",null),e([i({value:null})],Vt.prototype,"view",null),e([i()],Vt.prototype,"isEmptyPolygon",null),e([i()],Vt.prototype,"isValidPolygon",null),e([i()],Vt.prototype,"extent",null),e([i()],Vt.prototype,"spatialReference",null),e([i()],Vt.prototype,"numVertices",null),e([i()],Vt.prototype,"polygonIsClosed",null),Vt=e([n("esri.views.3d.analysis.AreaMeasurement.support.AreaMeasurementPathHelper")],Vt);const At=new ge,xt=Object.freeze(Object.defineProperty({__proto__:null,build:function(e){const t=new ze,{vertex:s,fragment:i,varyings:r}=t;return t.include(Fe,e),t.include(We,e),t.include(qe,e),Be(s,e),t.attributes.add(lt.POSITION,"vec3"),t.attributes.add(lt.UV0,"vec2"),r.add("vUV","vec2"),r.add("vpos","vec3"),e.terrainDepthTest&&t.varyings.add("depth","float"),s.main.add(_t`
      vUV = uv0;
      vpos = position;
      ${e.terrainDepthTest?"depth = (view * vec4(position, 1.0)).z;":""}
      gl_Position = proj * view * vec4(position, 1.0);`),i.uniforms.add(new He("size",(e=>e.size))),i.uniforms.add(new Ne("color1",(e=>e.color1))),i.uniforms.add(new Ne("color2",(e=>e.color2))),i.include(Qe),i.main.add(_t`
      ${e.terrainDepthTest?"terrainDepthTest(depth);":""}
      vec2 uvScaled = vUV / (2.0 * size);

      vec2 uv = fract(uvScaled - 0.25);
      vec2 ab = clamp((abs(uv - 0.5) - 0.25) / fwidth(uvScaled), -0.5, 0.5);
      float fade = smoothstep(0.25, 0.5, max(fwidth(uvScaled.x), fwidth(uvScaled.y)));
      float t = mix(abs(ab.x + ab.y), 0.5, fade);

      fragColor = mix(color2, color1, t);
      outputColorHighlightOID(fragColor, vpos);`),t}},Symbol.toStringTag,{value:"Module"}));class Dt extends $e{constructor(e,t,s){super(e,t,new Je(xt,(()=>Promise.resolve().then((()=>xt)))),s)}initializePipeline(e){const{oitPass:t,transparent:s,polygonOffset:i,output:r}=e,n=t===Ke.NONE,o=t===Ke.FrontFace;return ft({blending:s?Xe(t):null,depthTest:{func:Ze(t)},depthWrite:Ye(e),drawBuffers:et(t,r),colorWrite:yt,polygonOffset:n||o?i?Gt:null:{factor:-1,units:-25}})}}const Gt={factor:0,units:-25};class Ut extends tt{constructor(){super(...arguments),this.transparent=!1,this.writeDepth=!0,this.polygonOffset=!1,this.terrainDepthTest=!1,this.cullAboveTerrain=!1,this.textureCoordinateType=st.None,this.emissionSource=it.None,this.output=ct.Color,this.hasSlicePlane=!1,this.occlusionPass=!1,this.objectAndLayerIdColorInstanced=!1}get discardInvisibleFragments(){return this.transparent&&this.writeDepth}}e([vt()],Ut.prototype,"transparent",void 0),e([vt()],Ut.prototype,"writeDepth",void 0),e([vt()],Ut.prototype,"polygonOffset",void 0),e([vt()],Ut.prototype,"terrainDepthTest",void 0),e([vt()],Ut.prototype,"cullAboveTerrain",void 0);class Rt extends gt{constructor(e){super(e,Ot),this._configuration=new Ut,this.produces=new Map([[rt.OPAQUE_MATERIAL,e=>ut(e)&&!this.transparent],[rt.TRANSPARENT_MATERIAL,e=>ut(e)&&this.transparent&&this.parameters.writeDepth],[rt.TRANSPARENT_MATERIAL_WITHOUT_DEPTH,e=>ut(e)&&this.transparent&&!this.parameters.writeDepth]])}getConfiguration(e,t){return this._configuration.transparent=this.transparent,this._configuration.writeDepth=this.parameters.writeDepth,this._configuration.polygonOffset=this.parameters.polygonOffset,this._configuration.oitPass=t.oitPass,this._configuration.terrainDepthTest=t.terrainDepthTest,this._configuration.cullAboveTerrain=t.cullAboveTerrain,this._configuration}get visible(){return this.parameters.color1[3]>=pt||this.parameters.color2[3]>=pt}get transparent(){return this.parameters.color1[3]<1||this.parameters.color2[3]<1}createGLMaterial(e){return new Tt(e)}createBufferWriter(){return new dt(mt)}}class Tt extends nt{beginSlot(e){return this.acquireTechnique(Dt,e)}}class Ot extends at{constructor(){super(...arguments),this.size=A(1,1),this.color1=W(.75,.75,.75,1),this.color2=W(.5,.5,.5,1),this.writeDepth=!0,this.polygonOffset=!1}}class It extends Ie{constructor(e){super(e),this._checkerBoardMaterial=null,this._renderOccluded=ht.OccludeAndTransparent,this._geometry=null,this._size=A(1,1),this._color1=W(1,.5,0,.5),this._color2=W(1,1,1,.5),this.applyProperties(e)}get renderOccluded(){return this._renderOccluded}set renderOccluded(e){e!==this._renderOccluded&&(this._renderOccluded=e,this._updateMaterial())}get geometry(){return this._geometry}set geometry(e){this._geometry=e,this.recreateGeometry()}get size(){return this._size}set size(e){C(this._size,e),this._updateMaterial()}get color1(){return this._color1}set color1(e){Te(e,this._color1)||(Oe(this._color1,e),this._updateMaterial())}get color2(){return this._color2}set color2(e){Te(e,this._color2)||(Oe(this._color2,e),this._updateMaterial())}_updateMaterial(){null!=this._checkerBoardMaterial&&this._checkerBoardMaterial.setParameters({size:this._size,color1:this._color1,color2:this._color2,renderOccluded:this._renderOccluded})}createExternalResources(){this._checkerBoardMaterial=new Rt({size:this._size,color1:this._color1,color2:this._color2,writeDepth:!1,polygonOffset:!0,renderOccluded:ht.OccludeAndTransparent,isDecoration:this.isDecoration})}destroyExternalResources(){this._checkerBoardMaterial=null}forEachExternalMaterial(e){null!=this._checkerBoardMaterial&&e(this._checkerBoardMaterial)}createGeometries(e){if(null==this._geometry||null==this._checkerBoardMaterial)return;const t=Et;Ae(t,this.transform);const s=this._geometry,i=[],r=z();s.position.forEach((e=>{G(r,e,t),i.push(r[0],r[1],r[2])}));const n=[];s.uv.forEach((e=>{n.push(e[0],e[1])}));const o=new ot(this._checkerBoardMaterial,[[lt.POSITION,new Ee(i,s.triangleIndices,3,!0)],[lt.UV0,new Ee(n,s.triangleIndices,2,!0)]]);e.addGeometry(o)}}const Et=z();let zt=class extends t{get _parameters(){const{accentColor:e,textColor:t}=this.view.effectiveTheme,s=Se(e),i=Me(e,.5),r=Me(be(e),.5),n=be(t,Pe.Low);return{accentColor:s,transparentAccentColor:i,transparentContrastColor:r,intersectingLineColor:[1,.2,0,1],textColor:t,textBackgroundColor:Ce(n,.6),textCalloutColor:Ce(n,.5),pathLineWidth:3,perimeterLineWidth:2,projectionLineWidth:2,projectionLineStippleSize:5,labelDistance:25}}get visible(){return this.analysisViewData.visible}get _renderUnits(){const e=this.view.renderCoordsHelper.spatialReference;return y(e)??"meters"}get testData(){}constructor(e){super(e),this._path=null,this._intersectedPath=null,this._perimeter=null,this._intersectedPerimeter=null,this._projectionLines=null,this._measurementArea=null,this._areaLabel=null,this._perimeterLengthLabel=null,this._pathSegments=[],this._perimeterSegments=[],this._origin=z(),this._originTransform=De(),this.messages=null,this.viewData=qt,this.areaLabel=null,this.perimeterLengthLabel=null,this.loadingMessages=!0}initialize(){const{analysisViewData:e,_parameters:t,view:s}=this;this._path=new ve({view:s,attached:!0,width:t.pathLineWidth,polygonOffset:!0,renderOccluded:ht.OccludeAndTransparent,isDecoration:!0}),this._intersectedPath=new ve({view:s,attached:!0,width:t.pathLineWidth,polygonOffset:!0,renderOccluded:ht.OccludeAndTransparent,isDecoration:!0}),this._perimeter=new ve({view:s,attached:!0,width:t.perimeterLineWidth,polygonOffset:!0,renderOccluded:ht.OccludeAndTransparent,isDecoration:!0}),this._intersectedPerimeter=new ve({view:s,attached:!0,width:t.perimeterLineWidth,color:t.intersectingLineColor,polygonOffset:!0,renderOccluded:ht.OccludeAndTransparent,isDecoration:!0}),this._projectionLines=new ve({view:s,attached:!0,width:t.projectionLineWidth,stipplePattern:jt(t.projectionLineStippleSize),polygonOffset:!0,renderOccluded:ht.OccludeAndTransparent,isDecoration:!0}),this._measurementArea=new It({view:s,attached:!0,isDecoration:!0});const i={attached:!0,view:s,isDecoration:!0};this._areaLabel=new Ge({...i,fontSize:Wt.Large}),this._perimeterLengthLabel=new Ge({...i,fontSize:Wt.Small}),this.addHandles([l((()=>[e.mode,this.visible,e.unit,e.measurementData,e.stagedPoint]),(()=>this._update()),u),l((()=>s.state?.camera),(()=>this._updateLabels()),u),kt((()=>this._updateMessageBundle())),l((()=>this._parameters),(({accentColor:e,transparentAccentColor:t,transparentContrastColor:s,textColor:i,textBackgroundColor:r,textCalloutColor:n})=>{const{_path:o,_intersectedPath:a,_perimeter:h,_projectionLines:l,_measurementArea:c,_areaLabel:u,_perimeterLengthLabel:p}=this;o.color=e,a.color=e,h.color=e,l.color=e,c.color1=t,c.color2=s,u.textColor=i,u.backgroundColor=r,u.calloutColor=n,p.textColor=i,p.backgroundColor=r,p.calloutColor=n}),p)]),this._updateMessageBundle()}destroy(){this._measurementArea=s(this._measurementArea),this._path=s(this._path),this._intersectedPath=s(this._intersectedPath),this._perimeter=s(this._perimeter),this._intersectedPerimeter=s(this._intersectedPerimeter),this._areaLabel=s(this._areaLabel),this._perimeterLengthLabel=s(this._perimeterLengthLabel),this._projectionLines=s(this._projectionLines),this.set("view",null)}_update(){if(this.destroyed||!this.view.ready||!this.view.renderCoordsHelper)return;const{analysisViewData:{measurementData:e},analysisViewData:t}=this;null!=e&&(this._updateViewData(e,t.path),this._updateOrigin(),this._updatePathSegments(),this._updatePerimeterSegments(),this._updateArea(),this._updateProjectionLines(),this._updateLabels())}_updateViewData(e,t){const s=e.validMeasurement,i="geodesic"===e.actualMeasurementMode,r=i?e.geodesicArea:e.area;let n=1;if(r){const e=function(e,t){return _(e,Ft(e,t))}(r,this.analysisViewData.unit);n=m(Math.sqrt(e.value)/Math.sqrt(300)),n*=Math.sqrt(k(1,e.unit,"square-meters")),n=k(n,"meters",this._renderUnits)}const o={validMeasurement:s,numVertices:e.numVertices,hasStagedVertex:e.hasStagedVertex,path:t,mode:e.actualMeasurementMode,positionsRender:e.positionsRender,positionsFittedWorld:e.positionsFittedWorld,positionsFittedRender:e.positionsFittedRender,intersectingSegments:i?e.geodesicIntersectingSegments:e.intersectingSegments,triangleIndices:i?e.geodesicTriangleIndices:e.triangleIndices,areaCentroid:i?e.geodesicAreaCentroidRenderCoords:e.areaCentroidRenderCoords,perimeterLengthLabelSegmentIndex:0,area:i?e.geodesicArea:e.area,pathLength:i?e.geodesicPathLength:e.pathLength,perimeterLength:e.perimeterLength,checkerSize:n};this._set("viewData",o)}_updateOrigin(){const e=this.viewData;ne(e.positionsRender,this._origin),xe(this._originTransform,this._origin),this._measurementArea.transform=this._originTransform,this._projectionLines.transform=this._originTransform}_createSegments(e){const t=this.viewData,s=this.view.renderCoordsHelper.spatialReference,i=t.mode,r=[],n=[],o=[],a=t.numVertices,h=t.validMeasurement?a:a-1;for(let l=0;l<h;++l){const h=t[e][l],c=t[e][(l+1)%a];let u=null;switch(i){case"euclidean":u=new Re(h,c);break;case"geodesic":u=new Ue(h,c,s)}t.intersectingSegments.has(l)?o.push(u):n.push(u),r.push(u)}let l=null;return t.validMeasurement&&t.hasStagedVertex&&h>=2?l=r[r.length-2]:t.hasStagedVertex&&h>=1&&(l=r[r.length-1]),{all:r,nonIntersecting:n,intersecting:o,stagedSegment:l}}_updatePathSegments(){const{visible:e}=this,t=this._createSegments("positionsRender");this._path.setGeometryFromSegments(t.nonIntersecting,this._origin),this._path.visible=e,this._intersectedPath.setGeometryFromSegments(t.intersecting,this._origin),this._intersectedPath.visible=e,this._pathSegments=t.all}_updatePerimeterSegments(){const e=this.visible&&"euclidean"===this.viewData.mode,t=this._createSegments("positionsFittedRender");this._perimeter.setGeometryFromSegments(t.nonIntersecting,this._origin),this._perimeter.visible=e,this._intersectedPerimeter.setGeometryFromSegments(t.intersecting,this._origin),this._intersectedPerimeter.visible=e,this._perimeterSegments=t.all}_updateArea(){const e=this.viewData;switch(e.mode){case"euclidean":this._updateAreaEuclidean(e);break;case"geodesic":this._updateAreaGeodesic()}}_updateAreaEuclidean(e){const t=this.visible;e.validMeasurement&&0===e.intersectingSegments.size&&e.triangleIndices?(this._measurementArea.geometry={uv:e.positionsFittedWorld,position:e.positionsFittedRender,triangleIndices:e.triangleIndices},this._measurementArea.size=[e.checkerSize,e.checkerSize],this._measurementArea.visible=t):this._measurementArea.visible=!1}_updateAreaGeodesic(){this._measurementArea.visible=!1}_updateProjectionLines(){const e=this.viewData,t=this.visible,s=e.mode,i=e.numVertices;if(i>0&&e.validMeasurement&&"euclidean"===s){const s=[];for(let t=0;t<i;++t){const i=z();G(i,e.positionsRender[t],this._origin);const r=z();G(r,e.positionsFittedRender[t],this._origin),s.push([i,r])}this._projectionLines.geometry=s,this._projectionLines.visible=t}else this._projectionLines.geometry=null,this._projectionLines.visible=!1}_updateLabels(){if(this.destroyed)return;const{viewData:e}=this,{area:t,path:s}=e;if(!s)return;const i=this.visible,r=function(e,t,s){return e&&t&&Ve(e,t,Ft(t,s))}(this.messages,t,this.analysisViewData.unit);if(null!=r?(this._areaLabel.geometry={type:"point",point:e.areaCentroid},this._areaLabel.text=r,this._areaLabel.visible=e.validMeasurement&&0===e.intersectingSegments.size&&i):this._areaLabel.visible=!1,this._set("areaLabel",r),e.validMeasurement&&0===e.intersectingSegments.size){const t="geodesic"===e.mode||!e.validMeasurement,s=t?e.pathLength:e.perimeterLength,r=(n=this.messages,o=s,a=this.analysisViewData.unit,n&&o&&Ve(n,o,function(e,t){const s=function(e){switch(e){case"metric":case"ares":case"hectares":return"metric";case"imperial":case"acres":return"imperial";case"square-inches":return"inches";case"square-feet":return"feet";case"square-yards":return"yards";case"square-miles":return"miles";case"square-us-feet":return"us-feet";case"square-millimeters":return"millimeters";case"square-centimeters":return"centimeters";case"square-decimeters":return"decimeters";case"square-meters":return"meters";case"square-kilometers":return"kilometers"}throw new Error("unhandled area unit")}(t);switch(s){case"metric":return M(e.value,e.unit);case"imperial":return S(e.value,e.unit);default:return s}}(o,a)));this._set("perimeterLengthLabel",r),this._perimeterLengthLabel.distance=this._parameters.labelDistance,this._perimeterLengthLabel.anchor="top",this._perimeterLengthLabel.text=r,this._perimeterLengthLabel.visible=!0;let h=!0;for(let s=0;s<e.numVertices;++s){const i=(e.perimeterLengthLabelSegmentIndex+s)%e.numVertices,r=t?this._pathSegments[i]:this._perimeterSegments[i];if(h=!0,this._perimeterLengthLabel.geometry={type:"segment",segment:r,sampleLocation:"center"},!this._perimeterLengthLabel.overlaps(this._areaLabel))break;h=!1}this._perimeterLengthLabel.visible=h&&i}else this._perimeterLengthLabel.visible=!1;var n,o,a}_updateMessageBundle(){this.loadingMessages=!0,wt("esri/core/t9n/Units").then((e=>{this.messages=e,this.view&&this._update()})).finally((()=>{this.loadingMessages=!1}))}};function Ft(e,t){switch(t){case"metric":return L(e.value,e.unit);case"imperial":return w(e.value,e.unit);default:return t}}var Wt;e([i()],zt.prototype,"_parameters",null),e([i()],zt.prototype,"view",void 0),e([i()],zt.prototype,"messages",void 0),e([i()],zt.prototype,"analysis",void 0),e([i()],zt.prototype,"viewData",void 0),e([i()],zt.prototype,"analysisViewData",void 0),e([i({readOnly:!0})],zt.prototype,"areaLabel",void 0),e([i({readOnly:!0})],zt.prototype,"perimeterLengthLabel",void 0),e([i()],zt.prototype,"loadingMessages",void 0),e([i()],zt.prototype,"visible",null),e([i()],zt.prototype,"_renderUnits",null),zt=e([n("esri.views.3d.analysis.AreaMeasurement.support.AreaMeasurementVisualization")],zt),function(e){e[e.Small=12]="Small",e[e.Large=16]="Large"}(Wt||(Wt={}));const qt={validMeasurement:!1,numVertices:0,hasStagedVertex:!1,path:null,mode:null,positionsRender:null,positionsFittedWorld:null,positionsFittedRender:null,intersectingSegments:null,triangleIndices:null,areaCentroid:null,perimeterLengthLabelSegmentIndex:null,checkerSize:null,area:null,pathLength:null,perimeterLength:null};let Bt=class extends(a(t)){constructor(e){super(e),this.type="area-measurement-view-3d",this.analysis=null,this.measurementData=null,this.lastDraggedVertex=null,this.stagedPoint=null,this.mode=h.Auto}initialize(){const{analysis:e,view:t}=this;this.path=new Vt({view:t,areaMeasurement:e}),this.analysisVisualization=new zt({view:t,analysis:e,analysisViewData:this}),this.analysisController=new Ct({view:t,analysis:e,analysisViewData:this})}destroy(){this.analysisController=s(this.analysisController),this.analysisVisualization=s(this.analysisVisualization),this.path.destroy()}get updating(){return!!this.analysisVisualization?.loadingMessages}get result(){const{measurementData:e}=this;return null==e?{area:null,mode:null,perimeter:null}:"euclidean"===e.actualMeasurementMode?{area:e.area,perimeter:e.perimeterLength,mode:"euclidean"}:{area:e.geodesicArea,perimeter:e.pathLength,mode:"geodesic"}}get viewData(){return this.analysisVisualization.viewData}get validMeasurement(){return this.path.isValidPolygon}get unit(){return this.analysis.unit??this._defaultUnit}get testData(){}};e([i({readOnly:!0})],Bt.prototype,"type",void 0),e([i({constructOnly:!0,nonNullable:!0})],Bt.prototype,"analysis",void 0),e([i()],Bt.prototype,"updating",null),e([i()],Bt.prototype,"analysisVisualization",void 0),e([i()],Bt.prototype,"analysisController",void 0),e([i()],Bt.prototype,"result",null),e([i()],Bt.prototype,"measurementData",void 0),e([i()],Bt.prototype,"viewData",null),e([i()],Bt.prototype,"validMeasurement",null),e([i()],Bt.prototype,"path",void 0),e([i()],Bt.prototype,"lastDraggedVertex",void 0),e([i()],Bt.prototype,"stagedPoint",void 0),e([i()],Bt.prototype,"mode",void 0),e([i()],Bt.prototype,"unit",null),e([i(o)],Bt.prototype,"_defaultUnit",void 0),Bt=e([n("esri.views.3d.analysis.AreaMeasurementAnalysisView3D")],Bt);const Ht=Bt;export{Ht as default};
