// All material copyright Esri, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.31/esri/copyright.txt for details.
//>>built
define("require ../chunks/tslib.es6 ../geometry ../Graphic ../request ../core/Error ../core/Loadable ../core/Logger ../core/MultiOriginJSONSupport ../core/promiseUtils ../core/urlUtils ../core/accessorSupport/decorators/property ../core/has ../core/RandomLCG ../core/accessorSupport/decorators/subclass ../geometry/Extent ../geometry/support/jsonUtils ../layers/mixins/EditBusLayer ../layers/support/arcgisLayerUrl ./support/TopologyValidationJobInfo ./support/utils ../versionManagement/support/versionManagementUtils ../geometry/SpatialReference".split(" "),
function(q,g,f,z,u,w,A,B,C,D,E,k,K,L,F,G,H,r,x,I,J,p,y){function t(a,b){return new z({attributes:a.attributes,geometry:H.fromJSON({...a.geometry,spatialReference:b})})}const v=a=>Object.freeze(Object.defineProperty({__proto__:null,default:a},Symbol.toStringTag,{value:"Module"}));f=class extends C.MultiOriginJSONMixin(A){static fromPortalItem(a){return J.networkFromPortalItem(a)}constructor(a){super(a);this.historicMoment=this.gdbVersion=this.sourceJSON=this.type=this.spatialReference=this.fullExtent=
this.dataElement=this.layerUrl=this.title=this.id=null;this._sourceIdByLayerId=new Map;this._layerIdBySourceId=new Map;this._applyEditsHandler=b=>{const {serviceUrl:d,gdbVersion:m,result:e}=b;b=d===this.featureServiceUrl;const c=r.versionMatches(d,m,this.gdbVersion);b&&c&&e.then(l=>{p.isVersionInEditSession(d,m)&&(this.historicMoment=l.historicMoment)})};this._updateMomentHandler=b=>{const {serviceUrl:d,gdbVersion:m,moment:e}=b;b=d===this.featureServiceUrl;const c=r.versionMatches(d,m,this.gdbVersion);
b&&c&&(this.historicMoment=e)};this.when().then(()=>{this.addHandles([r.onApplyEditsEvent(this._applyEditsHandler),r.onUpdateMomentEvent(this._updateMomentHandler)])},()=>{})}initialize(){this.when().catch(a=>{D.isAbortError(a)||B.getLogger(this).error("#load()",`Failed to load layer (title: '${this.title??"no title"}', id: '${this.id??"no id"}')`,{error:a})})}get datasetName(){return this.dataElement?.name??null}get owner(){return this.dataElement?.userIdentity??null}get schemaGeneration(){return this.dataElement?.schemaGeneration??
null}get parsedUrl(){return E.urlToObject(this.layerUrl)}get featureServiceUrl(){return x.parse(this.parsedUrl.path).url.path}get networkServiceUrl(){return this.featureServiceUrl.replace(/\/FeatureServer/i,"/UtilityNetworkServer")}get layerId(){return x.parse(this.parsedUrl.path).sublayer}get networkSystemLayers(){return null}async load(a){this.addResolvingPromise(this._fetchDataElement(this.featureServiceUrl,this.layerId.toString(),a));this.addResolvingPromise(this._fetchLayerMetaData(this.layerUrl,
a));return this}getLayerIdBySourceId(a){if(!this.dataElement)return null;const b=this._layerIdBySourceId.get(a);if(null!=b)return b;a=this._traverseNetworkSources(this.dataElement.domainNetworks,this._layerIdBySourceId,"sourceId","layerId",a);return 0<=a?a:null}getSourceIdByLayerId(a){if(!this.dataElement)return null;const b=this._sourceIdByLayerId.get(a);if(null!=b)return b;a=this._traverseNetworkSources(this.dataElement.domainNetworks,this._sourceIdByLayerId,"layerId","sourceId",a);return 0<=a?
a:null}getObjectIdsFromElements(a){const b=[],d=new Map;for(const e of a){a=this.getLayerIdBySourceId(e.networkSourceId);if(null==a)continue;let c=d.get(a);void 0===c&&(c=[]);c.push(e.objectId);d.set(a,c)}const m=this.featureServiceUrl;d.forEach((e,c)=>b.push({layerUrl:`${m}/${c}`,objectIds:e}));return b}async queryNamedTraceConfigurations(a,b){const [{queryNamedTraceConfigurations:d},{default:m}]=await Promise.all([new Promise((c,l)=>q(["../rest/networks/queryNamedTraceConfigurations"],c,l)),new Promise((c,
l)=>q(["../rest/networks/support/QueryNamedTraceConfigurationsParameters"],h=>c(v(h)),l))]),e=this.networkServiceUrl;a=m.from(a);return(await d(e,a,{...b}))?.namedTraceConfigurations}async validateTopology(a,b){if(!a.validateArea)throw new w("network:undefined-validateArea","the network must have validateArea defined in the validate network topology parameters.");const [{validateNetworkTopology:d},{default:m}]=await Promise.all([new Promise((l,h)=>q(["../rest/networks/validateNetworkTopology"],l,
h)),new Promise((l,h)=>q(["../rest/networks/support/ValidateNetworkTopologyParameters"],n=>l(v(n)),h))]);var e=m.from(a);p.isVersionInEditSession(this.featureServiceUrl,this.gdbVersion||null)?(e.sessionID=p.currentSessionId,await p.isSafeToEditVersion(this.featureServiceUrl,this.gdbVersion,!0)):e.sessionID=null;e.gdbVersion=this.gdbVersion;var c=this.networkServiceUrl;a=r.emitApplyEditsEvent(this.featureServiceUrl,null,this.gdbVersion,!0);b=await d(c,e,{...b});if(b?.serviceEdits){e=[];for(const l of b.serviceEdits){({editedFeatures:c}=
l);const h=c?.spatialReference?new y(c.spatialReference):null;e.push({layerId:l.layerId,editedFeatures:{adds:c?.adds?.map(n=>t(n,h))||[],updates:c?.updates?.map(n=>({original:t(n[0],h),current:t(n[1],h)}))||[],deletes:c?.deletes?.map(n=>t(n,h))||[],spatialReference:h}})}a.resolve({edits:null,addedFeatures:[],updatedFeatures:[],deletedFeatures:[],addedAttachments:[],updatedAttachments:[],deletedAttachments:[],editedFeatures:e,exceededTransferLimit:!1,historicMoment:b.moment})}return b}async submitTopologyValidationJob(a,
b){var d=null;if(!a.validateArea)throw new w("network:undefined-validateArea","the network must have validateArea defined in the validate network topology parameters.");this.gdbVersion||(d=this.layerUrl.replace(/\/FeatureServer/i,"/VersionManagementServer").replace(/\/\d*$/,""),d=(await u(d,{responseType:"json",query:{f:"json"}})).data.defaultVersionName);const [{submitValidateNetworkTopologyJob:m},{default:e}]=await Promise.all([new Promise((l,h)=>q(["../rest/networks/validateNetworkTopology"],l,
h)),new Promise((l,h)=>q(["../rest/networks/support/ValidateNetworkTopologyParameters"],n=>l(v(n)),h))]);a=e.from(a);p.isVersionInEditSession(this.featureServiceUrl,this.gdbVersion||null)?(a.sessionID=p.currentSessionId,await p.isSafeToEditVersion(this.featureServiceUrl,this.gdbVersion,!0)):a.sessionID=null;a.gdbVersion=this.gdbVersion||d;const c=this.networkServiceUrl;d=this.featureServiceUrl?r.emitApplyEditsEvent(this.featureServiceUrl,null,this.gdbVersion,!0):void 0;b=await m(c,a,{...b});return new I({statusUrl:b,
editsResolver:d})}_traverseNetworkSources(a,b,d,m,e){for(const c of a)for(const l of[c.edgeSources??[],c.junctionSources??[]])for(const h of l)if(h[d]===e)return b.set(e,h[m]),h[m];return-1}async _fetchLayerMetaData(a,b){a=await u(a,{responseType:"json",query:{f:"json"},...b});this.sourceJSON=a.data;this.read(a.data,{origin:"service"})}async _fetchDataElement(a,b,d){this.dataElement||(a=await u(`${a}/queryDataElements`,{responseType:"json",query:{layers:JSON.stringify([b]),f:"json"},...d}).then(m=>
m.data.layerDataElements?.[0]))&&this.read(a,{origin:"service"})}};g.__decorate([k.property({type:String,nonNullable:!0,json:{origins:{"web-map":{read:!0,write:{isRequired:!0}},service:{read:!0}},read:!1}})],f.prototype,"id",void 0);g.__decorate([k.property({type:String,nonNullable:!0,json:{origins:{"web-map":{read:!0,write:{isRequired:!0}},service:{read:{source:"name"}}},read:!1}})],f.prototype,"title",void 0);g.__decorate([k.property({type:String,nonNullable:!0,json:{origins:{"web-map":{read:{source:"url"},
write:{target:"url",isRequired:!0}}},read:!1}})],f.prototype,"layerUrl",void 0);g.__decorate([k.property({type:Object,json:{origins:{service:{read:!0}},read:!1}})],f.prototype,"dataElement",void 0);g.__decorate([k.property({type:G,json:{origins:{service:{read:{source:"extent"}}},read:!1}})],f.prototype,"fullExtent",void 0);g.__decorate([k.property({type:y,json:{origins:{service:{read:{source:"extent.spatialReference"}}},read:!1}})],f.prototype,"spatialReference",void 0);g.__decorate([k.property({type:["utility",
"trace"],readOnly:!0,json:{read:!1,write:!1}})],f.prototype,"type",void 0);g.__decorate([k.property({readOnly:!0})],f.prototype,"datasetName",null);g.__decorate([k.property({readOnly:!0})],f.prototype,"owner",null);g.__decorate([k.property({readOnly:!0})],f.prototype,"schemaGeneration",null);g.__decorate([k.property({readOnly:!0})],f.prototype,"parsedUrl",null);g.__decorate([k.property({readOnly:!0})],f.prototype,"featureServiceUrl",null);g.__decorate([k.property({readOnly:!0})],f.prototype,"networkServiceUrl",
null);g.__decorate([k.property({readOnly:!0})],f.prototype,"layerId",null);g.__decorate([k.property()],f.prototype,"sourceJSON",void 0);g.__decorate([k.property({readOnly:!0})],f.prototype,"networkSystemLayers",null);g.__decorate([k.property()],f.prototype,"gdbVersion",void 0);g.__decorate([k.property({type:Date})],f.prototype,"historicMoment",void 0);return f=g.__decorate([F.subclass("esri.networks.Network")],f)});