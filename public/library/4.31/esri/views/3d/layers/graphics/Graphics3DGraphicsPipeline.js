// All material copyright Esri, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.31/esri/copyright.txt for details.
//>>built
define("exports ../../../../chunks/tslib.es6 ../../../../core/Error ../../../../core/maybe ../../../../core/Promise ../../../../core/reactiveUtils ../../../../core/accessorSupport/decorators/property ../../../../core/has ../../../../core/Logger ../../../../core/RandomLCG ../../../../core/accessorSupport/decorators/subclass ../../../../core/support/UpdatingHandles ../../../../layers/graphics/controllers/FeatureTileController3D ../../../../symbols/support/utils ./elevationAlignPointsInFeatures ./Graphics3DFeatureProcessor ./QueryEngine ./queryForSymbologySnapping ../support/HeatmapFeatureProcessor ../support/LayerViewPerformanceInfo ../../webgl-engine/lib/UpdatePolicy ../../../support/Scheduler".split(" "),
function(c,d,m,k,n,h,e,C,D,E,p,q,r,t,u,v,w,x,y,z,A,B){c.Graphics3DGraphicsPipeline=class extends n.EsriPromise{constructor(a){super(a);this._dataUpdatingState=g.NONE;this.graphicsQuery={queryForSymbologySnapping:async(b,f)=>this.symbologySnappingSupported?x.queryForSymbologySnapping(this.graphics3DProcessor,b,f):{candidates:[],sourceCandidateIndices:[]},executeQuery:(b,f)=>this.queryEngine.executeQuery(b,f),executeQueryForIds:(b,f)=>this.queryEngine.executeQueryForIds(b,f),executeQueryForCount:(b,
f)=>this.queryEngine.executeQueryForCount(b,f),executeQueryForExtent:(b,f)=>this.queryEngine.executeQueryForExtent(b,f),executeQueryForLatestObservations:(b,f)=>this.queryEngine.executeQueryForLatestObservations(b,f)};this.controller=null;this.updatingHandles=new q.UpdatingHandles;this._controllerCreated=!1;this._pendingController=null}initialize(){this.addResolvingPromise(this._initializeController());this.updatingHandles.add(()=>this.layer.renderer,b=>this._recreateProcessor(b),h.initial);this.updatingHandles.add(()=>
this.updatePolicy,b=>this.processor.preferredUpdatePolicy=b);const a=()=>this.processor.featureStore;this.queryEngine=new w.QueryEngine({context:{spatialReference:this.view.spatialReference,layer:this.layer,scheduler:this.view.resourceController.scheduler,get featureStore(){return a()},hasZ:this.hasZ,hasM:this.hasM},priority:B.TaskPriority.FEATURE_QUERY_ENGINE})}destroy(){this.removeAllHandles();this.updatingHandles.destroy();this._destroyPendingController();this.controller=k.destroyMaybe(this.controller);
this.processor=k.destroyMaybe(this.processor);this.queryEngine=k.destroyMaybe(this.queryEngine);this.loadedGraphics=null}_destroyPendingController(){this._pendingController=k.destroyMaybe(this._pendingController)}get updating(){return this.updatingHandles.updating||!this._controllerCreated||this.controller?.updating||this.processor?.updating}get legendEnabled(){return this.processor.legendEnabled}get layer(){return this.layerView.layer}get view(){return this.layerView.view}get hasZ(){return this.layerView.hasZ}get hasM(){return this.layerView.hasM}get fullOpacity(){return this.layerView.fullOpacity}get suspended(){return this.layerView.suspended}get filter(){return"filter"in
this.layerView?this.layerView.filter:null}get slicePlaneEnabled(){return this.layerView.slicePlaneEnabled}get featureSpatialReference(){return"featureSpatialReference"in this.layerView?this.layerView.featureSpatialReference:null}get graphics3DProcessor(){return"graphics-3d"===this.processor?.type?this.processor:null}get heatmapProcessor(){return"heatmap"===this.processor?.type?this.processor:null}get hasAllFeatures(){return this.controller&&"hasAllFeatures"in this.controller?this.controller.hasAllFeatures:
!1}get hasAllFeaturesInView(){return this.controller&&"hasAllFeaturesInView"in this.controller?this.controller.hasAllFeaturesInView:!1}get hasFullGeometries(){return this.controller&&"hasFullGeometries"in this.controller?this.controller.hasFullGeometries:!1}get symbologySnappingSupported(){return this.layer?.renderer?.getSymbols()?.some(t.symbolHasExtrudeSymbolLayer)??!1}get updatePolicy(){return A.UpdatePolicy.SYNC}get scaleVisibilitySuspended(){return this.processor?.scaleVisibilitySuspended}get timeExtent(){return"timeExtent"in
this.layerView?this.layerView.timeExtent:null}get dataUpdating(){return this._dataUpdatingState!==g.NONE}get suspendInfo(){return this.processor?.suspendInfo??{}}forEachGraphic(a){this.loadedGraphics.forEach(a)}findGraphic(a){return this.loadedGraphics.find(a)}queryObjectIds(a,b){return this.layerView.queryObjectIds(a,b)}whenGraphicBounds(a,b){return this.processor?.whenGraphicBounds(a,b)}computeAttachmentOrigin(a,b){return this.processor?.computeAttachmentOrigin(a,b)}async elevationAlignPointsInFeatures(a,
b){const f=this.graphics3DProcessor;if(null==f)throw new m("featurelayerview3d:missing-processor","A Graphics3D processor is needed to resolve graphics elevation.");return u.elevationAlignPointsInFeatures(this.view,this.layer,l=>f.getGraphics3DGraphicByObjectId(l),a,b)}highlight(a,b){return this.processor.highlight(a,this.layer.objectIdField,b)}maskOccludee(a){return this.processor.maskOccludee(a)}async _initializeController(){const a=this.createController();this._pendingController=a;this._setupDataUpdating(a);
await a.when();this._setControllerWhenInitialized(a)}_setupDataUpdating(a){"dataUpdating"in a&&this.addHandles([h.watch(()=>a.dataUpdating,b=>{b&&this._dataUpdatingState===g.NONE?this._dataUpdatingState=g.CONTROLLER:b||this._dataUpdatingState!==g.CONTROLLER||(this._dataUpdatingState=g.NONE)},h.sync),h.watch(()=>!!this.graphics3DProcessor?.dataUpdating,b=>{b&&this._dataUpdatingState===g.CONTROLLER?this._dataUpdatingState=g.CORE:b||this._dataUpdatingState!==g.CORE||(this._dataUpdatingState=a.dataUpdating?
g.CONTROLLER:g.NONE)},h.sync)])}async _setControllerWhenInitialized(a){try{await this.when()}catch(b){}this._controllerCreated=!0;!this.isResolved()||this.destroyed?this._destroyPendingController():(await h.whenOnce(()=>this.view?.basemapTerrain?.ready),this.beforeSetController(a),this._pendingController=null,this.controller=a,this.loadedGraphics=a.graphics)}_recreateProcessor(a){var b="heatmap"===a?.type;const f="heatmap"===this.processor?.type;a=this.processor;a&&b===f||(this.processor=b=b?new y.HeatmapFeatureProcessor({owner:this}):
new v.Graphics3DFeatureProcessor({owner:this,frustumVisibilityEnabled:!0,scaleVisibilityEnabled:!0,filterVisibilityEnabled:!0,timeExtentEnabled:!0,elevationAlignmentEnabled:!0,elevationFeatureExpressionEnabled:!0,preferredUpdatePolicy:this.updatePolicy,updateClippingExtent:l=>this._updateClippingExtent(l)}),a?.destroy(),this.queryEngine?.clear(),this.addResolvingPromise(b.when()))}_updateClippingExtent(a){this.clippingExtent=a;if(!this.controller)return!1;switch(this.controller.type){case "stream":return!1;
case "feature-tile-3d":return this.controller.extent=a,!0}}get usedMemory(){return this.processor?.usedMemory??0}get performanceInfo(){const a=this.controller instanceof r.FeatureTileController3D?this.controller:null;return new z.LayerViewPerformanceInfo(this.usedMemory,this.loadedGraphics?.length,a?.serviceDataCount??-1,a?.maximumNumberOfFeatures??-1,0,this.processor.performanceInfo)}};d.__decorate([e.property()],c.Graphics3DGraphicsPipeline.prototype,"updating",null);d.__decorate([e.property()],
c.Graphics3DGraphicsPipeline.prototype,"legendEnabled",null);d.__decorate([e.property()],c.Graphics3DGraphicsPipeline.prototype,"layerView",void 0);d.__decorate([e.property()],c.Graphics3DGraphicsPipeline.prototype,"layer",null);d.__decorate([e.property()],c.Graphics3DGraphicsPipeline.prototype,"view",null);d.__decorate([e.property()],c.Graphics3DGraphicsPipeline.prototype,"hasZ",null);d.__decorate([e.property()],c.Graphics3DGraphicsPipeline.prototype,"hasM",null);d.__decorate([e.property()],c.Graphics3DGraphicsPipeline.prototype,
"fullOpacity",null);d.__decorate([e.property()],c.Graphics3DGraphicsPipeline.prototype,"suspended",null);d.__decorate([e.property()],c.Graphics3DGraphicsPipeline.prototype,"filter",null);d.__decorate([e.property()],c.Graphics3DGraphicsPipeline.prototype,"slicePlaneEnabled",null);d.__decorate([e.property()],c.Graphics3DGraphicsPipeline.prototype,"featureSpatialReference",null);d.__decorate([e.property()],c.Graphics3DGraphicsPipeline.prototype,"loadedGraphics",void 0);d.__decorate([e.property()],c.Graphics3DGraphicsPipeline.prototype,
"graphics3DProcessor",null);d.__decorate([e.property()],c.Graphics3DGraphicsPipeline.prototype,"heatmapProcessor",null);d.__decorate([e.property()],c.Graphics3DGraphicsPipeline.prototype,"hasAllFeatures",null);d.__decorate([e.property()],c.Graphics3DGraphicsPipeline.prototype,"hasAllFeaturesInView",null);d.__decorate([e.property()],c.Graphics3DGraphicsPipeline.prototype,"hasFullGeometries",null);d.__decorate([e.property()],c.Graphics3DGraphicsPipeline.prototype,"symbologySnappingSupported",null);
d.__decorate([e.property()],c.Graphics3DGraphicsPipeline.prototype,"updatePolicy",null);d.__decorate([e.property()],c.Graphics3DGraphicsPipeline.prototype,"scaleVisibilitySuspended",null);d.__decorate([e.property()],c.Graphics3DGraphicsPipeline.prototype,"timeExtent",null);d.__decorate([e.property()],c.Graphics3DGraphicsPipeline.prototype,"_dataUpdatingState",void 0);d.__decorate([e.property({readOnly:!0})],c.Graphics3DGraphicsPipeline.prototype,"dataUpdating",null);d.__decorate([e.property()],c.Graphics3DGraphicsPipeline.prototype,
"controller",void 0);d.__decorate([e.property()],c.Graphics3DGraphicsPipeline.prototype,"processor",void 0);d.__decorate([e.property()],c.Graphics3DGraphicsPipeline.prototype,"updatingHandles",void 0);d.__decorate([e.property()],c.Graphics3DGraphicsPipeline.prototype,"_controllerCreated",void 0);c.Graphics3DGraphicsPipeline=d.__decorate([p.subclass("esri.views.3d.layers.graphics.Graphics3DGraphicsPipeline")],c.Graphics3DGraphicsPipeline);var g;(function(a){a[a.NONE=0]="NONE";a[a.CONTROLLER=1]="CONTROLLER";
a[a.CORE=2]="CORE"})(g||={});Object.defineProperty(c,Symbol.toStringTag,{value:"Module"})});