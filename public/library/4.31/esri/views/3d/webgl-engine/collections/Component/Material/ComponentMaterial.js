// All material copyright Esri, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.31/esri/copyright.txt for details.
//>>built
define("exports ../../../../../../chunks/tslib.es6 ../../../../../../core/libs/gl-matrix-2/math/mat3 ../../../../../../core/libs/gl-matrix-2/factories/mat3f64 ../../../../../../chunks/vec32 ../../../../../../core/libs/gl-matrix-2/factories/vec3f64 ../../../../../../chunks/vec42 ../../../../../../core/libs/gl-matrix-2/factories/vec4f64 ../../../../layers/support/symbolColorUtils ../../../../terrain/OverlayContent ./ComponentTechnique ./ComponentTechniqueConfiguration ./shader/ComponentData.glsl ./shader/VertexDiscardByOpacity.glsl ../../../core/material/MaterialBase ../../../core/renderPasses/AllRenderPasses ../../../core/shaderLibrary/ShaderOutput ../../../core/shaderLibrary/attributes/NormalAttribute.glsl ../../../core/shaderLibrary/output/Emissions.glsl ../../../core/shaderLibrary/shading/Normals.glsl ../../../core/shaderLibrary/shading/PhysicallyBasedRenderingParameters.glsl ../../../core/shaderLibrary/util/AlphaCutoff ../../../core/shaderLibrary/util/EllipsoidMode ../../../core/util/TwoVectorPosition ../../../lib/basicInterfaces ../../../lib/OITPass ../../../materials/pbrUtils".split(" "),
function(f,e,E,O,A,F,G,H,I,B,P,p,J,q,c,r,t,K,C,L,u,Q,R,S,y,T,U){class g extends c.MaterialBase{constructor(b,h){super();this.toMapSpace=h;this.baseColor=H.freeze(1,1,1,1);this.hasParametersFromSource=this.usePBR=!1;this.mrrFactors=U.advancedMRRFactors;this.emissiveFactor=F.freeze(0,0,0);this.normalTexture=this.occlusionTexture=this.emissionTexture=this.metallicRoughnessTexture=this.baseColorTexture=null;this.objectOpacity=1;this.commonMaterialParameters=new v;this.componentParameters=new w;this.textureAlphaCutoff=
Q.alphaCutoff;this.alphaDiscardMode=y.AlphaDiscardMode.Opaque;this.polygonOffsetEnabled=this.isIntegratedMesh=!1;this.ellipsoidMode=R.EllipsoidMode.Earth;this.hasOccludees=!1;h=new S.TwoVectorPosition(b.position);const d=O.clone(b.rotationScale);E.invert(d,d);E.transpose(d,d);this.transformNormalGlobalFromModel=d;this.transformWorldFromModelTL=h.low;this.transformWorldFromModelTH=h.high;this.transformWorldFromModelRS=b.rotationScale}dispose(){this.normalTexture=this.occlusionTexture=this.emissionTexture=
this.metallicRoughnessTexture=this.baseColorTexture=null}get texture(){return this.baseColorTexture?.glTexture}get textureMetallicRoughness(){return this.metallicRoughnessTexture?.glTexture}get textureEmissive(){return this.emissionTexture?.glTexture}get hasEmissions(){return null!=this.emissionTexture||!A.exactEquals(this.emissiveFactor,F.ZEROS)}get textureOcclusion(){return this.occlusionTexture?.glTexture}get textureNormal(){return this.normalTexture?.glTexture}acquireTechnique(b,h,d,m){const a=
new p.ComponentTechniqueConfiguration(b.context.spherical,b.context.doublePrecisionRequiresObfuscation);a.hasVertexColors=m.colors;a.hasNormals=m.hasNormals;a.textureCoordinateType=m.textureCoordinates;a.hasMetallicRoughnessTexture=null!=this.metallicRoughnessTexture;a.hasOcclusionTexture=null!=this.occlusionTexture;a.hasNormalTexture=null!=this.normalTexture;a.oitPass=h.identifier===r.RenderPassIdentifier.Material&&null!=d.oitPass?d.oitPass:T.OITPass.NONE;a.terrainDepthTest=h.identifier===r.RenderPassIdentifier.Material&&
d.terrainDepthTest;a.cullAboveTerrain=h.identifier===r.RenderPassIdentifier.Material?d.cullAboveTerrain:!1;a.ellipsoidMode=this.ellipsoidMode;a.componentData=this.componentParameters.type;a.cullFace=this.commonMaterialParameters.cullFace;a.doubleSidedMode=this.commonMaterialParameters.doubleSided?L.NormalsDoubleSidedMode.View:L.NormalsDoubleSidedMode.None;a.hasColorTexture=null!=this.baseColorTexture;const k=this._computeWhichMaterialPass();a.blendingEnabled=k===l.Transparent||k===l.OpaqueAndTransparent;
a.alphaDiscardMode=this.alphaDiscardMode;a.integratedMeshMode=this.isIntegratedMesh?null!=d.overlay?.getTexture(B.OverlayContent.ColorNoRasterImage)?null!=d.overlay?.getTexture(B.OverlayContent.WaterNormal)?p.IntegratedMeshMode.ColorOverlayWithWater:p.IntegratedMeshMode.ColorOverlay:p.IntegratedMeshMode.NoOverlay:p.IntegratedMeshMode.None;a.hasPolygonOffset=this.polygonOffsetEnabled;a.pbrMode=a.integratedMeshMode===p.IntegratedMeshMode.ColorOverlayWithWater?u.PBRMode.WaterOnIntegratedMesh:this.usePBR?
this.hasParametersFromSource?m.shadeNormals&&this.isIntegratedMesh?u.PBRMode.Disabled:u.PBRMode.Schematic:u.PBRMode.Normal:u.PBRMode.Disabled;a.emissionSource=null!=this.emissionTexture?C.EmissionSource.Texture:a.pbrMode===u.PBRMode.Normal?C.EmissionSource.Value:C.EmissionSource.None;a.shadeNormals=m.shadeNormals;a.normalType=a.hasNormals?K.NormalType.Compressed:K.NormalType.ScreenDerivative;a.hasSlicePlane=null!=d.slicePlane&&this.commonMaterialParameters.hasSlicePlane;if(h.identifier===r.RenderPassIdentifier.ShadowMap)a.output=
t.ShaderOutput.Shadow,a.vertexDiscardMode=q.VertexDiscardMode.None;else if(h.identifier===r.RenderPassIdentifier.ViewshedShadowMap)a.output=t.ShaderOutput.ViewshedShadow,a.vertexDiscardMode=q.VertexDiscardMode.None;else if(h.identifier===r.RenderPassIdentifier.Highlight)a.output=t.ShaderOutput.Highlight,a.vertexDiscardMode=q.VertexDiscardMode.None;else{a.vertexDiscardMode=k===l.OpaqueAndTransparent?h.transparent?q.VertexDiscardMode.Opaque:q.VertexDiscardMode.Transparent:q.VertexDiscardMode.None;a.output=
h.output;a.receiveAmbientOcclusion=!1;a.receiveShadows=!1;switch(h.output){case t.ShaderOutput.Color:case t.ShaderOutput.ColorEmission:a.receiveAmbientOcclusion=m.applySSAO&&null!=d.ssao;a.hasOccludees=d.hasOccludees;a.receiveShadows=d.shadowMap.ready;a.screenSpaceReflections=null!=d.ssr.lastFrameColor;a.cloudReflections=null!=d.clouds.data;break;case t.ShaderOutput.ObjectAndLayerIdColor:a.objectAndLayerIdColor=!0}a.snowCover=this.hasSnowCover(d)}b=b.acquire(P.ComponentTechnique,a);this._setClean();
return b}hasSnowCover(b){return null!=b.weather&&b.weatherVisible&&"snowy"===b.weather.type&&"enabled"===b.weather.snowCover}submit(b,h,d){if(0!==this.objectOpacity){var {components:m,renderable:a}=d;({geometry:d}=a);var k=a.meta.cameraDepthSquared,{geometryRanges:n,highlightRanges:M,defaultShadowMapRanges:N}=m;switch(this._computeWhichMaterialPass()){case l.Opaque:b.materialOpaque.submitDraw(this,d,n,k);break;case l.Transparent:b.materialTransparent.submitDraw(this,d,n,k);break;case l.OpaqueAndTransparent:b.materialOpaque.submitDraw(this,
d,n,k);b.materialTransparent.submitDraw(this,d,n,k);break;case l.IntegratedMesh:b.materialIntegratedMesh.submitDraw(this,d,n,k),null!=h.overlay?.getTexture(B.OverlayContent.Highlight)&&b.highlightIntegratedMesh.submitDraw(this,d,n,k)}var D=this.componentParameters.castShadows!==f.ComponentParameterSummary.None;D&&b.shadowMap.submitDraw(this,d,n,k);if(null!=M)for(const z of M)b.highlight.submitDraw(this,d,z[1],k,z[0]),D&&b.highlightShadowMap.submitDraw(this,d,z[1],k,z[0]);h.viewshedEnabled&&b.viewshedShadowMap.submitDraw(this,
d,n,k);D&&null!=N&&b.defaultShadowMap.submitDraw(this,d,N,k)}}_computeWhichMaterialPass(){return this.isIntegratedMesh?l.IntegratedMesh:1>this.objectOpacity?l.Transparent:this.componentParameters.opaqueOverride===f.ComponentParameterSummary.All?l.Opaque:1>this.baseColor[3]||this.alphaDiscardMode===y.AlphaDiscardMode.Blend||this.alphaDiscardMode===y.AlphaDiscardMode.MaskBlend?l.Transparent:this.componentParameters.transparent===f.ComponentParameterSummary.None?l.Opaque:this.componentParameters.transparent===
f.ComponentParameterSummary.All?l.Transparent:l.OpaqueAndTransparent}}e.__decorate([c.parameter({vectorOps:G.vec4})],g.prototype,"baseColor",void 0);e.__decorate([c.parameter()],g.prototype,"usePBR",void 0);e.__decorate([c.parameter()],g.prototype,"hasParametersFromSource",void 0);e.__decorate([c.parameter({vectorOps:A.vec3})],g.prototype,"mrrFactors",void 0);e.__decorate([c.parameter({vectorOps:A.vec3})],g.prototype,"emissiveFactor",void 0);e.__decorate([c.parameter({dispose:!0})],g.prototype,"baseColorTexture",
void 0);e.__decorate([c.parameter({dispose:!0})],g.prototype,"metallicRoughnessTexture",void 0);e.__decorate([c.parameter({dispose:!0})],g.prototype,"emissionTexture",void 0);e.__decorate([c.parameter({dispose:!0})],g.prototype,"occlusionTexture",void 0);e.__decorate([c.parameter({dispose:!0})],g.prototype,"normalTexture",void 0);e.__decorate([c.parameter()],g.prototype,"objectOpacity",void 0);e.__decorate([c.parameterBlock()],g.prototype,"commonMaterialParameters",void 0);e.__decorate([c.parameterBlock()],
g.prototype,"componentParameters",void 0);e.__decorate([c.parameter()],g.prototype,"textureAlphaCutoff",void 0);e.__decorate([c.parameter()],g.prototype,"alphaDiscardMode",void 0);e.__decorate([c.parameter()],g.prototype,"isIntegratedMesh",void 0);e.__decorate([c.parameter()],g.prototype,"polygonOffsetEnabled",void 0);e.__decorate([c.parameter()],g.prototype,"ellipsoidMode",void 0);e.__decorate([c.parameter()],g.prototype,"hasOccludees",void 0);var l;(function(b){b[b.Opaque=0]="Opaque";b[b.Transparent=
1]="Transparent";b[b.OpaqueAndTransparent=2]="OpaqueAndTransparent";b[b.IntegratedMesh=3]="IntegratedMesh"})(l||={});class v extends c.MaterialParameterBlock{constructor(){super(...arguments);this.doubleSided=!1;this.cullFace=y.CullFaceOptions.Back;this.hasSlicePlane=!0}}e.__decorate([c.parameter()],v.prototype,"doubleSided",void 0);e.__decorate([c.parameter()],v.prototype,"cullFace",void 0);e.__decorate([c.parameter()],v.prototype,"hasSlicePlane",void 0);class w extends c.MaterialParameterBlock{constructor(){super(...arguments);
this.externalColor=H.fromValues(1,1,1,1);this.externalColorMixMode=I.ColorMixModeEnum.Multiply;this.castShadows=f.ComponentParameterSummary.All}get transparent(){return 1>this.externalColor[3]?f.ComponentParameterSummary.All:f.ComponentParameterSummary.None}get opaqueOverride(){return this.externalColorMixMode===I.ColorMixModeEnum.Replace&&1===this.externalColor[3]?f.ComponentParameterSummary.All:f.ComponentParameterSummary.None}get visible(){return 0<this.externalColor[3]?f.ComponentParameterSummary.All:
f.ComponentParameterSummary.None}get type(){return J.ComponentDataType.Uniform}}e.__decorate([c.parameter({vectorOps:G.vec4})],w.prototype,"externalColor",void 0);e.__decorate([c.parameter()],w.prototype,"externalColorMixMode",void 0);e.__decorate([c.parameter()],w.prototype,"castShadows",void 0);f.ComponentParameterSummary=void 0;(function(b){b[b.All=0]="All";b[b.Some=1]="Some";b[b.None=2]="None"})(f.ComponentParameterSummary||(f.ComponentParameterSummary={}));class x extends c.MaterialParameterBlock{constructor(){super(...arguments);
this.texture=null;this.castShadows=this.opaqueOverride=this.transparent=f.ComponentParameterSummary.None}get type(){return J.ComponentDataType.Varying}}e.__decorate([c.parameter()],x.prototype,"texture",void 0);e.__decorate([c.parameter()],x.prototype,"transparent",void 0);e.__decorate([c.parameter()],x.prototype,"opaqueOverride",void 0);e.__decorate([c.parameter()],x.prototype,"castShadows",void 0);f.CommonMaterialParameters=v;f.ComponentMaterial=g;f.ComponentParametersUniform=w;f.ComponentParametersVarying=
x;Object.defineProperty(f,Symbol.toStringTag,{value:"Module"})});