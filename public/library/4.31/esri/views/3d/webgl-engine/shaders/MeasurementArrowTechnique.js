// All material copyright Esri, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.31/esri/copyright.txt for details.
//>>built
define("require exports ../core/shaderTechnique/ReloadableShaderModule ../core/shaderTechnique/ShaderTechnique ../lib/OrderIndependentTransparency ../lib/VertexAttribute ../../../../chunks/MeasurementArrow.glsl ../../../webgl/enums ../../../webgl/renderState".split(" "),function(g,c,h,k,l,b,m,e,d){class n extends k.ShaderTechnique{constructor(a,p,q){super(a,p,new h.ReloadableShaderModule(m.MeasurementArrow,()=>new Promise((r,t)=>g(["./MeasurementArrow.glsl"],r,t))),q,f);this.primitiveType=e.PrimitiveType.TRIANGLE_STRIP}initializePipeline(a){return d.makePipelineState({blending:a.transparent?
l.blending(a.oitPass):null,polygonOffset:a.polygonOffsetEnabled?{factor:0,units:-4}:null,depthTest:{func:e.CompareFunction.LESS},depthWrite:d.defaultDepthWrite,colorWrite:d.defaultColorWrite})}}const f=new Map([[b.VertexAttribute.POSITION,0],[b.VertexAttribute.NORMAL,1],[b.VertexAttribute.UV0,2],[b.VertexAttribute.LENGTH,3]]);c.MeasurementArrowTechnique=n;c.vertexAttributeLocations=f;Object.defineProperty(c,Symbol.toStringTag,{value:"Module"})});