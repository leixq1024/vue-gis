// All material copyright Esri, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.31/esri/copyright.txt for details.
//>>built
define("require exports ../../../../core/libs/gl-matrix-2/factories/vec3f64 ../../../../core/libs/gl-matrix-2/factories/vec4f64 ../core/shaderLibrary/ShaderOutput ../core/shaderLibrary/attributes/NormalAttribute.glsl ../core/shaderLibrary/attributes/VertexNormal.glsl ../core/shaderLibrary/util/AlphaCutoff ../core/shaderTechnique/ReloadableShaderModule ../core/shaderTechnique/ShaderTechnique ../lib/basicInterfaces ../lib/Material ../lib/OITPass ../lib/OrderIndependentTransparency ../lib/StencilUtils ../materials/pbrUtils ../../../../chunks/DefaultMaterial.glsl ../../../webgl/enums ../../../webgl/renderState".split(" "),
function(v,g,c,w,q,x,r,y,z,A,d,B,t,e,k,C,D,l,h){class E extends r.VertexNormalPassParameters{constructor(){super(...arguments);this.usePBR=this.isSchematic=!1;this.mrrFactors=C.advancedMRRFactors;this.doubleSided=this.hasSymbolColors=this.hasVertexColors=!1;this.doubleSidedType="normal";this.cullFace=d.CullFaceOptions.Back;this.hasInstancedColor=this.isInstanced=!1;this.emissiveFactor=c.ZEROS;this.instancedDoublePrecision=!1;this.normalType=x.NormalType.Attribute;this.castShadows=this.receiveAmbientOcclusion=
this.receiveShadows=!0;this.ambient=c.freeze(.2,.2,.2);this.diffuse=c.freeze(.8,.8,.8);this.externalColor=w.fromValues(1,1,1,1);this.colorMixMode="multiply";this.layerOpacity=this.opacity=1;this.origin=c.create();this.hasSlicePlane=!1;this.hasSliceHighlight=!0;this.offsetTransparentBackfaces=!1;this.modelTransformation=this.vvSymbolRotationMatrix=this.vvSymbolAnchor=this.vvOpacity=this.vvColor=this.vvSize=null;this.transparent=!1;this.writeDepth=!0;this.customDepthTest=d.DepthTestFunction.Less;this.textureAlphaMode=
d.AlphaDiscardMode.Blend;this.textureAlphaCutoff=y.alphaCutoff;this.textureAlphaPremultiplied=!1;this.renderOccluded=B.RenderOccludedFlag.Occlude;this.isDecoration=!1}}class F extends r.VertexNormalDrawParameters{constructor(){super(...arguments);this.slicePlaneLocalOrigin=this.origin=c.create()}}class G extends A.ShaderTechnique{constructor(a,m,b,f=new z.ReloadableShaderModule(D.DefaultMaterial,()=>new Promise((n,p)=>v(["./DefaultMaterial.glsl"],n,p)))){super(a,m,f,b);this.type="DefaultMaterialTechnique"}_makePipeline(a,
m){const {oitPass:b,output:f,transparent:n,cullFace:p,customDepthTest:H,hasOccludees:u,enableOffset:I}=a,J=b===t.OITPass.NONE,K=b===t.OITPass.FrontFace;var L=h.makePipelineState,M=q.isColorOrColorEmission(f)&&n?e.blending(b):null;var N=a.cullFace!==d.CullFaceOptions.None?!0:a.hasSlicePlane?!1:!a.transparent&&!a.doubleSidedMode;return L.call(h,{blending:M,culling:N?h.cullingParams(p):null,depthTest:{func:e.oitDepthTest(b,H===d.DepthTestFunction.Lequal?l.CompareFunction.LEQUAL:l.CompareFunction.LESS)},
depthWrite:e.depthWrite(a),drawBuffers:f===q.ShaderOutput.Depth?{buffers:[l.SpecialDrawBuffers.NONE]}:e.getDrawBuffers(b,f),colorWrite:h.defaultColorWrite,stencilWrite:u?k.stencilWriteMaskOn:null,stencilTest:u?m?k.stencilToolMaskBaseParams:k.stencilBaseAllZerosParams:null,polygonOffset:J||K?null:e.getOITPolygonOffset(I)})}initializePipeline(a){this._occludeePipelineState=this._makePipeline(a,!0);return this._makePipeline(a,!1)}getPipeline(a){return a?this._occludeePipelineState:super.getPipeline()}}
g.DefaultMaterialDrawParameters=F;g.DefaultMaterialPassParameters=E;g.DefaultMaterialTechnique=G;Object.defineProperty(g,Symbol.toStringTag,{value:"Module"})});