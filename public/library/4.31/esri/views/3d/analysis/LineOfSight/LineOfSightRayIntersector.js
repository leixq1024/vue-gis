// All material copyright Esri, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.31/esri/copyright.txt for details.
//>>built
define("exports ../../../../chunks/tslib.es6 ../../../../geometry ../../../../core/Accessor ../../../../core/screenUtils ../../../../core/accessorSupport/decorators/property ../../../../core/has ../../../../core/Logger ../../../../core/RandomLCG ../../../../core/accessorSupport/decorators/subclass ../../../../chunks/vec32 ../../../../core/libs/gl-matrix-2/factories/vec3f64 ../../../../geometry/support/ray ../../../../geometry/support/vectorStacks ../../../../layers/graphics/dehydratedFeatures ./LineOfSightIntersectionResult ../../support/geometryUtils/ray ../../terrain/Intersector ../../webgl-engine/lib/Intersector ../../webgl-engine/lib/IntersectorInterfaces ../../webgl-engine/lib/intersectorUtilsConversions ../../../../geometry/Point".split(" "),
function(l,q,L,x,y,t,M,N,O,z,f,k,n,A,B,u,C,D,E,p,F,G){l.LineOfSightRayIntersector=class extends x{constructor(a){super(a);this._terrainIntersectionOptionsLayerUids=new Set(["terrain"])}initialize(){this.intersector=E.newIntersector(this.view.state.viewingMode);this.intersector.options.hud=!1;this.intersector.options.store=p.StoreResults.MIN}getScreenPointIntersection(a){a=y.screenPointObjectToArray(a,A.sv2d.get());a=C.fromScreen(this.view.state.camera,a,r);return this._getRayIntersection(a)}_getRayIntersection(a,
d){const {view:g,intersector:e}=this;if(null==a||null==g.sceneIntersectionHelper)return null;e.options.store=p.StoreResults.MIN;g.sceneIntersectionHelper.intersectToolIntersectorRay(a,e,d);var b=e.results.min;if(null==b.target)return null;const c=k.create();if(!b.getIntersectionPoint(c)||null!=d?.maxDistance&&f.squaredDistance(c,a.origin)>d.maxDistance**2)return null;d=g.renderCoordsHelper.fromRenderCoords(c,new G({spatialReference:g.spatialReference}));const m=k.clone(b.normal);if(D.isTerrainIntersectorResult(b))return new u.LineOfSightIntersectionResult({type:p.IntersectorType.TERRAIN,
id:b.target.lij.slice(),mapPoint:d,renderPoint:c,normal:m,ray:n.copy(a),graphic:null});b=F.toGraphic(b,g);if(null==b)return null;const {layer:h,sourceLayer:v}=b,H="scene"===v?.type?B.getObjectId(b,v.objectIdField):b.uid;return new u.LineOfSightIntersectionResult({type:p.IntersectorType.OBJECT,id:`${h?.uid}/${H}`,mapPoint:d,renderPoint:c,normal:m,ray:n.copy(a),graphic:b})}updateFromGroundIntersection(a,d,g){var e=I;const b=J,c=K,m=w;f.copy(b,a);this.view.renderCoordsHelper.worldUpAtPosition(b,c);f.normalize(c,
c);var h=this.view.basemapTerrain.visibleElevationBounds;h=(0<=d?1:-1)*((h?Math.abs(h.max-h.min):100)+Math.abs(d));f.scale(m,c,h);f.add(e,b,m);n.fromPoints(e,b,r);e=this._getRayIntersection(r,{include:this._terrainIntersectionOptionsLayerUids,maxDistance:h});if(null!=e)return a=w,f.scale(a,c,d),f.add(g,e.renderPoint,a),k.clone(e.normal);f.copy(g,a);return null}};q.__decorate([t.property()],l.LineOfSightRayIntersector.prototype,"view",void 0);q.__decorate([t.property()],l.LineOfSightRayIntersector.prototype,
"intersector",void 0);l.LineOfSightRayIntersector=q.__decorate([z.subclass("esri.views.3d.analysis.LineOfSight.LineOfSightRayIntersector")],l.LineOfSightRayIntersector);const I=k.create(),J=k.create(),K=k.create(),w=k.create(),r=n.create();Object.defineProperty(l,Symbol.toStringTag,{value:"Module"})});