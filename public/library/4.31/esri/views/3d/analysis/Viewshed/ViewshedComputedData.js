// All material copyright Esri, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.31/esri/copyright.txt for details.
//>>built
define("exports ../../../../chunks/tslib.es6 ../../../../geometry ../../../../core/Accessor ../../../../core/mathUtils ../../../../core/accessorSupport/decorators/property ../../../../core/has ../../../../core/Logger ../../../../core/RandomLCG ../../../../core/accessorSupport/decorators/subclass ../../../../core/libs/gl-matrix-2/factories/mat4f64 ../../../../chunks/vec32 ../../../../core/libs/gl-matrix-2/factories/vec3f64 ./viewshedToolUtils ../../../../geometry/Point".split(" "),function(b,c,x,u,
l,d,y,z,A,v,w,h,k,m,t){var p;b.ViewshedComputedData=p=class extends u{constructor(a){super(a);this.observerRenderSpaceOverride=null}get observer(){return this.viewshed.observer??new t}get effectiveObserverRenderSpace(){return this.observerRenderSpaceOverride??this.observerRenderSpace}get effectiveObserver(){return this.renderSpaceToPoint(this.effectiveObserverRenderSpace,this.observer.spatialReference)}get effectiveTargetRenderSpace(){return this._computeTargetRenderSpace(this.effectiveObserverRenderSpace)}get farDistance(){return this.viewshed.farDistance}get farDistanceRenderSpace(){return this.farDistance/
this.metersPerUnit}get heading(){return this.viewshed.heading}get tilt(){return this.viewshed.tilt}get feature(){return this.viewshed.feature}get tiltParallelToSurface(){return this.tilt-90}get horizontalFieldOfView(){return this.viewshed.horizontalFieldOfView}get verticalFieldOfView(){return this.viewshed.verticalFieldOfView}get observerRenderSpace(){return this._pointToRenderSpace(this.observer,k.create())}get target(){return this.renderSpaceToPoint(this.targetRenderSpace,this.observer.spatialReference)}get targetRenderSpace(){return this._computeTargetRenderSpace(this.observerRenderSpace)}get targetDirection(){const a=
h.sub(k.create(),this.targetRenderSpace,this.observerRenderSpace);return h.normalize(a,a)}get tiltedUpVector(){const a=m.rotateBy(k.create(),this.upVector,-l.deg2rad(this.tiltParallelToSurface),this.leftVector);return h.normalize(a,a)}get _basis(){return this.renderCoordsHelper.basisMatrixAtPosition(this.observerRenderSpace,w.create())}get upVector(){const a=this._basis;return k.fromValues(a[8],a[9],a[10])}get northVector(){const a=this._basis;return k.fromValues(a[4],a[5],a[6])}get leftVector(){const a=
this.upVector,e=m.rotateBy(k.create(),this.northVector,-l.deg2rad(this.heading),a);return h.cross(e,a,e)}get rightVector(){return h.negate(k.create(),this.leftVector)}clone(){return new p({renderCoordsHelper:this.renderCoordsHelper,viewshed:this.viewshed.clone()})}isValid(){return this.viewshed.isValid()}get metersPerUnit(){return this.renderCoordsHelper.spatialReference.metersPerUnit}pointOnSphere(a,e,f){const {observerRenderSpace:n,targetRenderSpace:q}=this,g=h.sub(r,q,n);m.rotateBy(g,g,-l.deg2rad(e),
this.leftVector);m.rotateBy(g,g,-l.deg2rad(a),this.tiltedUpVector);return h.add(f,g,n)}cornerPoints(a){const e=this.horizontalFieldOfView/2,f=this.verticalFieldOfView/2;this.pointOnSphere(-e,f,a.topLeft);this.pointOnSphere(e,f,a.topRight);this.pointOnSphere(-e,-f,a.bottomLeft);this.pointOnSphere(e,-f,a.bottomRight)}arcCentersPoints(a){const e=this.horizontalFieldOfView/2,f=this.verticalFieldOfView/2;this.pointOnSphere(0,f,a.top);this.pointOnSphere(0,-f,a.bottom);this.pointOnSphere(-e,0,a.left);this.pointOnSphere(e,
0,a.right)}parallelCenterPoints(a){const e=this.observerRenderSpace;var f=this.farDistanceRenderSpace*Math.sin(l.deg2rad(this.verticalFieldOfView/2));f=h.scale(r,this.tiltedUpVector,f);h.add(a.top,e,f);h.sub(a.bottom,e,f)}renderSpaceToPoint(a,e){const f=r;this.renderCoordsHelper.fromRenderCoords(a,f,e);return new t(f[0],f[1],f[2],e)}_pointToRenderSpace(a,e){const f=k.fromArray(a.toArray());this.renderCoordsHelper.toRenderCoords(f,a.spatialReference,e);return e}_computeTargetRenderSpace(a){const {leftVector:e,
northVector:f,upVector:n}=this,q=this.farDistanceRenderSpace,g=k.create();h.scale(g,f,q);m.rotateBy(g,g,-l.deg2rad(this.heading),n);m.rotateBy(g,g,-l.deg2rad(this.tiltParallelToSurface),e);h.add(g,a,g);return g}};c.__decorate([d.property()],b.ViewshedComputedData.prototype,"renderCoordsHelper",void 0);c.__decorate([d.property()],b.ViewshedComputedData.prototype,"viewshed",void 0);c.__decorate([d.property()],b.ViewshedComputedData.prototype,"observerRenderSpaceOverride",void 0);c.__decorate([d.property()],
b.ViewshedComputedData.prototype,"observer",null);c.__decorate([d.property()],b.ViewshedComputedData.prototype,"effectiveObserverRenderSpace",null);c.__decorate([d.property()],b.ViewshedComputedData.prototype,"effectiveObserver",null);c.__decorate([d.property()],b.ViewshedComputedData.prototype,"effectiveTargetRenderSpace",null);c.__decorate([d.property()],b.ViewshedComputedData.prototype,"farDistance",null);c.__decorate([d.property()],b.ViewshedComputedData.prototype,"farDistanceRenderSpace",null);
c.__decorate([d.property()],b.ViewshedComputedData.prototype,"heading",null);c.__decorate([d.property()],b.ViewshedComputedData.prototype,"tilt",null);c.__decorate([d.property()],b.ViewshedComputedData.prototype,"feature",null);c.__decorate([d.property()],b.ViewshedComputedData.prototype,"tiltParallelToSurface",null);c.__decorate([d.property()],b.ViewshedComputedData.prototype,"horizontalFieldOfView",null);c.__decorate([d.property()],b.ViewshedComputedData.prototype,"verticalFieldOfView",null);c.__decorate([d.property()],
b.ViewshedComputedData.prototype,"observerRenderSpace",null);c.__decorate([d.property()],b.ViewshedComputedData.prototype,"target",null);c.__decorate([d.property()],b.ViewshedComputedData.prototype,"targetRenderSpace",null);c.__decorate([d.property()],b.ViewshedComputedData.prototype,"targetDirection",null);c.__decorate([d.property()],b.ViewshedComputedData.prototype,"tiltedUpVector",null);c.__decorate([d.property()],b.ViewshedComputedData.prototype,"_basis",null);c.__decorate([d.property()],b.ViewshedComputedData.prototype,
"upVector",null);c.__decorate([d.property()],b.ViewshedComputedData.prototype,"northVector",null);c.__decorate([d.property()],b.ViewshedComputedData.prototype,"leftVector",null);c.__decorate([d.property()],b.ViewshedComputedData.prototype,"rightVector",null);c.__decorate([d.property()],b.ViewshedComputedData.prototype,"isValid",null);c.__decorate([d.property()],b.ViewshedComputedData.prototype,"metersPerUnit",null);b.ViewshedComputedData=p=c.__decorate([v.subclass("esri.views.3d.analysis.Viewshed.ViewshedComputedData")],
b.ViewshedComputedData);const r=k.create();Object.defineProperty(b,Symbol.toStringTag,{value:"Module"})});