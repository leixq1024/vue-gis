// All material copyright Esri, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.31/esri/copyright.txt for details.
//>>built
define("exports ../../../../core/CircularArray ../../../../core/Error ../../../../core/has ../../../../core/Logger ../../../../geometry/support/aaBoundingRect ../../tiling/TileInfoView ../../tiling/TileKey ../../tiling/TileQueue ../../tiling/TileStrategy ../../engine/webgl/FeatureTile".split(" "),function(h,k,l,g,m,n,w,p,x,y,q){class r{constructor(a,b,c,d){this.getStage=a;this.getSubscriptionVersion=b;this.version=c;this._tileInfoView=d;this._pendingUpdates=new k(1E3);this._locked=!1;this._tiles=
new Map}destroy(){for(const a of this.tiles())a.destroy();this._pendingUpdates.clear();this._tiles.clear()}tiles(){return this._tiles.values()}size(){return this._tiles.size}setTiles(a){this._tiles.clear();for(const b of a)this._tiles.set(b.key.id,b)}lockUploads(){this._locked=!0}unlockUploads(){this._locked=!1;this.flush()}enqueueUpdate(a){this._pendingUpdates.enqueue(a)}update(a){if(!this._locked)for(;this._pendingUpdates.size;){const b=this._pendingUpdates.peek();if(null==b||b.inner.attributeEpoch>
a)break;this._updateTile(b);this._pendingUpdates.dequeue()}}removeTile(a){const b=this._tiles.get(a);g("esri-2d-update-debug")&&console.debug(`Tile[${a}] RenderState.removeTile`);b?.destroy();this._tiles.delete(a)}isTileDone(a){return(a=this._tiles.get(a.id))?a.isReady:!1}flush(){for(;this._pendingUpdates.size;){const a=this._pendingUpdates.dequeue();null!=a&&this._updateTile(a)}for(const a of this._tiles.values())a.upload()}_updateTile(a){const {inner:b,objectIdMap:c}=a;a=this.getSubscriptionVersion(b.id);
if(a!==b.subscriptionVesrion)g("esri-2d-update-debug")&&console.debug(`Version[${`${b.subscriptionVesrion} != ${a}`}] Tile[${b.id}] FeatureContainer - Dropping message, outdated version]`,b);else if(g("esri-2d-update-debug")&&console.debug(`Version[${b.version}] Tile[${b.id}] Chunk[${b.debugInfo?.chunkId??"\x3cEnsureEnd\x3e"}] RenderState.updateTile [${b.type}]`,b),a=this._ensureTile(b.id),"update"===b.type){const [t,...u]=b.modify;a.onMessage({type:"update",modify:t,remove:b.remove,end:b.end,attributeEpoch:b.attributeEpoch,
objectIdMap:c});for(var d of u){var e=this._tiles.get(d.tileId);if(e)e.onMessage({type:"update",modify:d,remove:b.remove,end:!1,isPixelBuffer:!0,attributeEpoch:null,objectIdMap:c})}}else if(null==b.append)a.onMessage({type:"append",clear:b.clear,debugInfo:b.debugInfo,end:b.end,attributeEpoch:b.attributeEpoch,objectIdMap:c});else{var [f,...v]=b.append;a.onMessage({type:"append",clear:b.clear,append:f,debugInfo:b.debugInfo,end:b.end,attributeEpoch:b.attributeEpoch,objectIdMap:c});for(e of v)if(d=this._tiles.get(e.tileId))d.onMessage({type:"update",
modify:e,remove:[],sort:!1,end:!1,isPixelBuffer:!0,attributeEpoch:null,objectIdMap:c})}}_ensureTile(a){if(!this._tiles.has(a)){const b=this._createTile(a);this._copyPixelBufferedEntitiesInto(b);this._tiles.set(a,b)}return this._tiles.get(a)}_createTile(a){g("esri-2d-update-debug")&&console.debug(`Version[${this.version}] Tile[${a}] RenderState.createTile`);a=new p(a);var b=this._tileInfoView.getTileBounds(n.create(),a);const c=this._tileInfoView.getTileResolution(a.level);a=new q.FeatureTile(a,c,
b[0],b[3],!0);a.stage=this.getStage();a.stage||(b=new l("featurelayerview:webgl","Cannot create tile with empty stage"),m.getLogger("esri.views.2d.layers.features.RenderState").error(b));return a}_copyPixelBufferedEntitiesInto(a){let b=7;const c=this._tileInfoView.getLODInfoAt(a.key);for(let e=-1;1>=e;e++)for(let f=-1;1>=f;f++)if(0!==e||0!==f){var d=a.key.getNormalizedNeighbor(f,e,c).id;d=this._tiles.get(d);null!=d&&a.copyPixelBufferedEntitesFrom(d,1<<b,f,e);b--}}}h.RenderState=r;Object.defineProperty(h,
Symbol.toStringTag,{value:"Module"})});