// All material copyright Esri, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.31/esri/copyright.txt for details.
//>>built
define("exports ../../utils ../Technique ../TechniqueType ../shaders/BlendShader ../shaders/OpacityShader ../../../../../../webgl/enums ../../../../../../webgl/Texture ../../../../../../webgl/TextureDescriptor".split(" "),function(l,p,q,r,t,u,e,v,w){class x extends q.Technique{constructor(){super(...arguments);this.type=r.TechniqueType.Blend;this._backBufferTexture=null;this.shaders={blend:new t.BlendShader,opacity:new u.OpacityShader}}shutdown(){super.shutdown();null!==this._backBufferTexture&&(this._backBufferTexture.dispose(),
this._backBufferTexture=null)}render(b,a){const {context:c,state:d,pixelRatio:m,inFadeTransition:y,painter:f}=b;var {size:g}=d;const h=c.getBoundFramebufferObject();let k;null!=h?(k=h.width,g=h.height):(k=Math.round(m*g[0]),g=Math.round(m*g[1]));const {blendMode:n}=a;"normal"===n?(a={shader:this.shaders.opacity,uniforms:{config:{layerTexture:{texture:a.colorTexture,unit:0},opacity:a.config.opacity}},defines:null,optionalAttributes:null,useComputeBuffer:!1},f.setPipelineState(p.simplePipelineState),
f.submitDrawMesh(c,a,f.quadMesh)):(b=this._createOrResizeTexture(b,k,g),h.copyToTexture(0,0,k,g,0,0,b),f.setPipelineState({color:{write:[!0,!0,!0,!0],blendMode:"custom",blendParameters:{srcRGB:e.BlendFactor.ONE,dstRGB:e.BlendFactor.ZERO,srcAlpha:e.BlendFactor.ONE,dstAlpha:e.BlendFactor.ZERO}},depth:!1,stencil:!1}),f.submitDrawMesh(c,{shader:this.shaders.blend,uniforms:{config:{backbufferTexture:{texture:b,unit:0},layerTexture:{texture:a.colorTexture,unit:1},inFadeOpacity:y?1:0,...a.config}},defines:{blendMode:n},
optionalAttributes:null,useComputeBuffer:!1},f.quadMesh))}_createOrResizeTexture(b,a,c){({context:b}=b);if(null!==this._backBufferTexture&&this._backBufferTexture.descriptor?.width===a&&this._backBufferTexture.descriptor?.height===c)return this._backBufferTexture;if(null===this._backBufferTexture){const d=new w.TextureDescriptor;d.internalFormat=e.PixelFormat.RGBA;d.wrapMode=e.TextureWrapMode.CLAMP_TO_EDGE;d.width=a;d.height=c;this._backBufferTexture=new v.Texture(b,d)}else this._backBufferTexture.resize(a,
c);return this._backBufferTexture}}l.BlendTechnique=x;Object.defineProperty(l,Symbol.toStringTag,{value:"Module"})});