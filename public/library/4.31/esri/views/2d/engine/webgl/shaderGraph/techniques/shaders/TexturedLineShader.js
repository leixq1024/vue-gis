// All material copyright Esri, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.31/esri/copyright.txt for details.
//>>built
define("exports ../../../../../../../chunks/tslib.es6 ../../../../../../../core/screenUtils ../../../../../../../symbols/cim/constants ../../GraphShaderModule ../../graph/glsl ./AFeatureShader ./constants ./LineShader ./MosaicInfo ./utils".split(" "),function(t,g,y,x,h,a,z,v,p,A,u){class k extends p.LineVertexInput{}g.__decorate([h.location(9,a.Float)],k.prototype,"accumulatedDistance",void 0);g.__decorate([h.location(10,a.Vec2)],k.prototype,"segmentDirection",void 0);g.__decorate([h.location(11,
a.Float)],k.prototype,"offsetAlongLine",void 0);g.__decorate([h.location(12,a.Float)],k.prototype,"capType",void 0);g.__decorate([h.location(13,a.Vec4)],k.prototype,"tlbr",void 0);class B extends p.LineFragmentInput{}class w extends p.LineShader{_getDistanceRatio(b,d){b=u.getBit(b.bitset,v.bitsetLineScaleDash);return b.multiply(a.max(d,new a.Float(.25)).multiply(new a.Float(2))).add((new a.Float(1)).subtract(b).multiply(y.pt2px(1)))}_getSDFAlpha(b){const {halfWidth:d,normal:l,tlbr:c,patternSize:f,
accumulatedDistance:e,offsetAlongLine:q,dashToPx:m,capType:n}=b;b=f.x.divide(x.dashSdfRasterizationScale).multiply(m);b=a.fract(e.add(q).divide(b));b=a.mix(c.xy,c.zw,new a.Vec2(b,.5));b=u.rgba2float(a.texture2D(this.mosaicInfo.texture,b)).multiply(2).subtract(1).multiply(x.dashSdfDistanceNormalization).multiply(m);const r=l.y.multiply(d);b=a.cond([a.equal(n,new a.Float(1)),b.subtract(d)],[a.equal(n,new a.Float(2)),a.sqrt(a.pow(a.max(b,new a.Float(0)),new a.Float(2)).add(r.multiply(r))).subtract(d)],
[!0,b]);b=a.clamp((new a.Float(.25)).subtract(b),new a.Float(0),new a.Float(1));return new a.Vec4(b)}_getPatternColor(b){const {halfWidth:d,normal:l,color:c,accumulatedDistance:f,patternSize:e,sampleAlphaOnly:q,tlbr:m}=b;b=e.y.multiply((new a.Float(2)).multiply(d).divide(e.x));b=a.fract(f.divide(b));const n=(new a.Float(.5)).multiply(l.y).add(new a.Float(.5));b=a.mix(m.xy,m.zw,new a.Vec2(n,b));b=a.texture2D(this.mosaicInfo.texture,b);null!=this.visualVariableColor&&(b=a.ifElse(a.greaterThan(q,new a.Float(.5)),
new a.Vec4(c.a),c));return b}vertex(b,d){const {segmentDirection:l,tlbr:c,bitset:f}=b,e=p.getLineVertexData(this,b),q=b.accumulatedDistance.divide(this.view.displayZoomFactor).add(a.dot(l,e.scaledOffset)),m=new a.Vec2(c.z.subtract(c.x),c.w.subtract(c.y)),n=c.divide(this.mosaicInfo.size.xyxy),r=u.getBit(f,v.bitsetLineIsSdf),C=u.getBit(f,v.bitsetGenericConsiderAlphaOnly),D=a.ifElse(a.greaterThan(r,new a.Float(.5)),this._getDistanceRatio(b,e.scaledHalfWidth),new a.Float(1));return{...e,tlbr:n,patternSize:m,
accumulatedDistance:q,isSDF:r,sampleAlphaOnly:C,dashToPx:D,offsetAlongLine:b.offsetAlongLine,capType:b.capType,...this.maybeRunHittest(b,d,e.halfWidth)}}fragment(b){const {color:d,opacity:l,isSDF:c}=b;var f=p.getLineAntialiasing(b,this.antialiasingControls.blur);const e=a.ifElse(a.greaterThan(c,new a.Float(.5)),this._getSDFAlpha(b),this._getPatternColor(b));f=d.multiply(l).multiply(f).multiply(e);return this.getFragmentOutput(f,b)}}g.__decorate([h.uniform(A.MosaicInfo)],w.prototype,"mosaicInfo",void 0);
g.__decorate([g.__param(0,h.input(k)),g.__param(1,h.input(z.BaseHittestVertexInput))],w.prototype,"vertex",null);t.TexturedLineFragmentInput=B;t.TexturedLineShader=w;t.TexturedLineVertexInput=k;Object.defineProperty(t,Symbol.toStringTag,{value:"Module"})});