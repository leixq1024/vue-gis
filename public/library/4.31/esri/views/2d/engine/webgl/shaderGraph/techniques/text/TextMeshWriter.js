// All material copyright Esri, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.31/esri/copyright.txt for details.
//>>built
define("exports ../../../../../../../core/mathUtils ../../../../../../../core/screenUtils ../../../../../../../geometry/GeometryCursor ../../../../../../../symbols/cim/placements/CIMMarkerPlacementHelper ../../../alignmentUtils ../../../definitions ../../../mesh/templates/shapingUtils ../fill/meshWriterUtils ../mesh/loadGeometryEngine ../mesh/MeshWriter ../shaders/constants ./TextParams ../../../../../../webgl/enums".split(" "),function(x,B,h,I,J,C,w,K,k,L,M,D,N,l){const q=[4,4];var p=[16,4];const O=
{topLeft:p,topRight:p,bottomLeft:p,bottomRight:p};p=[4,2];const n=[4,6],E={topLeft:p,topRight:p,bottomLeft:n,bottomRight:n},F={topLeft:p,topRight:n,bottomLeft:p,bottomRight:n},P={topLeft:n,topRight:n,bottomLeft:q,bottomRight:q},Q={topLeft:q,topRight:q,bottomLeft:n,bottomRight:n},R={topLeft:n,topRight:q,bottomLeft:n,bottomRight:q},S={topLeft:q,topRight:n,bottomLeft:q,bottomRight:n},G={createComputedParams:a=>a,optionalAttributes:{zoomRange:{type:l.DataType.UNSIGNED_SHORT,count:2,packPrecisionFactor:w.minMaxZoomPrecisionFactor,
packTessellation:({minZoom:a,maxZoom:b})=>[a||0,b||28]},clipAngle:{type:l.DataType.UNSIGNED_BYTE,count:1,packTessellation:({clipAngle:a})=>Math.round(254/360*(a||0))},referenceSymbol:{type:l.DataType.BYTE,count:4,packPrecisionFactor:1,packTessellation:(a,b)=>{const c=a.isLineLabel||!a.referenceBounds,e=C.getXDirection(c?"center":b.horizontalAlignment);b=C.getYDirection(c?"middle":b.verticalAlignment);const {offsetX:d,offsetY:f,size:m}=c?{offsetX:0,offsetY:0,size:0}:a.referenceBounds;return[h.pt2px(d),
-h.pt2px(f),Math.round(h.pt2px(m)),e+1<<2|b+1]}}},attributes:{pos:{type:l.DataType.SHORT,count:2,pack:"position",packPrecisionFactor:10},id:{type:l.DataType.UNSIGNED_BYTE,count:3,pack:"id"},bitset:{type:l.DataType.UNSIGNED_BYTE,count:1,packTessellation:({isBackground:a,mapAligned:b})=>k.packBitset([[D.bitsetTextIsBackground,a],[D.bitsetTextIsMapAligned,!!b]])},offset:{type:l.DataType.SHORT,count:2,packPrecisionFactor:8,packAlternating:{count:4,packTessellation:({offsets:a})=>{const {bottomLeft:b,
bottomRight:c,topLeft:e,topRight:d}=a;return[e,d,b,c]}}},textureUV:{type:l.DataType.SHORT,count:2,packPrecisionFactor:4,packAlternating:{count:4,packTessellation:({texcoords:a})=>{const {bottomLeft:b,bottomRight:c,topLeft:e,topRight:d}=a;return[e,d,b,c]}}},color:{type:l.DataType.UNSIGNED_BYTE,count:4,normalized:!0,packTessellation:({color:a})=>a},fontSize:{type:l.DataType.UNSIGNED_SHORT,count:1,packPrecisionFactor:4,packTessellation:({fontSize:a})=>Math.round(h.pt2px(a))},referenceSize:{type:l.DataType.UNSIGNED_BYTE,
count:1,packPrecisionFactor:4,packTessellation:({fontSize:a},{referenceSize:b})=>Math.round(h.pt2px(b??a))},outlineColor:{type:l.DataType.UNSIGNED_BYTE,count:4,normalized:!0,pack:({outlineColor:a})=>k.processColorInput(a)},haloColor:{type:l.DataType.UNSIGNED_BYTE,count:4,normalized:!0,pack:({haloColor:a})=>k.processColorInput(a)},outlineAndHaloSize:{type:l.DataType.UNSIGNED_SHORT,count:2,packPrecisionFactor:4,packTessellation:({outlineSize:a,haloSize:b})=>[Math.round(h.pt2px(a)),Math.round(h.pt2px(b))]}}};
class T extends M.MeshWriter{constructor(){super(...arguments);this.vertexSpec=G;this._textMeshParamsPropsInitialized=!1}ensurePacked(a,b,c){super.ensurePacked(a,b,c);if(!this._textMeshParamsPropsInitialized||this._evaluator.hasDynamicProperties)this._textMeshTransformProps=new N.TextMeshTransformProps(this.evaluatedMeshParams),this._textMeshParamsPropsInitialized=!0}_write(a,b,c){const e=this._getShaping();if(e){var d=b.getDisplayId();if(null!=this.evaluatedMeshParams.placement)return this._writePlacedTextMarkers(a,
b,e,c);if(c?.nextPath())return c.nextPoint(),this._writeGlyphs(a,d,c.x,c.y,e,0);if("esriGeometryPolygon"===b.geometryType){b=b.readCentroidForDisplay();if(!b)return;const [f,m]=b.coords;return this._writeGlyphs(a,d,f,m,e,0)}if("esriGeometryMultipoint"===b.geometryType)b.readGeometryForDisplay()?.forEachVertex((f,m)=>this._writeGlyphs(a,d,f,m,e,0));else return c=b.readXForDisplay(),b=b.readYForDisplay(),this._writeGlyphs(a,d,c,b,e,0)}}_writePlacedTextMarkers(a,b,c,e){if(e=e??I.GeometryCursor.fromFeatureSetReaderCIM(b))if(e=
J.CIMMarkerPlacementHelper.getPlacement(e,-1,this.evaluatedMeshParams.placement,h.pt2px(1),a.id,L.getGeometryEngine())){b=b.getDisplayId();for(var d=e.next();null!=d;){const f=d.tx,m=-d.ty;d=-d.getAngle();this._writeGlyphs(a,b,f,m,c,d);d=e.next()}}}_getShaping(a){const b=this._textMeshTransformProps,c=this.evaluatedMeshParams;if(!c.glyphs?.glyphs.length)return null;const e=h.pt2px(b.fontSize),d=h.pt2px(b.offsetX),f=h.pt2px(b.offsetY),m=B.clamp(h.pt2px(c.lineWidth),w.minTextLineWidth,w.maxTextLineWidth),
u=w.magicLabelLineHeight*B.clamp(c.lineHeightRatio,.25,4);return K.shapeGlyphs(c.glyphs,{scale:e/w.glyphSize,angle:b.postAngle,xOffset:d,yOffset:f,horizontalAlignment:c.horizontalAlignment,verticalAlignment:a||c.verticalAlignment,maxLineWidth:m,lineHeight:u,decoration:c.decoration,borderLineSizePx:h.pt2px(c.boxBorderLineSize),hasBackground:!!c.boxBackgroundColor,useCIMAngleBehavior:c.useCIMAngleBehavior})}_writeGlyphs(a,b,c,e,d,f,m,u){const v=this.evaluatedMeshParams;var g=this._textMeshTransformProps;
const y=h.pt2px(g.fontSize),r=g.haloSize,t=g.outlineSize;var z=h.pt2px(g.offsetX),A=h.pt2px(g.offsetY);const [U,V]=k.getMinMaxZoom(v.scaleInfo,this.getTileInfo());0!==f&&d.setRotation(f);g=d.bounds;z=c+g.x+z;A=e+g.y-A;g=2*Math.max(g.width,g.height)*(v.minPixelBuffer?v.minPixelBuffer/y:1);d.textBox&&(a.recordStart(this.instanceId,this.attributeLayout,d.glyphs[0].textureBinding),a.recordBounds(z,A,g,g),this._writeTextBox(a,b,c,e,d.textBox,m,u),a.recordEnd());for(const H of d.glyphs){a.recordStart(this.instanceId,
this.attributeLayout,H.textureBinding);a.recordBounds(z,A,g,g);const {texcoords:W,offsets:X}=H;this._writeQuad(a,b,c,e,{texcoords:W,offsets:X,fontSize:y,haloSize:r,outlineSize:t,color:k.processColorInput(v.color),isBackground:!1,referenceBounds:m,minZoom:U,maxZoom:V,...u});a.recordEnd()}0!==f&&d.setRotation(-f)}_writeTextBox(a,b,c,e,d,f,m){const u=this.evaluatedMeshParams,{fontSize:v,haloSize:g,outlineSize:y}=this._textMeshTransformProps,{boxBackgroundColor:r,boxBorderLineColor:t}=u;f={isBackground:!0,
fontSize:v,haloSize:g,outlineSize:y,referenceBounds:f,...m};r&&(this._writeQuad(a,b,c,e,{texcoords:O,offsets:d.main,color:k.processColorInput(r),...f}),t||(this._writeQuad(a,b,c,e,{texcoords:P,offsets:d.top,color:k.processColorInput(r),...f}),this._writeQuad(a,b,c,e,{texcoords:Q,offsets:d.bot,color:k.processColorInput(r),...f}),this._writeQuad(a,b,c,e,{texcoords:R,offsets:d.left,color:k.processColorInput(r),...f}),this._writeQuad(a,b,c,e,{texcoords:S,offsets:d.right,color:k.processColorInput(r),...f})));
t&&(this._writeQuad(a,b,c,e,{texcoords:E,offsets:d.top,color:k.processColorInput(t),...f}),this._writeQuad(a,b,c,e,{texcoords:E,offsets:d.bot,color:k.processColorInput(t),...f}),this._writeQuad(a,b,c,e,{texcoords:F,offsets:d.left,color:k.processColorInput(t),...f}),this._writeQuad(a,b,c,e,{texcoords:F,offsets:d.right,color:k.processColorInput(t),...f}))}_writeQuad(a,b,c,e,d){const f=a.vertexCount();this._writeVertex(a,b,c,e,d);a.indexWrite(f+0);a.indexWrite(f+1);a.indexWrite(f+2);a.indexWrite(f+1);
a.indexWrite(f+3);a.indexWrite(f+2)}}x.TextMeshWriter=T;x.TextVertexSpec=G;x.maxLabelZoom=28;Object.defineProperty(x,Symbol.toStringTag,{value:"Module"})});