// All material copyright Esri, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.31/esri/copyright.txt for details.
//>>built
define("exports ../../../core/handleUtils ../../../core/quantityUtils ../../../core/reactiveUtils ../../../core/screenUtils ../../../geometry/Point ../../interactive/tooltip/tooltipCommonUtils ../../interactive/tooltip/infos/MovePointTooltipInfo ../../interactive/tooltip/infos/SelectedVertexTooltipInfo ../../interactive/tooltip/infos/TranslateTooltipInfo ../../interactive/tooltip/infos/TranslateVertexTooltipInfo ../../support/automaticAreaMeasurementUtils ../../support/automaticLengthMeasurementUtils ../../support/euclideanLengthMeasurementUtils".split(" "),
function(h,y,z,l,A,B,q,C,D,E,F,r,m,G){function H(a,{graphic:b}){t(a,b,b?.geometry)}function I(a,{graphic:b,selectedVertex:c}){t(a,b,c?.geometry);b=b?.geometry;switch(b?.type){case "polygon":a.geometryType="polygon";a.totalLength.visible=!1;a.area.actual=r.autoArea2D(b);break;case "polyline":a.geometryType="polyline",a.totalLength.actual=m.autoLength2D(b),a.area.visible=!1}}function t(a,b,c){b&&"point"===c?.type&&(a.setLocationFromPoint(c),a.elevation.actual=G.elevationFromPoint(c),a.elevation.visible=
!!b.geometry?.hasZ,a.elevation.readOnly=!1,a.elevation.showAsZ=!0)}function u(a){function b(d,e){const k=e?.geometry;if(k&&"point"===k.type){var {dx:n,dy:p,dz:v}=q.getXYZDeltasFromTooltipInfo(d,k);if(0!==n||0!==p||0!==v){var {x:J,y:K,z:w,m:L,spatialReference:M}=k;d=new B({x:J+n,y:K+p,z:null!=w?w+v:void 0,m:L,spatialReference:M});a.updateGeometry(e,d,k,n,p)}}}const {activeTooltipInfo:c,graphic:g,selectedVertex:f}=a;switch(c?.type){case "move-point":return b(c,g);case "selected-vertex":return b(c,f)}}
function x(a,b,c){if(c){var {x:g,y:f}=c.origin;c=b.toMap(c);b=b.toMap(A.createScreenPoint(g,f));b=m.autoDistanceBetweenPoints2D(b,c);a.distance=null!=b?b:z.zeroMeters}}h.connectTooltip=function(a,b){function c(){const d=b();return{...d,activeTooltipInfo:d.sketchOptions.tooltips.effectiveEnabled?d.activeTooltipInfo:null}}function g(d){f||(f=!0,d(),f=!1)}let f=!1;return y.handlesGroup([l.watch(()=>{const d=c();return{context:d,geometry:d.graphic?.geometry,vertexGeometry:d.selectedVertex?.geometry}},
({context:d})=>{g(()=>{a:{const e=d.activeTooltipInfo;if(e){switch(e?.type){case "move-point":H(e,d);break a;case "selected-vertex":I(e,d);break a}e.sketchOptions=d.sketchOptions}}a.info=d.activeTooltipInfo})},l.syncAndInitial),l.watch(()=>{const d=c(),{activeTooltipInfo:e}=d;if(e&&"key"in e)return{context:d,key:e.key}},(d,e)=>{d&&e&&d.key!==e.key&&g(()=>u(d.context))},l.sync),q.connectPasteEvent(a,{onBeforePaste:()=>{f=!0},onAfterPaste:()=>{u(c());f=!1}})])};h.createTooltipInfos=function(a){a={sketchOptions:a,
viewType:"2d"};return{movePoint:new C.MovePointTooltipInfo(a),selectedVertex:new D.SelectedVertexTooltipInfo(a),translateGraphic:new E.TranslateTooltipInfo(a),translateVertices:new F.TranslateVertexTooltipInfo(a)}};h.updateTranslateTooltipInfo=function(a,b,c){a.clear();x(a,b,c)};h.updateTranslateVertexTooltipInfo=function(a,b,c,g){a.clear();"polygon"===c?.type?a.area=r.autoArea2D(c):"polyline"===c?.type&&(a.totalLength=m.autoLength2D(c));x(a,b,g)};Object.defineProperty(h,Symbol.toStringTag,{value:"Module"})});