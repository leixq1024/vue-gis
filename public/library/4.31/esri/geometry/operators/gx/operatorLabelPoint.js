// All material copyright Esri, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.31/esri/copyright.txt for details.
//>>built
define("exports ../../../chunks/SimpleGeometryCursor ../../../chunks/Geometry ../../../chunks/QuadraticBezier ../../../chunks/Transformation2D ../../../chunks/Centroid-DZi-eb9F ../../../chunks/OperatorProximity".split(" "),function(w,z,t,l,m,C,v){class D{getOperatorType(){return 10203}accelerateGeometry(a,c,e){return!1}canAccelerateGeometry(a){return!1}supportsCurves(){return!0}executeMany(a,c){return new A(a,c)}execute(a,c){return(new A(null,c)).labelPoint(a)}}class A extends z.GeometryCursor{progress_(){}tock(){t.geometryReleaseAssert(0);
return!1}getRank(){t.geometryReleaseAssert(0);return 0}constructor(a,c){super();this.m_index=-1;this.m_progressCounter=0;this.m_progressTracker=c;this.m_inputGeoms=a}next(){const a=this.m_inputGeoms.next();return a?(t.throwIfMesh(a),this.m_index=this.m_inputGeoms.getGeometryID(),this.labelPoint(a)):null}getGeometryID(){return this.m_index}labelPoint(a){null===a&&t.throwInvalidArgumentException("null pointer is not allowed");if(a.getGeometryType()===t.GeometryType.enumPoint)return a;if(a.isEmpty())return new l.Point({vd:a.getDescription()});
switch(a.getGeometryType()){case t.GeometryType.enumPolygon:return this.labelPointPolygon(a);case t.GeometryType.enumPolyline:return this.labelPointPolyline(a);case t.GeometryType.enumMultiPoint:return this.labelPointMultiPoint(a);case t.GeometryType.enumEnvelope:return this.labelPointEnvelope(a);default:t.throwInvalidArgumentException("geometry is not supported")}}labelPointPolygon(a){var c=new l.Envelope2D;a.queryEnvelope(c);var e=l.calculateToleranceFromGeometryForOp(null,c,!0).total(),d=null,
b=a;a.hasNonLinearSegments()&&(d=new l.Polygon({copy:a}),d=l.processCurves(d,.25*e,e),t.geometryReleaseAssert(d!==a),b=d);var f=0;a=0;for(let x=0,E=b.getPathCount();x<E;++x)d=Math.abs(b.calculateRingArea2D(x)),d>a&&(a=d,f=x);var g=new m.Point2D;Math.abs(a)<=2*e*e?g.setNAN():g.assign(C.calculatePolygonCentroid2D(b,f));if(Number.isNaN(g.x))return a=new l.Envelope2D,b.queryPathEnvelope(f,a),new l.Point({pt:a.getCenter()});if(4>b.getPointCount())return new l.Point({x:g.x,y:g.y});a=m.Point2D.getNAN();
a=[a.clone(),a.clone(),a.clone(),a.clone()];d=[Number.NaN,Number.NaN,Number.NaN,Number.NaN];var n=[Number.NaN,Number.NaN,Number.NaN,Number.NaN],h=!1,p=(new v.OperatorProximity2D).getNearestCoordinate(b,g,!0,!1);if(0===p.m_distance&&(h=!0,a[0]=g,p=(new v.OperatorProximity2D).getNearestCoordinate(b,g,!1,!1),p.m_distance>.416666665*c.minDimension()))return new l.Point({x:g.x,y:g.y});d[0]=p.m_distance;n[0]=0;c=new m.Point2D;var q=!1;let r=.25,k=-1;const u=new l.Envelope2D;b.queryPathEnvelope(f,u);do if(f=
Number.NaN,a[1]=this.calculateParacentroid_(b,m.lerp(u.xmin,u.xmax,r),e),a[1].isNAN()||(p=(new v.OperatorProximity2D).getNearestCoordinate(b,a[1],!1,!1),f=p.m_distance),f>e&&1===l.isPoint2DInPolygon2D(b,a[1],e))q=!0,d[1]=f,n[1]=m.Point2D.sqrDistance(a[1],g);else if(f>k&&(k=f,c.setCoordsPoint2D(a[1])),r-=.01,.1>r)if(0<=k)q=!0,d[1]=k,a[1]=c,n[1]=m.Point2D.sqrDistance(a[1],g);else break;while(!q);q=!1;r=.5;k=-1;f=.01;let B=1;do if(p=Number.NaN,a[2]=this.calculateParacentroid_(b,m.lerp(u.xmin,u.xmax,
r),e),a[2].isNAN()||(p=(new v.OperatorProximity2D).getNearestCoordinate(b,a[2],!1,!1),p=p.m_distance),p>e&&1===l.isPoint2DInPolygon2D(b,a[2],e))q=!0,d[2]=p,n[2]=m.Point2D.sqrDistance(a[2],g);else if(p>k&&(k=p,c.setCoordsPoint2D(a[2])),r=.5+f*B,f+=.01,B*=-1,.3>r||.7<r)if(0<=k)q=!0,d[2]=k,a[2]=c,n[2]=m.Point2D.sqrDistance(a[2],g);else break;while(!q);q=!1;r=.75;k=-1;do if(f=Number.NaN,a[3]=this.calculateParacentroid_(b,m.lerp(u.xmin,u.xmax,r),e),a[3].isNAN()||(p=(new v.OperatorProximity2D).getNearestCoordinate(b,
a[3],!1,!1),f=p.m_distance),f>e&&1===l.isPoint2DInPolygon2D(b,a[3],e))q=!0,d[3]=f,n[3]=m.Point2D.sqrDistance(a[3],g);else if(f>k&&(k=f,c.setCoordsPoint2D(a[3])),r+=.01,.9<r)if(0<=k)q=!0,d[3]=k,a[3]=c,n[3]=m.Point2D.sqrDistance(a[3],g);else break;while(!q);e=[0,1,2,3];b=h?0:1;for(g=b;4>g;g++)for(h=b;3>h;h++)f=n[h],c=n[h+1],0<m.compareWithNANs(f,c)&&(q=e[h],e[h]=e[h+1],e[h+1]=q,n[h]=c,n[h+1]=f);n=b;for(h=g=0;4>b;b++){switch(b){case 0:h=2*d[e[b]];break;case 1:h=1.66666666*d[e[b]];break;case 2:h=1.33333333*
d[e[b]];break;case 3:h=d[e[b]]}h>g&&(g=h,n=e[b])}t.geometryReleaseAssert(!a[n].isNAN());return new l.Point({x:a[n].x,y:a[n].y})}labelPointPolyline(a){const c=new m.Point2D;var e=a.getPointCount(),d=a.getPathCount();if(e>2*d){e=-1;d=-Number.MAX_VALUE;for(let f=0,g=a.getPathCount();f<g;f++)if(2<a.getPathSize(f)){var b=a.calculatePathLength2D(f);b>d&&(d=b,e=f)}d=a.getPathStart(e);e=a.getPathEnd(e);c.assign(a.getXY(Math.trunc((d+e)/2)))}else for(e=-Number.MAX_VALUE,a=a.querySegmentIterator();a.nextPath();)a.hasNextSegment()&&
(d=a.nextSegment(),b=d.calculateLength2D(),b>e&&(e=b,c.assign(d.getCoord2D(d.lengthToT(.5*b)))));return new l.Point({x:c.x,y:c.y})}labelPointMultiPoint(a){var c=new l.Envelope2D;a.queryEnvelope(c);c=c.getCenter();a=(new v.OperatorProximity2D).getNearestCoordinate(a,c,!1,!1).m_coordinate;return new l.Point({x:a.x,y:a.y})}labelPointEnvelope(a){a=a.getCenterXY();return new l.Point({x:a.x,y:a.y})}calculateParacentroid_(a,c,e){var d=new l.Envelope2D;a.queryEnvelope(d);c=new m.Point2D(c,0);let b=Number.MAX_VALUE,
f=Number.MAX_VALUE,g=!1,n=!1;const h=new l.Line;h.setStartXYCoords(c.x,d.ymin-1);h.setEndXYCoords(c.x,d.ymax+1);d=new l.Envelope2D;const p=new m.Point2D,q=new m.Point2D,r=m.makeObjectArray(m.Point2D,2);for(a=a.querySegmentIterator();a.nextPath();)for(;a.hasNextSegment();){var k=a.nextSegment();k.queryEnvelope(d);t.geometryReleaseAssert(k.isMonotoneQuickAndDirty());p.setCoordsPoint2D(h.getStartXY());q.setCoordsPoint2D(h.getEndXY());0!==d.clipLine(p,q)&&1===h.intersect(k,r,null,null,e)&&(k=r[0].y,b>
f?k<b&&(b=k,g=!0):k<f&&(f=k,n=!0))}g&&n?c.y=(b+f)/2:c.setNAN();return c}}const y=new D;w.execute=function(a){return y.execute(a,null)};w.executeMany=function(a){a=y.executeMany(new z.SimpleGeometryCursor(a),null);return Array.from(a)};w.supportsCurves=function(){return y.supportsCurves()};Object.defineProperty(w,Symbol.toStringTag,{value:"Module"})});