// All material copyright Esri, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.31/esri/copyright.txt for details.
//>>built
define("../../../chunks/tslib.es6 ../../../geometry ../../../request ../../../core/Error ../../../core/JSONSupport ../../../core/Logger ../../../core/promiseUtils ../../../core/accessorSupport/decorators/property ../../../core/accessorSupport/ensureType ../../../core/RandomLCG ../../../core/has ../../../core/accessorSupport/decorators/subclass ../arcgisLayerUrl ../commonProperties ../DimensionalDefinition ../LOD ../RasterStorageInfo ../TileInfo ./multidimensionalUtils ./RawBlockCache ../rasterFormats/pixelRangeUtils ../rasterFormats/RasterCodec ../rasterFunctions/pixelUtils ../rasterFunctions/rasterProjectionHelper ../rasterFunctions/vectorFieldUtils ../../../views/support/QueueProcessor ../../../geometry/Point ../../../geometry/Extent ../../../geometry/SpatialReference".split(" "),
function(y,w,V,W,X,Y,Z,z,aa,oa,pa,ba,ca,da,ea,fa,ha,R,L,D,ia,ja,I,v,S,ka,E,H,la){let ma=0;w=class extends X.JSONSupport{constructor(){super(...arguments);this._tileFetchQueue=new ka.QueueProcessor({concurrency:32,process:(a,b)=>this._fetchRawTile(a.pyramidLevel,a.row,a.col,{...a.options,signal:b})});this.datasetFormat=this.datasetName=null;this.hasUniqueSourceStorageInfo=!0;this.rasterInfo=null;this.ioConfig={sampling:"closest"}}normalizeCtorArgs(a){a?.ioConfig&&(a={...a,ioConfig:{resolution:null,
bandIds:null,sampling:"closest",tileInfo:R.create(),...a.ioConfig}});return a}get _isGlobalWrappableSource(){const {rasterInfo:a}=this,b=v.getWorldWidth(a.spatialReference);return null!=b&&a.extent.width>=b/2}get _hasNoneOrGCSShiftTransform(){const {transform:a}=this.rasterInfo;return null==a||"gcs-shift"===a.type}set rasterJobHandler(a){this._set("rasterJobHandler",a);"Function"===this.datasetFormat&&this.primaryRasters?.rasters?.forEach(b=>b.rasterJobHandler=a)}get rasterId(){return this.url||`rasterId-${ma++}`}set url(a){this._set("url",
ca.sanitizeUrl(a,Y.getLogger(this)))}async open(a){this._openPromise??(this._openPromise=v.load().then(()=>this._open(a)));return this._openPromise}async fetchTile(a,b,d,c={}){const e=c.tileInfo||this.rasterInfo.storageInfo.tileInfo;a=this.getTileExtentFromTileInfo(a,b,d,e);c={noClip:!0,...c};return this.fetchPixels(a,e.size[0],e.size[1],c)}async identify(a,b={}){a=aa.ensureClass(E,a).clone().normalize();const {multidimensionalDefinition:d,timeExtent:c}=b;var {rasterInfo:e}=this;const {hasMultidimensionalTranspose:k,
multidimensionalInfo:g}=e;var {transposedVariableName:h}=b,l=null!=g&&k&&(null!=c||L.isMultiSliceOrRangeDefinition(d));l&&!h&&(h=null!=d&&0<d.length?d[0].variableName??void 0:g.variables[0].name,b={...b,transposedVariableName:h});b=this._getRequestOptionsWithSliceId(b);const {spatialReference:f,extent:n}=e;var {datumTransformation:p}=b;p=v.projectPoint(a,f,p);if(!n.intersects(p)||null!=e.transform&&(p=e.transform.inverseTransform(p),!e.nativeExtent.intersects(p)))return{location:p,value:null};var q=
0,r=null!=h&&null!=g&&e.hasMultidimensionalTranspose;if("Function"===this.datasetFormat){l=this.primaryRasters.rasters[0];if(r)return l.identify(p,b);({pixelSize:q}=e);r=3*q.x/2;q=3*q.y/2;r=new H({xmin:p.x-r,xmax:p.x+r,ymin:p.y-q,ymax:p.y+q,spatialReference:f});b={interpolation:"nearest",multidimensionalDefinition:d,sliceId:b.sliceId};({pixelBlock:l}=await l.fetchPixels(r,3,3,b));({pixelBlock:b}=await this.fetchPixels(r,3,3,b));if(null==l)return{location:p,value:null};l=!l.mask||l.mask[4]?l.pixels.map(B=>
B[4]):null;var m;null!=b&&(m=!b.mask||b.mask[4]?b.pixels.map(B=>B[4]):void 0);return{location:p,value:l,processedValue:m,pyramidLevel:0}}if(!r)if(b.srcResolution)q=v.snapPyramid(b.srcResolution,e,this.ioConfig.sampling).pyramidLevel;else if(q=await this.computeBestPyramidLevelForLocation(a,b),null==q)return{location:p,value:null};m=this.identifyPixelLocation(p,q,null,r);if(null===m)return{location:p,value:null};const {row:t,col:u,rowOffset:x,colOffset:A,blockWidth:F}=m;m=D.getRasterId(this.rasterId,
h??b.sliceId);e=`${q}/${t}/${u}`;h=D.getBlock(m,null,e);null==h&&(h=this.fetchRawTile(q,t,u,b),D.putBlock(m,null,e,h));m=await h;return m?.pixels?.length?this._processIdentifyResult(m,{srcLocation:p,position:x*F+A,pyramidLevel:q,useTransposedTile:!!r,requestSomeSlices:l,identifyOptions:b}):{location:p,value:null}}async fetchPixels(a,b,d,c={}){a=v.shiftExtent(a);c=this._getRequestOptionsWithSliceId(c);var {_hasNoneOrGCSShiftTransform:e}=this;if(c.requestRawData&&e)return this._fetchPixels(a,b,d,c);
var k=v.getWorldWidth(a.spatialReference),g=v.getWorldWrapCount(a);if(null==k||0===g||1===g&&this._isGlobalWrappableSource&&e)return this._fetchPixels(a,b,d,c);if(3<=g)return{extent:a,pixelBlock:null};const h=[],{xmin:l,xmax:f}=a,n=Math.round(k/(f-l)*b),p=n-Math.round((k/2-l)/(f-l)*b);let q=0;e=[];for(let m=0;m<=g;m++){var r=new H({xmin:0===m?l:-k/2,xmax:m===g?f-k*m:k/2,ymin:a.ymin,ymax:a.ymax,spatialReference:a.spatialReference});const t=0===m?n-p:m===g?b-q:n;q+=t;e.push(t);r=c.disableWrapAround&&
0<m?null:this._fetchPixels(r,t,d,c);h.push(r)}k=(await Promise.all(h)).map(m=>m?.pixelBlock);g=null;b={width:b,height:d};g=this.rasterJobHandler?(await this.rasterJobHandler.mosaicAndTransform({srcPixelBlocks:k,srcMosaicSize:b,destDimension:null,coefs:null,sampleSpacing:null,interpolation:"nearest",alignmentInfo:null,blockWidths:e},c)).pixelBlock:I.mosaic(k,b,{blockWidths:e});c=v.projectExtent(a,this.rasterInfo.spatialReference,c.datumTransformation);return{extent:a,srcExtent:c,pixelBlock:g}}async fetchRawPixels(a,
b,d,c={}){b={x:Math.floor(b.x),y:Math.floor(b.y)};const e=await this._fetchRawTiles(a,b,d,c),{nativeExtent:k,nativePixelSize:g,storageInfo:h}=this.rasterInfo;var l=2**a,f=g.x*l;l*=g.y;f=new H({xmin:k.xmin+f*b.x,xmax:k.xmin+f*(b.x+d.width-1),ymin:k.ymax-l*(b.y+d.height-1),ymax:k.ymax-l*b.y,spatialReference:k.spatialReference});if(!e)return{extent:f,srcExtent:f,pixelBlock:null};const {pixelBlocks:n,mosaicSize:p}=e;if(1===n.length&&null!=n[0]&&n[0].width===d.width&&n[0].height===d.height)return{extent:f,
srcExtent:f,pixelBlock:e.pixelBlocks[0]};a={x:b.x%(0<a?h.pyramidBlockWidth:h.blockWidth),y:b.y%(0<a?h.pyramidBlockHeight:h.blockHeight)};d=this.rasterJobHandler?(await this.rasterJobHandler.mosaicAndTransform({srcPixelBlocks:n,srcMosaicSize:p,destDimension:d,clipOffset:a,clipSize:d,coefs:null,sampleSpacing:null,interpolation:c.interpolation,alignmentInfo:null,blockWidths:null},c)).pixelBlock:I.mosaic(n,p,{clipOffset:a,clipSize:d});return{extent:f,srcExtent:f,pixelBlock:d}}fetchRawTile(a,b,d,c){throw new W("BaseRaster:read-not-implemented",
"fetchRawTile() is not implemented");}computeExtent(a){return v.projectExtent(this.rasterInfo.extent,a)}decodePixelBlock(a,b){return!this.rasterJobHandler||b.useCanvas?ja.decode(a,b):this.rasterJobHandler.decode({data:a,options:b})}async request(a,b,d=0){const {customFetchParameters:c}=this.ioConfig,{range:e,query:k,headers:g}=b;d=d??b.retryCount??this.ioConfig.retryCount;const h=e?{Range:`bytes=${e.from}-${e.to}`}:null;try{return await V(a,{...b,query:{...k,...c},headers:{...g,...h}})}catch(l){if(0<
d)return d--,this.request(a,b,d);throw l;}}getSliceIndex(a){const {multidimensionalInfo:b}=this.rasterInfo;return null==b||null==a||0===a.length?null:L.getSliceIndex(a,b)}getTileExtentFromTileInfo(a,b,d,c){a=c.lodAt(a);return this.getTileExtent({x:a.resolution,y:a.resolution},b,d,c.origin,c.spatialReference,c.size)}updateTileInfo(){const {storageInfo:a,spatialReference:b,extent:d,pixelSize:c}=this.rasterInfo;var {pyramidResolutions:e}=a;if(!a.tileInfo){const k=[],g=a.maximumPyramidLevel||0;let h=
(c.x+c.y)/2,l=1/.0254*96*h;for(let f=0;f<=g;f++){k.unshift(new fa({level:g-f,resolution:h,scale:l}));if(f===g)break;if(e){const n=(e[f].x+e[f].y)/2;l*=n/h;h=n}else h*=2,l*=2}e=new E({x:d.xmin,y:d.ymax,spatialReference:b});a.tileInfo=new R({origin:e,size:[a.blockWidth,a.blockHeight],spatialReference:b,lods:k});a.isVirtualTileInfo=!0}}createRemoteDatasetStorageInfo(a,b=512,d=512,c){const {width:e,height:k,nativeExtent:g,pixelSize:h,spatialReference:l}=a,f=new E({x:g.xmin,y:g.ymax,spatialReference:l});
null==c&&(c=Math.max(0,Math.round(Math.log(Math.max(e,k))/Math.LN2-8)));const n=this.computeBlockBoundary(g,512,512,{x:g.xmin,y:g.ymax},[h],c);a.storageInfo=new ha({blockWidth:b,blockHeight:d,pyramidBlockWidth:b,pyramidBlockHeight:d,origin:f,firstPyramidLevel:1,maximumPyramidLevel:c,blockBoundary:n})}async computeBestPyramidLevelForLocation(a,b){return 0}computeBlockBoundary(a,b,d,c,e,k=0,g=2){if(1===e.length&&0<k){e=[...e];let {x:f,y:n}=e[0];for(let p=0;p<k;p++)f*=g,n*=g,e.push({x:f,y:n})}k=[];const {x:h,
y:l}=c;for(c=0;c<e.length;c++){const {x:f,y:n}=e[c];k.push({minCol:Math.floor((a.xmin-h+.1*f)/b/f),maxCol:Math.floor((a.xmax-h-.1*f)/b/f),minRow:Math.floor((l-a.ymax+.1*n)/d/n),maxRow:Math.floor((l-a.ymin-.1*n)/d/n)})}return k}getPyramidPixelSize(a){const {nativePixelSize:b}=this.rasterInfo,{pyramidResolutions:d,pyramidScalingFactor:c}=this.rasterInfo.storageInfo;if(0===a)return b;if(null!=d&&d.length)return d[a-1];a=c**a;return{x:b.x*a,y:b.y*a}}identifyPixelLocation(a,b,d,c){const {spatialReference:e,
nativeExtent:k,storageInfo:g}=this.rasterInfo,{maximumPyramidLevel:h,origin:l,transposeInfo:f}=g,n=c&&null!=f?f.tileSize[0]:g.blockWidth;c=c&&null!=f?f.tileSize[1]:g.blockHeight;a=v.projectPoint(a,e,d);if(!k.intersects(a)||0>b||b>h)return null;d=this.getPyramidPixelSize(b);const {x:p,y:q}=d;d=(l.y-a.y)/q/c;const r=(a.x-l.x)/p/n;return{pyramidLevel:b,row:Math.floor(d),col:Math.floor(r),rowOffset:Math.min(c-1,Math.floor((d-Math.floor(d))*c)),colOffset:Math.min(n-1,Math.floor((r-Math.floor(r))*n)),blockWidth:n,
srcLocation:a}}getTileExtent(a,b,d,c,e,k){const [g,h]=k;d=c.x+d*g*a.x;b=c.y-b*h*a.y;return new H({xmin:d,xmax:d+g*a.x,ymin:b-h*a.y,ymax:b,spatialReference:e})}getBlockWidthHeight(a){return{blockWidth:0<a?this.rasterInfo.storageInfo.pyramidBlockWidth:this.rasterInfo.storageInfo.blockWidth,blockHeight:0<a?this.rasterInfo.storageInfo.pyramidBlockHeight:this.rasterInfo.storageInfo.blockHeight}}isBlockOutside(a,b,d){a=this.rasterInfo.storageInfo.blockBoundary[a];return!a||a.maxRow<b||a.maxCol<d||a.minRow>
b||a.minCol>d}updateImageSpaceRasterInfo(a){const {pixelSize:b}=a,{width:d,height:c}=a,e=la.WebMercator;a.spatialReference=e;a.extent=a.nativeExtent=new H({xmin:-.5,ymax:.5,xmax:d-.5,ymin:.5-c,spatialReference:e});a.isPseudoSpatialReference=!0;a.transform=null;a.pixelSize=new E({x:1,y:1,spatialReference:e});const {extent:k,storageInfo:g}=a;if(g){g.origin=new E({x:k.xmin,y:k.ymax,spatialReference:e});const {pyramidResolutions:h,tileInfo:l}=g;h&&h.forEach(f=>{f.x/=b.x;f.y/=b.y});if(l){l.origin=g.origin;
const f=(a.nativePixelSize.x+a.nativePixelSize.y)/2;l.lods.forEach((n,p)=>{n.resolution=f*2**p;n.scale=96*n.resolution/.0254})}}}async _fetchPixels(a,b,d,c={}){var e=v.getWorldWrapCount(a);if(2<=e)return{extent:a,pixelBlock:null};var k=this._getSourceDataInfo(a,b,d,c);const {pyramidLevel:g,srcResolution:h,srcExtent:l,srcWidth:f,srcHeight:n,ul:p}=k;if(0===f||0===n)return{extent:a,srcExtent:l,pixelBlock:null};var {rasterInfo:q}=this,r=q.transform,m="gcs-shift"===r?.type,t=null!=v.getWorldWidth(a.spatialReference);
if(m||!t)e=v.getWorldWrapCount(k.srcExtent,m);k=await this._fetchRawTiles(g,p,{width:f,height:n,wrapCount:e},c);if(!k)return{extent:a,srcExtent:l,pixelBlock:null};var u=q.storageInfo;m=0<g?u.pyramidBlockWidth:u.blockWidth;var x=0<g?u.pyramidBlockHeight:u.blockHeight;let {x:A,y:F}=q.pixelSize;if(0<g){const {pyramidResolutions:C,pyramidScalingFactor:G}=u;null!=C&&C[g-1]?{x:A,y:F}=C[g-1]:(u=G**g,A*=u,F*=u)}var B=q.spatialReference;q=new E({x:A,y:F,spatialReference:B});const M=m===f&&x===n&&0===p.x%m&&
0===p.y%x;u=new E({x:(a.xmax-a.xmin)/b,y:(a.ymax-a.ymin)/d,spatialReference:a.spatialReference});const N=!a.spatialReference.equals(B),J=B.isGeographic?1E-9:1E-4;({datumTransformation:B}=c);if(!N&&M&&1===k.pixelBlocks.length&&m===b&&x===d&&Math.abs(h.x-u.x)<J&&Math.abs(h.y-u.y)<J)return{extent:a,srcExtent:l,srcTilePixelSize:q,pixelBlock:k.pixelBlocks[0]};m=t&&null!=v.getWorldWidth(l.spatialReference)&&this._hasNoneOrGCSShiftTransform;(t=c.requestProjectedLocalDirections&&this.rasterInfo.dataType.startsWith("vector"))&&
!this.rasterJobHandler&&await v.load();e=this.rasterJobHandler?await this.rasterJobHandler.getProjectionOffsetGrid({projectedExtent:a,srcBufferExtent:k.extent,pixelSize:u.toJSON(),datumTransformation:B,rasterTransform:r,hasWrapAround:0<e||m,isAdaptive:!1!==this.ioConfig.optimizeProjectionAccuracy,includeGCSGrid:t},c):v.getProjectionOffsetGrid({projectedExtent:a,srcBufferExtent:k.extent,pixelSize:u,datumTransformation:B,rasterTransform:r,hasWrapAround:0<e||m,isAdaptive:!1,includeGCSGrid:t});r=!c.requestRawData;
m={rows:e.spacing[0],cols:e.spacing[1]};x=this._hasNoneOrGCSShiftTransform?this._getRasterTileAlignmentInfo(g,k.extent.xmin):void 0;const {pixelBlocks:O,mosaicSize:K,isPartiallyFilled:P}=k;k=null;this.rasterJobHandler?(b=await this.rasterJobHandler.mosaicAndTransform({srcPixelBlocks:O,srcMosaicSize:K,destDimension:r?{width:b,height:d}:null,coefs:r?e.coefficients:null,sampleSpacing:r?m:null,projectDirections:t,gcsGrid:t?e.gcsGrid:null,isUV:"vector-uv"===this.rasterInfo.dataType,interpolation:c.interpolation,
alignmentInfo:x,blockWidths:null},c),{pixelBlock:r,localNorthDirections:k}=b):(x=I.mosaic(O,K,{alignmentInfo:x}),r=r?I.approximateTransform(x,{width:b,height:d},e.coefficients,m,c.interpolation):x,t&&e.gcsGrid&&(k=I.getLocalArithmeticNorthRotations({width:b,height:d},e.gcsGrid),r=S.convertToLocalDirections(r,this.rasterInfo.dataType,k)));return c.requestRawData||t?{extent:a,srcExtent:l,srcTilePixelSize:q,pixelBlock:r,transformGrid:e,localNorthDirections:k,isPartiallyFilled:P}:{extent:a,srcExtent:l,
srcTilePixelSize:q,pixelBlock:r}}async _fetchRawTiles(a,b,d,c){const {origin:e,blockBoundary:k}=this.rasterInfo.storageInfo,{blockWidth:g,blockHeight:h}=this.getBlockWidthHeight(a);let {x:l,y:f}=b,{width:n,height:p,wrapCount:q}=d;var r=this._getRasterTileAlignmentInfo(a,0);c.buffer&&(l-=c.buffer.cols,f-=c.buffer.rows,n+=2*c.buffer.cols,p+=2*c.buffer.rows);var m=0,t=0;let u=0;q&&null!=r&&({worldColumnCountFromOrigin:t,originColumnOffset:u,rightPadding:m}=r,t*r.blockWidth-m>=l+n&&(m=0));b=Math.floor(l/
g);d=Math.floor(f/h);const x=Math.floor((l+n+m-1)/g);m=Math.floor((f+p+m-1)/h);var A=k[a];if(!A)return null;const {minRow:F,minCol:B,maxCol:M,maxRow:N}=A;if(0===q&&(m<F||x<B||d>N||b>M))return null;A=[];let J=!1;const O=null==this.ioConfig.allowPartialFill?c.allowPartialFill:this.ioConfig.allowPartialFill;for(let C=d;C<=m;C++)for(let G=b;G<=x;G++){let Q=G;!c.disableWrapAround&&q&&null!=r&&t<=G&&(Q=G-t-u);if(C>=F&&Q>=B&&N>=C&&M>=Q){const T=this._tileFetchQueue.push({pyramidLevel:a,row:C,col:Q,options:c},
{signal:c.signal});O?A.push(new Promise(U=>{T.then(na=>U(na)).catch(()=>{J=!0;U(null)})})):A.push(T)}else A.push(Promise.resolve(null))}if(0===A.length)return null;c=await Promise.all(A);r={height:(m-d+1)*h,width:(x-b+1)*g};({spatialReference:t}=this.rasterInfo);a=this.getPyramidPixelSize(a);const {x:K,y:P}=a;return{extent:new H({xmin:e.x+b*g*K,xmax:e.x+(x+1)*g*K,ymin:e.y-(m+1)*h*P,ymax:e.y-d*h*P,spatialReference:t}),pixelBlocks:c,mosaicSize:r,isPartiallyFilled:J}}_fetchRawTile(a,b,d,c){var e=this.rasterInfo.storageInfo.blockBoundary[a];
if(!e)return Promise.resolve(null);const {minRow:k,minCol:g,maxCol:h,maxRow:l}=e;if(b<k||d<g||b>l||d>h)return Promise.resolve(null);const f=D.getRasterId(this.rasterId,c.sliceId),n=`${a}/${b}/${d}`;e=D.getBlock(f,c.registryId,n);if(null==e){const p=new AbortController;e=this.fetchRawTile(a,b,d,{...c,signal:p.signal});D.putBlock(f,c.registryId,n,e,p);e.catch(()=>D.deleteBlock(f,c.registryId,n))}if(c.signal)Z.onAbort(c,()=>{D.decreaseRefCount(f,c.registryId,n)});return e}_computeMagDirValues(a){const {bandCount:b,
dataType:d}=this.rasterInfo;if((2!==b||"vector-magdir"!==d)&&"vector-uv"!==d||2!==a?.length||!a[0]?.length)return null;var c=a[0].length;if("vector-magdir"===d)return c=a[1].map(h=>(h+360)%360),[a[0],c];const [e,k]=a;a=[];const g=[];for(let h=0;h<c;h++){const [l,f]=S.uvComponentToVector([e[h],k[h]]);a.push(l);g.push(f)}return[a,g]}_getRasterTileAlignmentInfo(a,b){null==this._rasterTileAlignmentInfo&&(this._rasterTileAlignmentInfo=v.getRasterDatasetAlignmentInfo(this.rasterInfo));return null==this._rasterTileAlignmentInfo.pyramidsInfo?
null:{startX:b,halfWorldWidth:this._rasterTileAlignmentInfo.halfWorldWidth,hasGCSSShiftTransform:this._rasterTileAlignmentInfo.hasGCSSShiftTransform,...this._rasterTileAlignmentInfo.pyramidsInfo[a]}}_getSourceDataInfo(a,b,d,c={}){const e={datumTransformation:c.datumTransformation,pyramidLevel:0,pyramidResolution:null,srcExtent:null,srcHeight:0,srcResolution:null,srcWidth:0,ul:{x:0,y:0}};c.srcResolution&&(e.srcResolution=c.srcResolution,this._updateSourceDataInfo(a,e));var k=this.rasterInfo.storageInfo.maximumPyramidLevel||
0;const {srcWidth:g,srcHeight:h,pyramidLevel:l}=e;var f=g/b;const n=h/d,p=l<k&&16<=f*n;var q=l===k&&this._requireTooManySrcTiles(g,h,b,d);if(p||q||0===g||0===h){q=new E({x:(a.xmax-a.xmin)/b,y:(a.ymax-a.ymin)/d,spatialReference:a.spatialReference});q=v.projectResolution(q,this.rasterInfo.spatialReference,a,e.datumTransformation);const r=!q||c.srcResolution&&q.x+q.y<c.srcResolution.x+c.srcResolution.y;p&&c.srcResolution&&r&&(f=Math.round(Math.log(Math.max(f,n))/Math.LN2)-1,k-l+3>=f&&(k=2**f,q={x:c.srcResolution.x*
k,y:c.srcResolution.y*k}));q&&(e.srcResolution=q,this._updateSourceDataInfo(a,e))}this._requireTooManySrcTiles(e.srcWidth,e.srcHeight,b,d)&&(e.srcWidth=0,e.srcHeight=0);return e}_requireTooManySrcTiles(a,b,d,c){const {tileInfo:e}=this.rasterInfo.storageInfo;return Math.ceil(a/e.size[0])*Math.ceil(b/e.size[1])>=256*Math.max(1,(d+c)/1024)||8<a/d||8<b/c}_updateSourceDataInfo(a,b){b.srcWidth=0;b.srcHeight=0;var {rasterInfo:d}=this,c=d.spatialReference;const {srcResolution:e,datumTransformation:k}=b,{pyramidLevel:g,
pyramidResolution:h,excessiveReading:l}=v.snapPyramid(e,d,this.ioConfig.sampling);if(!l&&(a=b.srcExtent||v.projectExtent(a,c,k),null!=a)){(c=d.transform)&&(a=c.inverseTransform(a));b.srcExtent=a;var {x:f,y:n}=d.storageInfo.origin;d=Math.floor((a.xmin-f)/h.x+.1);c=Math.floor((n-a.ymax)/h.y+.1);var p=Math.floor((a.xmax-f)/h.x-.1),q=Math.floor((n-a.ymin)/h.y-.1);p=a.width<.1*h.x?0:p-d+1;a=a.height<.1*h.y?0:q-c+1;b.pyramidLevel=g;b.pyramidResolution=h;b.srcWidth=p;b.srcHeight=a;b.ul={x:d,y:c}}}_getRequestOptionsWithSliceId(a){null!=
this.rasterInfo.multidimensionalInfo&&null==a.sliceId&&(a={...a,sliceId:this.getSliceIndex(a.multidimensionalDefinition)});return a}_processIdentifyResult(a,b){const {srcLocation:d,position:c,pyramidLevel:e,useTransposedTile:k}=b,g=a.pixels[0].length/a.width/a.height;if(a.mask&&!a.mask[c])return{location:d,value:null};const {multidimensionalInfo:h}=this.rasterInfo;if(null==h||!k)return b=a.pixels.map(m=>m[c]),a={location:d,value:b,pyramidLevel:e},b=this._computeMagDirValues(b.map(m=>[m])),b?.length&&
(a.magdirValue=b.map(m=>m[0])),a;let l=a.pixels.map(m=>m.slice(c*g,c*g+g)),f=this._computeMagDirValues(l);const {requestSomeSlices:n,identifyOptions:p}=b;let q=L.createSlices(h,p.transposedVariableName);if(n){const m=L.getSliceIds(q,p.multidimensionalDefinition,p.timeExtent);l=l.map(t=>m.map(u=>t[u]));f=f?.map(t=>m.map(u=>t[u]));q=m.map(t=>q[t])}b=a.noDataValues||this.rasterInfo.noDataValue;a={pixels:l,pixelType:a.pixelType};let r;null!=b&&(ia.convertNoDataToMask(a,b),r=a.mask);a=q.map((m,t)=>{m=
{value:0===r?.[t]?null:l.map(u=>u[t]),multidimensionalDefinition:m.multidimensionalDefinition.map(u=>new ea({...u,isSlice:!0}))};f?.length&&(m.magdirValue=[f[0][t],f[1][t]]);return m});return{location:d,value:null,dataSeries:a,pyramidLevel:e}}};y.__decorate([z.property()],w.prototype,"_rasterTileAlignmentInfo",void 0);y.__decorate([z.property()],w.prototype,"_tileFetchQueue",void 0);y.__decorate([z.property({readOnly:!0})],w.prototype,"_isGlobalWrappableSource",null);y.__decorate([z.property({readOnly:!0})],
w.prototype,"_hasNoneOrGCSShiftTransform",null);y.__decorate([z.property()],w.prototype,"_openPromise",void 0);y.__decorate([z.property()],w.prototype,"rasterJobHandler",null);y.__decorate([z.property({readOnly:!0})],w.prototype,"rasterId",null);y.__decorate([z.property(da.url)],w.prototype,"url",null);y.__decorate([z.property({type:String,json:{write:!0}})],w.prototype,"datasetName",void 0);y.__decorate([z.property({type:String,json:{write:!0}})],w.prototype,"datasetFormat",void 0);y.__decorate([z.property()],
w.prototype,"hasUniqueSourceStorageInfo",void 0);y.__decorate([z.property()],w.prototype,"rasterInfo",void 0);y.__decorate([z.property()],w.prototype,"ioConfig",void 0);y.__decorate([z.property()],w.prototype,"sourceJSON",void 0);return w=y.__decorate([ba.subclass("esri.layers.support.rasterDatasets.BaseRaster")],w)});