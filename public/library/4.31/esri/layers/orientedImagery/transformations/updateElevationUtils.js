// All material copyright Esri, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.31/esri/copyright.txt for details.
//>>built
define("exports ../../../core/Error ../../../core/Logger ../../../core/promiseUtils ../../../geometry/projection ../../../geometry/support/aaBoundingRect ../../ElevationLayer ../../ImageryLayer ../../ImageryTileLayer ../../support/ElevationSampler ../../support/ElevationTile ../../support/ElevationTileData ../../support/RasterFunction ../../support/TileInfo ../../support/TileKey ../../../rest/imageService ../../../rest/support/ImageIdentifyParameters ../../../support/requestPresets ../../../widgets/OrientedImageryViewer/utils".split(" "),
function(g,m,n,k,q,z,A,B,C,D,E,F,r,G,H,I,J,K,t){async function u(a,b,c){await k.waitTick(c);b=L(b,c);a=Array.isArray(a)?a:[a];return await Promise.all(a.map(b))}async function v(a,b,c,d){a=new A(a);let f;try{const {tileInfo:e}=await a.load(),l=(c&&e.lodAt(Math.min(e.lods.length-1,c))?.resolution)??"finest-contiguous";f=await a.createElevationSampler(b,{...d,demResolution:l})}catch(e){if(k.isAbortError(e))return;n.getLogger(a).error(e)}finally{a.destroy()}return f}async function w(a,b,c,d){c=c?new r({functionName:c}):
void 0;var f=new B({url:a,rasterFunction:c,format:"lerc"});await f.load(d);c=a=512;var e=b.width/b.height;1<e?(c/=e,e=b.height/c):(a*=e,e=b.width/a);f=await f.fetchImage(b,a,c,d);d=G.create({scales:[e],size:512,spatialReference:b.spatialReference});b=new H.TileKey(null,0,0,0,z.fromExtent(b));a=new F.ElevationTileData(f.pixelData.pixelBlock.pixels[0],a,c,0);b=new E.ElevationTile(b,a);return new D.TileElevationSampler(b,d,void 0)}async function p(a,b){await k.waitTick(b);b=await K.fetchArcGISServiceJSON(a);
const {tileInfo:c,cacheType:d}=b;if(!b.hasOwnProperty("bandCount")||!b.hasOwnProperty("pixelSizeX"))throw new m("elevation-source:invalid-service-url",`ElevationSource URL expects an elevation 3D image service but given ${a}`);return c?"LERC"!==c?.format?.toUpperCase()||d&&"elevation"!==d.toLowerCase()?h.IMAGE:h.ELEVATION:h.DYNAMIC}function L(a,b){return async c=>{let d=c.clone();var f=c.spatialReference.equals(a.spatialReference)?d:await q.projectWithZConversion(c,a.spatialReference,b);(f=a.queryElevation(f))&&
(d=c.spatialReference.equals(a.spatialReference)?f.clone():await q.projectWithZConversion(f,c.spatialReference,b));d.z=d.z??1;return d}}var h;(function(a){a[a.DYNAMIC=0]="DYNAMIC";a[a.ELEVATION=1]="ELEVATION";a[a.IMAGE=2]="IMAGE"})(h||={});const y=async(a,b)=>{let c;const {extent:d,rasterFunction:f,url:e,lod:l}=a;try{c=await p(e)}catch(x){if(k.isAbortError(x))return;n.getLogger("esri.layers.orientedImagery.transformations").error("updateElevationUsingElevationSource",x)}switch(c){case h.DYNAMIC:return await w(e,
d,f,b);case h.ELEVATION:return await v(e,d,l,b)}};g.getElevationSampler=y;g.getElevationSamplerFromDynamicImageService=w;g.getElevationSamplerFromElevationLayer=v;g.updateUsingConstant=async function(a,b,c){await k.waitTick(c);return a.map(d=>{d.z=b;return d})};g.updateUsingElevationSampler=u;g.updateUsingElevationSource=async function(a,b,c){if(!b.extent||!b.url)throw t.logAndThrow("esri.layer.orientedImagery.transformations",new m("update-elevation:missing-property","both extent and url are required to create a sampler",
b));const d=await y(b);if(!d)throw t.logAndThrow("esri.layers.orientedImagery.transformations",new m("update-elevation:elevation-source","could not create a sampler using provided elevation source",b));return u(a,d,c)};g.updateZfromService=async function(a,b,c){const {url:d,rasterFunction:f}=b;let e;try{e=await p(d,c)}catch(l){k.isAbortError(l)||n.getLogger("esri.layers.orientedImagery.transformations").error(l)}switch(e){case h.ELEVATION:case h.DYNAMIC:c=await I.identify(d,new J({geometry:a,rasterFunction:f?
new r({functionName:f}):void 0}));if(c.value?.[0])return a=a.clone(),a.z=+c.value[0],a;break;case h.IMAGE:if(b=new C(d,c),await b.load(),c=await b.identify(a,c),c.value?.[0])return a=a.clone(),a.z=+c.value[0],a}return a};g.validateElevationSourceURL=p;Object.defineProperty(g,Symbol.toStringTag,{value:"Module"})});