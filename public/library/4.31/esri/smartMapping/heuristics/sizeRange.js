// All material copyright Esri, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.31/esri/copyright.txt for details.
//>>built
define("../../core/has ../../core/Error ../../core/screenUtils ../../geometry/support/scaleUtils ../../renderers/visualVariables/SizeVariable ../../renderers/visualVariables/support/SizeStop ./scaleRange ../support/binningUtils ../support/adapters/support/layerUtils".split(" "),function(Q,g,m,A,n,p,B,C,r){async function D(a){var {view:b}=a;if(!(a&&b&&a.layer))throw new g("size-range:missing-parameters","'view' and 'layer' parameters are required");a.forBinning&&C.verifyBinningParams(a,"size-range");
const {layer:d,...e}=a;var c=a.forBinning?r.binningCapableLayerTypes:r.featureCapableLayerTypes;a=r.createLayerAdapter(d,c,a.forBinning);if(!a)throw new g("size-range:invalid-parameters","'layer' must be one of these types: "+r.getLayerTypeLabels(c).join(", "));c={layerAdapter:a,...e,view:b};await b.when();await a.load(null!=c.signal?{signal:c.signal}:null);b=a.geometryType;if("point"!==b&&"multipoint"!==b&&"polyline"!==b&&"polygon"!==b)throw new g("size-range:not-supported",`sizeRange is not supported for geometryType: ${b}`);
return c}function w(a,b){({view:a}=a);if(!a)throw new g("scale-range:invalid-parameters","'view' is required");var d=b.minScale||1E8;b=a.constraints&&"effectiveLODs"in a.constraints&&a.constraints.effectiveLODs||E;a=[];for(let e=0;e<b.length;e++)if(!(b[e].scale>d)){d=Number(e);d=[d-3,d,d+3,d+6];for(const c of d)-1<c&&c<b.length&&a.push(b[c].scale);break}return a.sort((e,c)=>e-c)}function F(a,b){const {view:d,layerAdapter:e}=a;if(!d)throw new g("scale-range:invalid-parameters","'view' is required");
var c=e.fullExtent;a=e.minScale||1128.497176;const f=e.maxScale||5.91657527591555E8,u=b.minScale||0;b=b.maxScale||0;c=null!=c?A.getScale(d,c):0;c=c<a&&c>f?c:0;return{scales:[a,f,u,b,c].map(Math.round).sort((k,l)=>k-l).filter((k,l,q)=>!!k&&q.indexOf(k)===l).filter((k,l,q)=>l?5<Math.abs(k-q[l-1]):!0),fullExtentScale:c}}function G(a,b){const {minScale:d,maxScale:e}=b;a=w(a,{minScale:d,maxScale:e});if(!a.length)throw new g("scale-range:insufficient-info","not enough scale values");return{minSize:new n({valueExpression:"$view.scale",
stops:a.map((c,f)=>new p({value:c,size:m.px2pt(H[f])}))}),maxSize:new n({valueExpression:"$view.scale",stops:a.map((c,f)=>new p({value:c,size:m.px2pt(I[f])}))})}}function J(a,b){const {minScale:d,maxScale:e}=b;a=w(a,{minScale:d,maxScale:e});if(!a.length)throw new g("scale-range:insufficient-info","not enough scale values");return{minSize:new n({valueExpression:"$view.scale",stops:a.map((c,f)=>new p({value:c,size:m.px2pt(K[f])}))}),maxSize:new n({valueExpression:"$view.scale",stops:a.map((c,f)=>new p({value:c,
size:m.px2pt(L[f])}))})}}function M(a,b){const {spatialStatistics:d,minScale:e,maxScale:c}=b;if(!("avgSize"in d&&d.avgSize))throw new g("size-range:insufficient-info","average polygon size is invalid");const f=d.avgSize;({view:b}=a);if(!b)throw new g("scale-range:invalid-parameters","'view' is required");const {resolution:u,scale:k}=b,l=u/k,{scales:q,fullExtentScale:N}=F(a,{minScale:e,maxScale:c}),x=[],y=[];q.forEach((v,t)=>{var h=Math.ceil(Math.ceil(f/(l*v))/4);4>h?h=4:16<h&&(h=16);const z=5*h,{min:O,
max:P}={min:h,max:50>z?50:z};h=q.indexOf(N);t=-1<h&&t>h?2:1;x.push(new p({value:v,size:m.px2pt(O/t)}));y.push(new p({value:v,size:m.px2pt(P/t)}))});a=new n({valueExpression:"$view.scale",stops:x});b=new n({valueExpression:"$view.scale",stops:y});return{minSize:a,maxSize:b}}const H=[10,8,4,2],I=[100,100,60,30],K=[2,1,.75,.5],L=[32,18,12,6],E=[{level:0,resolution:156543.03392800014,scale:5.91657527591555E8},{level:1,resolution:78271.51696399994,scale:2.95828763795777E8},{level:2,resolution:39135.75848200009,
scale:1.47914381897889E8},{level:3,resolution:19567.87924099992,scale:7.3957190948944E7},{level:4,resolution:9783.93962049996,scale:3.6978595474472E7},{level:5,resolution:4891.96981024998,scale:1.8489297737236E7},{level:6,resolution:2445.98490512499,scale:9244648.868618},{level:7,resolution:1222.992452562495,scale:4622324.434309},{level:8,resolution:611.4962262813797,scale:2311162.217155},{level:9,resolution:305.74811314055756,scale:1155581.108577},{level:10,resolution:152.87405657041106,scale:577790.554289},
{level:11,resolution:76.43702828507324,scale:288895.277144},{level:12,resolution:38.21851414253662,scale:144447.638572},{level:13,resolution:19.10925707126831,scale:72223.819286},{level:14,resolution:9.554628535634155,scale:36111.909643},{level:15,resolution:4.77731426794937,scale:18055.954822},{level:16,resolution:2.388657133974685,scale:9027.977411},{level:17,resolution:1.1943285668550503,scale:4513.988705},{level:18,resolution:.5971642835598172,scale:2256.994353},{level:19,resolution:.29858214164761665,
scale:1128.497176}];return async function(a){a=await D(a);const {view:b,layerAdapter:d,signal:e,filter:c}=a,f=await B({layer:d,view:b,signal:e,filter:c});switch(d.geometryType){case "point":case "multipoint":return G(a,f);case "polyline":return J(a,f);case "polygon":return M(a,f)}return null}});