// All material copyright Esri, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.31/esri/copyright.txt for details.
//>>built
define("require ../../chunks/tslib.es6 ../../geometry ../../Graphic ../../symbols ../../core/arrayUtils ../../core/asyncUtils ../../core/Collection ../../core/deprecate ../../core/Error ../../core/Evented ../../core/JSONSupport ../../core/lang ../../core/Logger ../../core/mathUtils ../../core/maybe ../../core/Promise ../../core/promiseUtils ../../core/ReactiveMap ../../core/reactiveUtils ../../core/sql ../../core/unitUtils ../../core/accessorSupport/decorators/property ../../core/has ../../core/accessorSupport/decorators/subclass ../../core/support/UpdatingHandles ../../geometry/geometryEngineAsync ../../geometry/projection ../../geometry/support/coordsUtils ../../geometry/support/webMercatorUtils ../../layers/GraphicsLayer ../../layers/orientedImagery/queries ../../layers/orientedImagery/core/bestImageUtils ../../layers/orientedImagery/core/coverageUtils ../../layers/orientedImagery/core/ElevationSourceDefinitions ../../layers/orientedImagery/transformations/imageToWorld ../../layers/orientedImagery/transformations/updateElevation ../../layers/orientedImagery/transformations/updateElevationUtils ../../layers/orientedImagery/transformations/utils ../../layers/orientedImagery/transformations/worldToImage ../../layers/support/floorFilterUtils ../../rest/support/AttachmentQuery ../../views/draw/support/drawUtils ../../views/input/InputManager ../PanoramicViewer ./constants ./symbols ./utils ./components/ImageViewer ../../geometry/Point ../../geometry/SpatialReference ../../symbols/SimpleLineSymbol ../../geometry/Multipoint ../../geometry/Polyline ../../geometry/Polygon".split(" "),
function(V,l,h,x,Fa,Q,N,B,S,ia,ja,W,X,G,T,A,ka,y,la,v,Y,Z,m,Ga,ma,na,oa,O,pa,aa,qa,ra,sa,P,ba,ca,da,ta,z,ea,ua,va,wa,xa,ya,D,I,J,za,H,K,Aa,Ba,Ca,fa){const ha=a=>Object.freeze(Object.defineProperty({__proto__:null,default:a},Symbol.toStringTag,{value:"Module"})),Da=new Set(["JPG","JPEG"]),Ea=/\.(\w+)$/;h=class extends ja.EventedMixin(ka.EsriPromise){constructor(a){super(a);this.additionalFeatures=new B;this.additionalCameraLocations=new B;this.additionalFootprints=new B;this.bestFeatureAngle=0;this.bestFeatureFootprint=
this.bestFeatureCurrentFootprint=null;this.coverageFrustums=new B;this.coveragePolygons=new B;this.currentBestFeatureLocation=this.currentBestFeature=null;this.currentCoverageVisible=!0;this.determineWorkflowForFeature=async(b,c,d)=>{const {currentBestFeature:e,selectedPoint:f,view:n}=this;n?.closePopup();if(e&&f){this._initialCurrentCoverageUpdate=!0;try{await this._updatePointsAndPolygons(d),await this._loadImage(d)}catch(k){y.isAbortError(k)||(this.loadImageError(k),G.getLogger(this).error("#loadIImage()",
"error occured while loading image",k))}}};this.disabled=!1;this.displayMessage={key:"onLoadMessage",type:"info"};this.features=new B;this.isAdditionalPointSourcesVisible=this.isAdditionalCoverageVisible=!1;this.localPort=this.layer=null;this.mapImageConversionToolState=!1;this.navigatorCurrentBestFeature=null;this.overlayedCameraLocations=new B;this.overlayedMapFeatures=new la;this.pointSources=new B;this.previousFeatureAngle=0;this.selectedPoint=null;this.shouldShowSelectedImage=!1;this.updateFootprint=
async(b,c)=>{"image-loaded"===this.state&&await this._adapter?.updateFootprint(b,c)};this.updateFootprintPanorama=async(b,c)=>{await this._adapter?.updateFootprintPanorama(b,c)};this._highlightedFeatureHandle=this._adapter=null;this._imageViewer=new za;this._initialCurrentCoverageUpdate=!0;this._overlays=new qa({listMode:"hide",internal:!0,elevationInfo:{mode:"absolute-height"}});this._panoramicViewer=new ya;this._sectorData=this._referencePointOnImage=this._referencePointOnGround=null;this._updatingHandles=
new na.UpdatingHandles;this._suitabilities=this._openPopupTask=this._featureChangedTask=this.footprintExtent=this._crossSymbol=this._clickTask=null;this._transformController=new AbortController;this._updateFootprintTask=null;this.highlight=b=>{if(this._overlaysView){this.removeHighlight();var c=this.additionalFootprints.find(({attributes:{imageID:d}})=>d===Number(b));this._highlightedFeatureHandle=c?this._overlaysView?.highlight(c):null}};this.loadImageFromSource=async(b,c)=>this._updatingHandles.addPromise(this._loadImageFromSourceInternal(b,
c));this.loadImageViewer=b=>{this._imageViewer.container=b};this.loadPanoramicViewer=b=>{this._panoramicViewer.container=b};this.removeHighlight=()=>this._highlightedFeatureHandle?.remove();this.toggleImageAttributes=()=>{A.abortMaybe(this._openPopupTask);this._openPopupTask=N.createTask(async b=>{const {currentBestFeature:c,popupEnabled:d,layer:e,view:f}=this;f?.closePopup();if(f&&c&&d&&e){var {attributes:n,geometry:k}=c,g=new x({geometry:k,attributes:n.toJSON(),layer:e});y.throwIfAborted(b);await f.openPopup({features:[g],
location:n.location.clone()})}})};this._createViewClickHandle=()=>{this.removeHandles("view-click");"disabled"!==this.state&&null!=this.view&&this.addHandles(this.view.on("click",this.mapImageConversionToolState&&"image-loaded"===this.state?this._mapImageConversionToolViewClickHandler:this._viewClickHandler,xa.ViewEventPriorities.WIDGET),"view-click")};this._createImageClickHandle=()=>{this.removeHandles("image-click");const {mapImageConversionToolState:b,mode:c,activeViewer:d,currentBestFeature:e,
footprintExtent:f}=this,n=d?.imageSize;if(b&&"none"!==c&&n&&f&&e){d.clickAction="pixel-location";var k=null,g=v.on(()=>d,"pixel-location",r=>{this.plotReferencePointOnImage(r);k?.abort();k=N.createTask(async q=>{if(r){var p=await this.getMapPoint(r,{feature:e,imageSize:n,mode:c}).then(t=>{const u=this.view?.spatialReference;return z.or(!u,t.spatialReference.equals(u))?t:O.projectWithZConversion(t,u)});y.throwIfAborted(q);this.plotReferencePointOnGround(p)}})});this.addHandles(g,"image-click")}};this._getImageSourceFromAttachment=
async(b,c,d)=>{var e=new va({objectIds:[c]});d=(await b.queryAttachments(e,d))[`${c}`]?.[0];e=d?.url;if(!e)throw new ia("NoAttachmentError","no attachments found",{[b.objectIdField]:c,layer:b});return{datasetFormat:d.contentType.split("/")[1].toUpperCase(),url:e}};this._loadAdapter=async b=>{var {view:c}=this;if(c)switch(c.type){case "2d":({default:c}=await new Promise((d,e)=>V(["./adapters/OrientedImageryViewerViewModelAdapter2D"],f=>d(ha(f)),e)));y.throwIfAborted(b);this._adapter=new c(this);break;
case "3d":({default:c}=await new Promise((d,e)=>V(["./adapters/OrientedImageryViewerViewModelAdapter3D"],f=>d(ha(f)),e))),y.throwIfAborted(b),this._adapter=new c(this)}else this._adapter=null};this._loadImage=async b=>{const {currentBestFeature:c,layer:d,mode:e}=this;this.clearGraphics();if(d&&c&&"none"!==e){var {attributes:f}=c,{imagePath:n,imageRotation:k,cameraHeading:g,cameraRoll:r,cameraPitch:q,objectId:p,cameraOrientation:t,location:u}=f;f=(r??0)+(k??0);var E=u.spatialReference.isWGS84&&4!==
t?.type?aa.geographicToWebMercator(u):new H(u),M=n;if("FA"===n)try{M=await this._getImageSourceFromAttachment(d,p,b)}catch(F){if(y.isAbortError(F))return;if(J.isNoAttachmentError(F)){G.getLogger(this).error(F);this.setMessage("noAttachment","error",`${d.objectIdField}: ${p}`);return}G.getLogger(this).error(F,{[d.objectIdField]:p,layer:d});this.setMessage("imageLoadError","error",`query-attachments-failed:${d.objectIdField} ${p}`);return}try{await this.loadImageFromSource(M,{imageRotation:f,options:b,
pitch:q,yaw:g,mode:e,cameraLocation:E}),y.throwIfAborted(b),await this.transformAndPlotSelectedLocation(b)}catch(F){y.isAbortError(F)||this.loadImageError(F)}}};this._loadImageFromSourceInternal=async(b,c)=>{const {mode:d,imageRotation:e,options:f}=c,n="string"===typeof b,k=n?b:b.url,{pathname:g,searchParams:r}=new URL(k);(b=n?g.match(Ea)?.[1]:b.datasetFormat)||(b=(await J.getContentType(k,{...c.options}))?.split("/")[1]??"UNKNOWN FORMAT");switch(d){case "default":this._imageViewer.imageSource={datasetFormat:b.toUpperCase(),
url:k.split("?")[0]};this._imageViewer.customParameters=Object.fromEntries(r);this._imageViewer.imageRotation=e??0;await this._imageViewer.loadImage(f);break;case "panoramic":if(Da.has(b.toUpperCase())){({selectedPoint:b}=this);const {pitch:q,yaw:p,cameraLocation:t,viewAngle:u}=c;this._panoramicViewer.imageSource=k;c=p??0;"number"===typeof u?c=u-c:t&&b&&(c=await z.getInitialAngle(t,b)-c);this._panoramicViewer.pitch=q??0;this._panoramicViewer.yaw=c;await this._panoramicViewer.loadImage(f)}else this.setMessage("unsupportedPanoramicImageryError",
"error",void 0,{datasetFormat:b})}};this._mapImageConversionToolViewClickHandler=b=>{b.stopPropagation();b.preventDefault();b.mapPoint&&this.plotMapPoint(b.mapPoint)};this._viewClickHandler=b=>{this._clickTask?.abort();this._clickTask=N.createTask(async c=>{const {pointerType:d,button:e,mapPoint:f}=b;if(("mouse"!==d||0===e)&&f)return b.stopPropagation(),b.preventDefault(),this._updatingHandles.addPromise(this.loadBestImage(f,{signal:c}))})};this.plotSelectedPointOnImage=async(b,c)=>{await y.waitTick(c);
if(b)if(c=new H({...(W.isSerializable(b)?b.toJSON():b)}),"default"===this.mode)c.x-=.5,c.y=.5-c.y,c.spatialReference=this._imageViewer.imageRenderer.spatialReference.clone(),this._crossSymbol=new x({geometry:c,symbol:I.crossSymbol}),this._imageViewer.addGraphic(this._crossSymbol,0);else if("panoramic"===this.mode&&({imageSize:c}=this._panoramicViewer,c)){var [d,e]=c,{heading:f,pitch:n}=z.convertPixelToHeadingPitch(b,d,e);b=z.convertHeadingPitchToSphereVertex(f,n);this._crossSymbol=new x({geometry:new H(b,
K.WebMercator),symbol:I.crossSymbol3D});this._panoramicViewer.addGraphic(this._crossSymbol,0)}};this.handleSectorClick=this.handleSectorClick.bind(this);this.searchBestImage=this.searchBestImage.bind(this);this.transformAndPlotReferencePointOnImage=this.transformAndPlotReferencePointOnImage.bind(this);this.updateSuitabilities=this.updateSuitabilities.bind(this);this.selectBestFeature=this.selectBestFeature.bind(this)}initialize(){this.addHandles([v.watch(()=>this.view,()=>{this.load()},v.syncAndInitial),
v.watch(()=>this.view?.map,(a,b)=>{b?.layers.remove(this._overlays);a?.layers.add(this._overlays)},v.initial),v.watch(()=>this.view?.map?.allLayers?.length,a=>{a&&this.view?.map?.layers.reorder(this._overlays,a-1)},v.initial),v.watch(()=>[this.state,this.mapImageConversionToolState,this.view],()=>{this._createViewClickHandle();this._createImageClickHandle()},v.syncAndInitial),v.watch(()=>this.bestFeatureAngle,(a,b)=>{this.previousFeatureAngle=b??0},v.syncAndInitial),v.watch(()=>this.currentBestFeature,
async(a,b)=>{A.abortMaybe(this._featureChangedTask);this._featureChangedTask=N.createTask(async c=>this.determineWorkflowForFeature.apply(this,[a,b,{signal:c}]));await this._featureChangedTask.promise},{sync:!0}),v.watch(()=>this.mode,a=>{this.removeHandles("interaction-handles");switch(a){case "default":this.addHandles(v.watch(()=>this._imageViewer.imagePointsInView,b=>{b&&(A.abortMaybe(this._updateFootprintTask),this._updateFootprintTask=N.createTask(async c=>{await this.updateFootprint(b,{signal:c})}))},
{...v.syncAndInitial,equals:(b,c)=>Q.equals(b,c,X.equalsShallow)}),"interaction-handles");break;case "panoramic":this.addHandles(v.watch(()=>{const {currentBestFeature:b,state:c}=this,{imageSize:d,vfov:e,hfov:f,pitch:n,yaw:k}=this._panoramicViewer;return b&&d&&"image-loading"!==c?[e,f,k,n]:null},b=>{if(b&&"image-loading"!==this.state){var [c,d,e,f]=b;A.abortMaybe(this._updateFootprintTask);this._updateFootprintTask=N.createTask(async n=>{await this.updateFootprintPanorama({verticalFieldOfView:c,horizontalFieldOfView:d,
yaw:e,pitch:f},{signal:n})})}},{...v.syncAndInitial,equals:(b,c)=>Q.equals(b,c,X.equalsShallow)}),"interaction-handles")}},v.syncAndInitial),v.watch(()=>[this.brightness,this.contrast,this.sharpness],()=>{const {_imageViewer:a,brightness:b,contrast:c,mode:d,sharpness:e}=this;"default"===d&&(a.brightness=b,a.contrast=c,a.sharpness=e)},v.syncAndInitial)])}destroy(){this._updateFootprintTask=A.abortMaybe(this._updateFootprintTask);this._clickTask=A.abortMaybe(this._clickTask);this.coverageFrustums.destroy();
this.coveragePolygons.destroy();this.pointSources.destroy();this.additionalFootprints.destroy();this.additionalCameraLocations.destroy();this.bestFeatureFootprint=A.destroyMaybe(this.bestFeatureFootprint);this.bestFeatureCurrentFootprint=A.destroyMaybe(this.bestFeatureCurrentFootprint);this._crossSymbol=A.destroyMaybe(this._crossSymbol);this._referencePointOnGround=A.destroyMaybe(this._referencePointOnGround);this._referencePointOnImage=A.destroyMaybe(this._referencePointOnImage);this._overlays&&
this.view?.map?.remove(this._overlays);this._overlays.destroy()}get activeLayer(){S.deprecatedProperty(G.getLogger(this),"activeLayer",{replacement:"layer"});return this.layer}set activeLayer(a){S.deprecatedProperty(G.getLogger(this),"activeLayer",{replacement:"layer"});this.layer=a}get activeViewer(){const {_imageViewer:a,_panoramicViewer:b,mode:c}=this;switch(c){case "default":return a;case "panoramic":return b;default:return null}}get brightness(){return this._get("brightness")??0}set brightness(a){this._set("brightness",
T.clamp(a,-10,10))}get contrast(){return this._get("contrast")??0}set contrast(a){this._set("contrast",T.clamp(a,-10,10))}get featureCount(){return this.features?.length??0}get imageGalleryEnabled(){return J.isTifOrMrf(this.currentBestFeature?.attributes.imagePath.trim())}get imageLoaded(){S.deprecatedProperty(G.getLogger(this),"imageLoaded",{replacement:'Use OrientedImageryViewer.state \x3d\x3d\x3d "image-loaded"',version:"4.29",warnOnce:!0});return"image-loaded"===this.state}get invalidCameraHeading(){return this.currentBestFeature?.attributes?.cameraHeading===
D.invalidCameraHeading}get imagePointsInView(){const {mode:a,_imageViewer:b}=this;return"default"===a?b.imagePointsInView:null}get layerView(){const {layer:a,view:b}=this;if(a&&b)return b.allLayerViews.find(J.filterOILLayerView(a))}get layerFloorFilterClause(){const {layerView:a}=this;return a?ua.getFloorFilterClause(a):null}get mode(){const a=this.currentBestFeature?.attributes;if(!a)return"none";const {horizontalFieldOfView:b,isSpherical:c}=a;return 360===b||c?"panoramic":"default"}get popupEnabled(){return!0===
this.layer?.popupEnabled}get referencePoint(){return this._referencePointOnGround?.geometry}get sectorData(){const {_sectorData:a}=this;return a?D.sectorsInOrder.map(b=>a[b]):null}get sharpness(){return this._get("sharpness")??0}set sharpness(a){this._set("sharpness",T.clamp(a,0,1))}get state(){const {mode:a,disabled:b}=this;if(b)return"disabled";if(!this.isFulfilled())return"loading";if(this.isRejected())return"error";if(this._updatingHandles.updating)return"image-loading";if("error"===this.displayMessage?.type)return"image-load-error";
switch(a){case "default":return this._imageViewer.state;case "panoramic":return this._panoramicViewer.state}return"ready"}get thumbnails(){const {features:a}=this;return a?new B(a.map(({attributes:{imagePath:b,objectId:c,cameraRoll:d,imageRotation:e}})=>{b=b.trim();return J.isTifOrMrf(b)?{url:b,objectId:c,rotation:(d??0)+(e??0)}:null}).filter(Q.isSome)):null}set view(a){this._set("view",a)}get _overlaysView(){return this.view?.layerViews.find(({layer:a})=>a===this._overlays)}filterByFootprints(a,
b){const c=[],d=[],e=[];a.forEach(f=>{const {layer:{coveragePercent:n},attributes:k}=f;var g=Z.getMetersPerUnitForSR(f.geometry.spatialReference);k.cameraHeight/=g;k.farDistance/=g;k.nearDistance/=g;ba.isConstantElevation(k.elevationSource)&&(k.elevationSource.constantElevation/=g);const {polygon:r,frustum:q}=P.createCoveragePolygon(k);g=r.clone();k.isInspection&&(g=P.computePolygonForInspection(k));n&&(g=P.resizePolygon(g,n));if(P.checkIfPolygonContainsSelectedPoint(g,b)){e.push(f);const {geometry:p,
objectId:t,cameraHeight:u,cameraHeading:E}=k;f=p.clone();f.z=u;f.imageID=t;this.pointSources.push(f);E!==D.invalidCameraHeading&&(c.push(r),q&&d.push(q))}});return{features:e,polygons:c,frustums:d}}handleSectorClick(a){isNaN(a)||(a=this._sectorData?.[D.sectorsInOrder[a]],a?.length&&this._updateCurrentBestFeature(a.at(0)))}handleFeatureClick(a){const {sector:b,featureIndexInSector:c}=a;isNaN(c)||(a=this._sectorData?.[b],a?.length&&this._updateCurrentBestFeature(a.at(c)))}async load(a){this.addResolvingPromise(this._loadAdapter(a).catch(b=>
{if(!y.isAbortError(b))throw b;}));return this}async loadBestImage(a,b){this.view?.closePopup();this.displayMessage=null;this.selectedPoint=a.spatialReference.isGeographic?aa.geographicToWebMercator(a):a.clone();this.features.removeAll();this.currentBestFeature=null;this.additionalFeatures.removeAll();this.additionalFootprints.removeAll();this.additionalCameraLocations.removeAll();this.bestFeatureCurrentFootprint=A.destroyMaybe(this.bestFeatureCurrentFootprint);this._overlays?.removeAll();return this._fetchFeaturesWithController(a,
b)}loadImageError(a){G.getLogger(this).error("oriented-imagery-viewer:load-image",a);this.setMessage("imageLoadError","error",a.message)}async overlayCameraLocations(a){const {activeViewer:b,currentBestFeature:c,overlayedCameraLocations:d,layer:e,mode:f,state:n}=this,k=b?.imageSize;if(k&&c&&e&&"none"!==f&&!n.includes("loading")){var {polygon:g}=P.createCoveragePolygon(c.attributes);b.removeManyGraphics(d.toArray());d.removeAll();a&&({features:a}=await e.queryFeatures({where:`${e.objectIdField} <> ${c.attributes.objectId}`,
geometry:g,returnGeometry:!0,outFields:[e.objectIdField]}),a=await Promise.all(a.map(async r=>{const {attributes:q,geometry:p}=r;r=await this.getPixels(p,{feature:c,imageSize:k,mode:f});const t=I.sourcePointSymbol.clone();t.outline=new Aa({color:[0,0,0],width:1});return new x({attributes:q,symbol:t,geometry:r})})),d.addMany(a),b.addManyGraphics(d.toArray()))}}overlayGraphicsOnImage(a,b){this.overlayedMapFeatures.set(a,b);this.activeViewer?.addManyGraphics(b.toArray())}async overlayMapFeatures(a,b=
!1){const {activeViewer:c,currentBestFeature:d,mode:e,state:f}=this,n=c?.imageSize;if(n&&d&&"none"!==e&&!f.includes("loading")){var {polygon:k}=P.createCoveragePolygon(d.attributes);({features:k}=await a.queryFeatures({geometry:k,returnGeometry:!0,outFields:[a.objectIdField]}));k=new B((await Promise.all(k.map(async g=>{const {attributes:r,geometry:q}=g;g=g.symbol?.clone()??a.renderer?.getSymbol(g).clone();switch(q?.type){case "point":var p=await this.getPixels(q,{feature:d,imageSize:n,mode:e});return new x({attributes:r,
layer:a,symbol:g,geometry:p,visible:a.visible&&b});case "polygon":const {rings:t,spatialReference:u}=q;p=t.map(w=>w.map(([C,L,U])=>new H({x:C,y:L,z:U,spatialReference:u})));p=await Promise.all(p.map(async w=>this.getPixels(w,{feature:d,imageSize:n,mode:e}).then(C=>C.map(z.pointToArray))));return new x({attributes:r,layer:a,symbol:g,geometry:new fa({rings:p,spatialReference:K.WebMercator}),visible:a.visible&&b});case "polyline":const {paths:E,spatialReference:M}=q;p=E.map(w=>w.map(([C,L,U])=>new H({x:C,
y:L,z:U,spatialReference:M})));p=await Promise.all(p.map(async w=>this.getPixels(w,{feature:d,imageSize:n,mode:e}).then(C=>C.map(z.pointToArray))));return new x({attributes:r,layer:a,symbol:g,geometry:new Ca({paths:p,spatialReference:K.WebMercator}),visible:a.visible&&b});case "multipoint":const {points:F,spatialReference:R}=q;p=F.map(([w,C,L])=>new H({x:w,y:C,z:L,spatialReference:R}));p=await this.getPixels(p,{feature:d,imageSize:n,mode:e}).then(w=>w.map(z.pointToArray));return new x({attributes:r,
layer:a,symbol:g,geometry:new Ba({points:p,spatialReference:K.WebMercator}),visible:a.visible&&b})}return null}))).filter(Q.isSome));this.overlayGraphicsOnImage(`${a.id}`,k)}}async getPixels(a,b){const {imageSize:c,mode:d}=b;b=(await this.worldToImage(Array.isArray(a)?a:[a])).map(e=>{if("default"===d)return new H({x:e.x-.5,y:.5-e.y,spatialReference:K.WebMercator});const [f,n]=c,{heading:k,pitch:g}=z.convertPixelToHeadingPitch(e,f,n);e=z.convertHeadingPitchToSphereVertex(k,g);return new H(e,K.WebMercator)});
return Array.isArray(a)?b:b[0]}async getMapPoint(a,b){const {feature:c,mode:d,imageSize:e}=b,{elevationSample:f,attributes:n}=c,{elevationSource:k,location:g,elevation:r,cameraHeight:q}=n;b=g.clone();b.spatialReference.isGeographic&&(b=await O.projectWithZConversion(b,K.WebMercator));const p=await z.getUpdateElevationProps(r??(g.z??0)-q,{elevationSample:f,elevationSource:k,extent:this.footprintExtent});"elevationSample"in p&&z.isElevationSampler(p.elevationSample)&&(c.elevationSample=p.elevationSample);
if("default"===d){var t=z.getImageToWorldProperties(n,e[0],e[1]);b=await ca.imageToWorld(Array.isArray(a)?a:[a],{...t,cameraLocation:b},p)}else t=z.getImageToWorldPanoramicProperties(n,e[0],e[1]),b=await ca.imageToWorldPanoramic(Array.isArray(a)?a:[a],{...t,cameraLocation:b},p);return Array.isArray(a)?b:b[0]}async plotMapPoint(a){this.plotReferencePoint(a);return this.transformAndPlotReferencePointOnImage({feature:this.currentBestFeature,selectedLocation:a,options:{signal:this._transformController?.signal}})}plotReferencePointOnGround(a){this._referencePointOnGround&&
(this._overlays?.remove(this._referencePointOnGround),this._referencePointOnGround.destroy());null!=a&&(this._referencePointOnGround=new x({geometry:new H({...a.toJSON()}),symbol:I.diamondSymbol}),this.view?this._overlays?.add(this._referencePointOnGround):this.emit("plot-ground-point",{data:{point:this._referencePointOnGround?.geometry}}))}plotReferencePointOnImage(a){if("image-loaded"===this.state)switch(this.clearReferencePointOnImage(),this.mode){case "default":a=W.isSerializable(a)?a.toJSON():
a;a.x-=.5;a.y=.5-a.y;this._referencePointOnImage=new x({geometry:new H({spatialReference:this._imageViewer.imageRenderer.spatialReference.clone(),...a}),symbol:I.diamondSymbol});this._imageViewer.addGraphic(this._referencePointOnImage,0);break;case "panoramic":const {imageSize:f}=this._panoramicViewer;if(f){var [b,c]=f,{heading:d,pitch:e}=z.convertPixelToHeadingPitch(a,b,c);a=z.convertHeadingPitchToSphereVertex(d,e);this._referencePointOnImage=new x({geometry:new H(a,K.WebMercator),symbol:I.diamondSymbol3D});
this._panoramicViewer.addGraphic(this._referencePointOnImage,0)}}}removeAllOverlayMapFeatures(){this.overlayedMapFeatures.forEach(a=>{this._imageViewer.removeManyGraphics(a.toArray())});this.overlayedMapFeatures.clear()}removeOverlayedGraphicsOnImage(a){const b=this.overlayedMapFeatures.get(a);b?.length&&(this.activeViewer?.removeManyGraphics(b.toArray()),this.overlayedMapFeatures.delete(a))}resetImage(){this.setMessage("onLoadMessage","info");switch(this.mode){case "default":this._imageViewer.clearImage();
this._imageViewer.clearGraphics();break;case "panoramic":this._panoramicViewer.clearGraphics()}this._clickTask=A.abortMaybe(this._clickTask)}async searchBestImage(a,b){try{const c=await ra.searchImages(a,b);c&&await this._processFeatureResponse(c,a.point,{signal:b?.signal})}catch(c){y.isAbortError(c)||(this.setMessage("imageLoadError","error",c.message),G.getLogger(this).error("error occurred while finding best image",c))}}selectBestFeature(a){this.currentBestFeature=this.features?.find(({attributes:b})=>
b.objectId===Number(a))}setAdditionalCameraLocationsVisibility(a){this.additionalCameraLocations.forEach(b=>{b.visible=a})}setAdditionalCoverageVisibility(a){this.additionalFootprints.forEach(b=>{b.visible=a})}setCurrentCoverageVisibility(a){this.bestFeatureCurrentFootprint&&(this.bestFeatureCurrentFootprint.visible=a);this.currentBestFeatureLocation&&(this.currentBestFeatureLocation.visible=a)}setMapImageConversionToolState(a){this.mapImageConversionToolState=a}toggleAllOverlayMapFeatures(a){this.overlayedMapFeatures.forEach(b=>
{this._toggleVisiblity(b,a)})}toggleOverlayMapFeatures(a,b){(a=this.overlayedMapFeatures.get(a))&&this._toggleVisiblity(a,b)}async transformAndPlotReferencePointOnImage(a){const {selectedLocation:b,options:c}=a;var d=!1,e=!1;a=this.bestFeatureFootprint?.geometry;switch(a?.type){case "polygon":d=b.spatialReference.equals(a.spatialReference)?b:await O.projectWithZConversion(b,a.spatialReference);d=a.contains(d);break;case "mesh":e=b.spatialReference.equals(a.spatialReference)?b:await O.projectWithZConversion(b,
a.spatialReference),e=a.extent.contains(e)}if(d||e)if(a=await this.worldToImage(b,c))return y.throwIfAborted(c),this.plotReferencePointOnImage(a),{x:a.x,y:a.y};this.clearReferencePointOnImage()}updateSuitabilities(a){a.sort((b,c)=>b.suitability-c.suitability);this._suitabilities=a;a=this._suitabilities.map(({feature:b})=>b);this._initialCurrentCoverageUpdate=!0;this._updateFeatures(a);this._groupFeaturesBySectors()}async _fetchFeatures(a,b){if(this.view){var c=this.layer;if(c){var d={include:c};if(a=
this.view.toScreen(a))return d=await this.view.hitTest(a,d),this._processHitTestResults(c,d,b)}}}async _fetchFeaturesWithController(a,b){try{await this._fetchFeatures(a,b)}catch(c){y.isAbortError(c)||(this.setMessage("imageLoadError","error"),G.getLogger(this).error("error occurred while fetching features",c))}}_groupFeaturesBySectors(){const {_suitabilities:a,additionalFeatures:b,currentBestFeature:c,features:d,invalidCameraHeading:e}=this;if(a&&b&&c&&d&&!e){this._sectorData={};for(var f of D.sectorsInOrder)this._sectorData[f]=
new B;f=a.map((g,r)=>({...g,featureIndex:r}));f.sort((g,r)=>g.trueSuitability-r.trueSuitability);var n=f.map(({distance:g})=>g),k=Math.max(...n);f.forEach(g=>{const {distance:r,angle:q,featureIndex:p}=g;var t=r/k*D.sectorsRadii[2],u=J.calculateSegment(r,k),E=J.calculateDirection(q);if(this._sectorData){g=D.sectorsRadii[3]+t*Math.sin(q*Math.PI/180);t=D.sectorsRadii[3]+t*Math.cos(q*Math.PI/180);var M=d.at(p),F=M===this.currentBestFeature,R=this.currentBestFeature?.attributes.cameraPitch&&5>this.currentBestFeature?.attributes.cameraPitch;
if(F&&R)var w=-90;else{w=g-D.sectorsRadii[3];const C=t-D.sectorsRadii[3];let L=180*Math.acos(C/Math.sqrt(w**2+C**2))/Math.PI;if(0>w&&0>C||0>w&&0<C)L*=-1;w=L}u=""===u?E:`${u}_${E}`;F&&(w===this.bestFeatureAngle?this.previousFeatureAngle=w:this.bestFeatureAngle=w,this.navigatorCurrentBestFeature=R?null:{x:g,y:t,direction:E});E=this._sectorData[u];E.add({angle:q,featureIndex:p,x:g,y:t,objectID:M.attributes.objectId,sector:u,featureIndexInSector:E.length})}})}else this._sectorData=null}async _processFeatureResponse(a,
b,c){({features:a}=a);if(a?.length){this.coveragePolygons.removeAll();this.coverageFrustums.removeAll();this.pointSources.removeAll();var {features:d,polygons:e,frustums:f}=this.filterByFootprints(a,b);if(d.length){this.coveragePolygons.addMany(e);this.coverageFrustums.addMany(f);if(e[0]){a=new fa({spatialReference:e[0].spatialReference});for(var n of e)a=await oa.union(a,n);n=[];for(const {geometry:g}of d)a.contains(g)||n.push([g.x,g.y]);n.sort((g,r)=>+pa.isClockwise([g,r]));a.addRing(n);this.footprintExtent=
wa.scale(a.extent,2,2);if(this.view?.supportsGround)try{var k=await this.view.map.ground.createElevationSampler(this.footprintExtent,c)}catch(g){y.isAbortError(g)||G.getLogger(this).error(g)}}if((k||d[0].attributes.elevationSource)&&this.footprintExtent){c=d[0].attributes.elevationSource;ba.isElevationSource(c)&&!k&&(k=await ta.getElevationSampler({extent:this.footprintExtent,lod:c.lod,url:c.url,rasterFunction:c.rasterFunction}));c=await z.getUpdateElevationProps((d[0].attributes.location.z??0)-d[0].attributes.cameraHeight,
{elevationSample:k,elevationSource:c,extent:this.footprintExtent});const [g,...r]=await da([b,...d.map(q=>q.attributes.geometry.clone())],c);d[0].elevationSample=k??c.elevationSample;b.elevation=g.z;d.forEach((q,p)=>{q.attributes.elevation=r[p].z})}d[0].elevationSample&&d.forEach(g=>{g.elevationSample=d[0].elevationSample});this._suitabilities=sa.calculateSuitabilities({features:d,selectedPoint:b,camera:J.isSceneView(this.view)?this.view.camera:null,currentImage:this.currentBestFeature});this.updateSuitabilities(this._suitabilities)}else this.setMessage("noImageError",
"error"),this.currentBestFeature=null}else this.setMessage("noImageError","error"),this.currentBestFeature=null}async _processHitTestResults(a,b,c){const {screenPoint:d,results:[e]}=b;b="graphic"===e?.type&&this.shouldShowSelectedImage;const f=e?.mapPoint??this.view?.toMap(d);if(f){var {layerFloorFilterClause:n}=this;n=Y.sqlAnd("1\x3d1",Y.sqlAnd(a.definitionExpression,n));var k=f.spatialReference.isGeographic?1:Z.getMetersPerUnitForSR(f.spatialReference);a={layerInstanceOrURL:a,point:f,queryParams:{where:n,
maximumDistance:a.maximumDistance?a.maximumDistance/k:void 0,objectIds:b?[e.graphic.getAttribute(a.objectIdField)]:void 0}};await this.searchBestImage(a,c)}}_toggleVisiblity(a,b){a.forEach(c=>{c.visible=b})}_updateFeatures(a){a.length?(this.features.removeAll(),this.features.addMany(a),1<a.length?this.additionalFeatures.addMany(a.slice(1)):this.additionalFeatures.removeAll(),this.currentBestFeature=a[0]):(this.currentBestFeature=null,this.additionalFeatures.removeAll())}async _updatePointsAndPolygons(a){const {pointSources:b,
currentBestFeature:c,currentCoverageVisible:d,isAdditionalPointSourcesVisible:e}=this;if(c&&(this.additionalFootprints.removeAll(),this.additionalCameraLocations.removeAll(),this.bestFeatureCurrentFootprint&&(this.bestFeatureCurrentFootprint.destroy(),this.bestFeatureFootprint=this.bestFeatureCurrentFootprint=null),!this.invalidCameraHeading)){await this._adapter?.createFootprints(a);y.throwIfAborted(a);for(const f of b)f.imageID===c.attributes.objectId?this.currentBestFeatureLocation=new x({attributes:{imageID:f.imageID},
geometry:f,symbol:I.activeSourcePointSymbol,visible:d}):this.additionalCameraLocations.push(new x({attributes:{imageID:f.imageID},geometry:f,symbol:I.sourcePointSymbol,visible:e}))}}_updateCurrentBestFeature(a){if(a){this.currentBestFeature=this.features?.at(a.featureIndex);var b=this.currentBestFeature?.attributes.cameraPitch&&5>this.currentBestFeature?.attributes.cameraPitch;if(b)var c=-90;else{c=a.x-D.sectorsRadii[3];const d=a.y-D.sectorsRadii[3];let e=180*Math.acos(d/Math.sqrt(c**2+d**2))/Math.PI;
if(0>c&&0>d||0>c&&0<d)e*=-1;c=e}c===this.bestFeatureAngle?this.previousFeatureAngle=c:this.bestFeatureAngle=c;this.navigatorCurrentBestFeature=b?null:{x:a.x,y:a.y,direction:a.sector.includes("_")?a.sector.split("_")[1]:a.sector}}}clearGraphics(){this._imageViewer.clearGraphics();this._panoramicViewer.clearGraphics()}clearReferencePointOnImage(){this._referencePointOnImage&&(this._imageViewer.removeGraphic(this._referencePointOnImage),this._panoramicViewer.removeGraphic(this._referencePointOnImage),
this._referencePointOnImage=A.destroyMaybe(this._referencePointOnImage))}plotReferencePoint(a){"mapPoint"in a?this.plotReferencePointOnGround(a.mapPoint):this.plotReferencePointOnGround(a)}setMessage(a,b,c,d){this.displayMessage={key:a,type:b,data:c,map:d}}async transformAndPlotSelectedLocation(a){const {currentBestFeature:b,invalidCameraHeading:c,selectedPoint:d,state:e}=this;this._crossSymbol&&(this._panoramicViewer.removeGraphic(this._crossSymbol),this._imageViewer.removeGraphic(this._crossSymbol),
this._crossSymbol=A.destroyMaybe(this._crossSymbol));if(d&&b&&"image-loaded"===e&&!c)try{var f=await this.worldToImage(d,a);y.throwIfAborted(a);await this.plotSelectedPointOnImage(f,a)}catch(n){y.isAbortError(n)||G.getLogger(this).error("failed to transform map point to pixel, cross symbol will not be plotted on image",{error:n,selectedPoint:d,feature:b})}}async worldToImage(a,b){var {footprintExtent:c}=this,{imageSize:d}=this.activeViewer;if("none"!==this.mode&&this.currentBestFeature&&d&&c){var {attributes:{location:e,
elevationSource:f,cameraHeading:n,elevation:k,cameraHeight:g},elevationSample:r}=this.currentBestFeature,q=e.clone(),p=await z.getUpdateElevationProps(k??(e.z??0)-g,{elevationSample:r,elevationSource:f});this.currentBestFeature.elevationSample=p.elevationSample;c=Array.isArray(a)?a:[a];c=await Promise.all(c.map(t=>new Promise(u=>{if(t.hasZ)u(t);else return u(da(t,p))})));e.spatialReference.isGeographic&&(q=await O.projectWithZConversion(q,K.WebMercator,b));c=await Promise.all(c.map(async t=>q.spatialReference.equals(t.spatialReference)?
t:await O.projectWithZConversion(t,q.spatialReference,b)));y.throwIfAborted(b);"panoramic"===this.mode?d=ea.worldToImagePanoramic(c,{imageHeight:d[1],imageWidth:d[0],cameraHeading:n,cameraLocation:q}):(d=z.getWorldToImageProperties(this.currentBestFeature.attributes,d[0],d[1]),d=ea.worldToImage(c,{...d,cameraLocation:q}));return Array.isArray(a)?d:d[0]}}updateCurrentCoveragePolygon(a){const {additionalFootprints:b,additionalCameraLocations:c,currentBestFeature:d,currentBestFeatureLocation:e,currentCoverageVisible:f,
selectedPoint:n,view:k,_adapter:g}=this,{attributes:{objectId:r},elevationSample:q}=d;if(this._initialCurrentCoverageUpdate)this._overlays?.removeAll(),this._initialCurrentCoverageUpdate=!1,this.bestFeatureCurrentFootprint=A.destroyMaybe(this.bestFeatureCurrentFootprint),a&&!this.invalidCameraHeading&&(a.visible=f,this.bestFeatureCurrentFootprint=a),k&&(a=[...b,...c,this.bestFeatureCurrentFootprint,e].filter(J.isGraphic),k.supportsGround&&q&&g?.updateGroundElevation&&g.updateGroundElevation(a,q),
n&&a.push(new x({geometry:n.clone(),symbol:I.crossSymbol.clone(),attributes:{imageID:r}})),this._overlays.graphics.addMany(a));else if(k&&!this.invalidCameraHeading){this.bestFeatureCurrentFootprint&&(this._overlays?.remove(this.bestFeatureCurrentFootprint),this.bestFeatureCurrentFootprint=A.destroyMaybe(this.bestFeatureCurrentFootprint));var p=this.bestFeatureCurrentFootprint&&this._overlays?this._overlays.graphics.indexOf(this.bestFeatureCurrentFootprint):-1;a&&(this.bestFeatureCurrentFootprint=
a,k?.supportsGround&&q&&g?.updateGroundElevation&&g.updateGroundElevation([a],q),a.visible=this.currentCoverageVisible,this._overlays?.graphics.add(this.bestFeatureCurrentFootprint,0<=p?p:this._overlays.graphics.length-1))}}};l.__decorate([m.property()],h.prototype,"activeLayer",null);l.__decorate([m.property({readOnly:!0})],h.prototype,"activeViewer",null);l.__decorate([m.property()],h.prototype,"additionalFeatures",void 0);l.__decorate([m.property({type:B.ofType(x)})],h.prototype,"additionalCameraLocations",
void 0);l.__decorate([m.property({type:B.ofType(x)})],h.prototype,"additionalFootprints",void 0);l.__decorate([m.property()],h.prototype,"bestFeatureAngle",void 0);l.__decorate([m.property()],h.prototype,"bestFeatureCurrentFootprint",void 0);l.__decorate([m.property({type:x})],h.prototype,"bestFeatureFootprint",void 0);l.__decorate([m.property({type:Number})],h.prototype,"brightness",null);l.__decorate([m.property({type:Number})],h.prototype,"contrast",null);l.__decorate([m.property()],h.prototype,
"coverageFrustums",void 0);l.__decorate([m.property()],h.prototype,"coveragePolygons",void 0);l.__decorate([m.property()],h.prototype,"currentBestFeature",void 0);l.__decorate([m.property()],h.prototype,"currentBestFeatureLocation",void 0);l.__decorate([m.property()],h.prototype,"currentCoverageVisible",void 0);l.__decorate([m.property({json:{write:!1}})],h.prototype,"determineWorkflowForFeature",void 0);l.__decorate([m.property()],h.prototype,"disabled",void 0);l.__decorate([m.property()],h.prototype,
"displayMessage",void 0);l.__decorate([m.property({readOnly:!0})],h.prototype,"featureCount",null);l.__decorate([m.property()],h.prototype,"features",void 0);l.__decorate([m.property({readOnly:!0})],h.prototype,"imageGalleryEnabled",null);l.__decorate([m.property({readOnly:!0})],h.prototype,"imageLoaded",null);l.__decorate([m.property({readOnly:!0})],h.prototype,"invalidCameraHeading",null);l.__decorate([m.property()],h.prototype,"imagePointsInView",null);l.__decorate([m.property()],h.prototype,"isAdditionalCoverageVisible",
void 0);l.__decorate([m.property()],h.prototype,"isAdditionalPointSourcesVisible",void 0);l.__decorate([m.property()],h.prototype,"layer",void 0);l.__decorate([m.property()],h.prototype,"layerView",null);l.__decorate([m.property({readOnly:!0})],h.prototype,"layerFloorFilterClause",null);l.__decorate([m.property({type:Number})],h.prototype,"localPort",void 0);l.__decorate([m.property()],h.prototype,"mapImageConversionToolState",void 0);l.__decorate([m.property({readOnly:!0,value:"none"})],h.prototype,
"mode",null);l.__decorate([m.property()],h.prototype,"navigatorCurrentBestFeature",void 0);l.__decorate([m.property({type:B.ofType(x)})],h.prototype,"overlayedCameraLocations",void 0);l.__decorate([m.property()],h.prototype,"overlayedMapFeatures",void 0);l.__decorate([m.property()],h.prototype,"pointSources",void 0);l.__decorate([m.property({readOnly:!0})],h.prototype,"popupEnabled",null);l.__decorate([m.property()],h.prototype,"previousFeatureAngle",void 0);l.__decorate([m.property()],h.prototype,
"referencePoint",null);l.__decorate([m.property({readOnly:!0})],h.prototype,"sectorData",null);l.__decorate([m.property()],h.prototype,"selectedPoint",void 0);l.__decorate([m.property({type:Number})],h.prototype,"sharpness",null);l.__decorate([m.property()],h.prototype,"shouldShowSelectedImage",void 0);l.__decorate([m.property({readOnly:!0})],h.prototype,"state",null);l.__decorate([m.property({readOnly:!0})],h.prototype,"thumbnails",null);l.__decorate([m.property()],h.prototype,"updateFootprint",
void 0);l.__decorate([m.property()],h.prototype,"updateFootprintPanorama",void 0);l.__decorate([m.property({value:null})],h.prototype,"view",null);l.__decorate([m.property()],h.prototype,"_adapter",void 0);l.__decorate([m.property()],h.prototype,"_highlightedFeatureHandle",void 0);l.__decorate([m.property()],h.prototype,"_imageViewer",void 0);l.__decorate([m.property()],h.prototype,"_initialCurrentCoverageUpdate",void 0);l.__decorate([m.property()],h.prototype,"_overlays",void 0);l.__decorate([m.property({readOnly:!0})],
h.prototype,"_overlaysView",null);l.__decorate([m.property()],h.prototype,"_panoramicViewer",void 0);l.__decorate([m.property()],h.prototype,"_referencePointOnGround",void 0);l.__decorate([m.property()],h.prototype,"_referencePointOnImage",void 0);l.__decorate([m.property()],h.prototype,"_sectorData",void 0);l.__decorate([m.property({readOnly:!0})],h.prototype,"_updatingHandles",void 0);l.__decorate([m.property()],h.prototype,"footprintExtent",void 0);return h=l.__decorate([ma.subclass("esri.widgets.OrientedImageryViewer.OrientedImageryViewerViewModel")],
h)});