// All material copyright Esri, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.31/esri/copyright.txt for details.
//>>built
define("../chunks/tslib.es6 ../geometry ./Analysis ./Viewshed ../core/Collection ../core/collectionUtils ../core/Cyclical ../core/mathUtils ../core/reactiveUtils ../core/accessorSupport/decorators/property ../core/has ../core/Logger ../core/RandomLCG ../core/accessorSupport/decorators/subclass ../geometry/projection ../geometry/Extent".split(" "),function(l,g,B,C,D,z,w,h,A,m,J,K,L,E,F,G){const x=D.ofType(C);g=class extends B{constructor(a){super(a);this.type="viewshed";this._extent=null}initialize(){this.addHandles(A.watch(()=>
this._computeExtent(),a=>{null==a.pending&&(this._extent=a.extent)},A.syncAndInitial))}get viewsheds(){return this._get("viewsheds")||new x}set viewsheds(a){this._set("viewsheds",z.referenceSetter(a,this.viewsheds,x))}get spatialReference(){for(const a of this.viewsheds)if(null!=a.observer)return a.observer.spatialReference;return null}get extent(){return this._extent}get requiredPropertiesForEditing(){return this.viewsheds.items.map(({observer:a})=>a)}async waitComputeExtent(){const a=this._computeExtent();
null!=a.pending&&await a.pending}_computeExtent(){var {spatialReference:a}=this;if(null==a)return{pending:null,extent:null};const c=this.viewsheds.filter(b=>null!=b.observer),t=c.map(b=>b.observer).toArray();a=F.projectOrLoadMany(t,a);return null!=a.pending?{pending:a.pending,extent:null}:{pending:null,extent:a.geometries.map((b,d)=>{const u=c.at(d);return null!=b&&null!=u?this._computeViewshedExtent(this.viewsheds.at(d),b):null}).filter(b=>null!=b).reduce((b,d)=>{b=null==b?d:null==d?b:b.union(d);
return b},null)}}_computeViewshedExtent(a,c){const {farDistance:t,heading:b,tilt:d,horizontalFieldOfView:u,verticalFieldOfView:H}=a;var {spatialReference:n}=c,p=u/2,q=H/2;const y=t/n.metersPerUnit,I=[w.cyclicalDegrees.normalize(b-p),b,w.cyclicalDegrees.normalize(b+p)];a=G.fromPoint(c);var k=r=>{var f=I.map(e=>w.cyclicalDegrees.normalize(e-r));if(f[0]>f[2]||360===u)return y;f=f.map(e=>Math.abs(180<e?360-e:e)).reduce((e,v)=>e>v?v:e);return 90<f?0:y*Math.cos(h.deg2rad(f))};a.xmax+=k(90);a.xmin-=k(-90);
a.ymax+=k(0);a.ymin-=k(180);c=c.z;if(null!=c){let r=k=c;const f=d-90,e=h.clamp(f+q,-90,90),v=h.clamp(f-q,-90,90);n=n?.isGeographic?t:y;k+=n*Math.sin(h.deg2rad(e));r+=n*Math.sin(h.deg2rad(v));q=Math.cos(h.deg2rad(q))*n;p=Math.sin(h.deg2rad(f))*q*(1-Math.cos(h.deg2rad(p)));90>d&&(k-=p);90<d&&(r-=p);a.zmax=Math.max(k,c);a.zmin=Math.min(r,c)}return a}clear(){this.viewsheds.removeAll()}};l.__decorate([m.property({type:["viewshed"]})],g.prototype,"type",void 0);l.__decorate([m.property({cast:z.castForReferenceSetter,
type:x,nonNullable:!0})],g.prototype,"viewsheds",null);l.__decorate([m.property({readOnly:!0})],g.prototype,"spatialReference",null);l.__decorate([m.property()],g.prototype,"_extent",void 0);l.__decorate([m.property({readOnly:!0})],g.prototype,"extent",null);l.__decorate([m.property({readOnly:!0})],g.prototype,"requiredPropertiesForEditing",null);return g=l.__decorate([E.subclass("esri.analysis.ViewshedAnalysis")],g)});